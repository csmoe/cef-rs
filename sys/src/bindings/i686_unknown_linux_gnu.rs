/* automatically generated by rust-bindgen 0.71.1 */

pub type __time_t = ::std::os::raw::c_long;
pub type wchar_t = ::std::os::raw::c_int;
pub type int64 = ::std::os::raw::c_longlong;
pub type uint64 = ::std::os::raw::c_ulonglong;
pub type int32 = ::std::os::raw::c_int;
pub type uint32 = ::std::os::raw::c_uint;
pub type char16 = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_wide_t {
    pub str_: *mut wchar_t,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str_: *mut wchar_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_string_wide_t"][::std::mem::size_of::<_cef_string_wide_t>() - 12usize];
    ["Alignment of _cef_string_wide_t"][::std::mem::align_of::<_cef_string_wide_t>() - 4usize];
    ["Offset of field: _cef_string_wide_t::str_"]
        [::std::mem::offset_of!(_cef_string_wide_t, str_) - 0usize];
    ["Offset of field: _cef_string_wide_t::length"]
        [::std::mem::offset_of!(_cef_string_wide_t, length) - 4usize];
    ["Offset of field: _cef_string_wide_t::dtor"]
        [::std::mem::offset_of!(_cef_string_wide_t, dtor) - 8usize];
};
pub type cef_string_wide_t = _cef_string_wide_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_utf8_t {
    pub str_: *mut ::std::os::raw::c_char,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str_: *mut ::std::os::raw::c_char)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_string_utf8_t"][::std::mem::size_of::<_cef_string_utf8_t>() - 12usize];
    ["Alignment of _cef_string_utf8_t"][::std::mem::align_of::<_cef_string_utf8_t>() - 4usize];
    ["Offset of field: _cef_string_utf8_t::str_"]
        [::std::mem::offset_of!(_cef_string_utf8_t, str_) - 0usize];
    ["Offset of field: _cef_string_utf8_t::length"]
        [::std::mem::offset_of!(_cef_string_utf8_t, length) - 4usize];
    ["Offset of field: _cef_string_utf8_t::dtor"]
        [::std::mem::offset_of!(_cef_string_utf8_t, dtor) - 8usize];
};
pub type cef_string_utf8_t = _cef_string_utf8_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_utf16_t {
    pub str_: *mut char16,
    pub length: usize,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(str_: *mut char16)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_string_utf16_t"][::std::mem::size_of::<_cef_string_utf16_t>() - 12usize];
    ["Alignment of _cef_string_utf16_t"][::std::mem::align_of::<_cef_string_utf16_t>() - 4usize];
    ["Offset of field: _cef_string_utf16_t::str_"]
        [::std::mem::offset_of!(_cef_string_utf16_t, str_) - 0usize];
    ["Offset of field: _cef_string_utf16_t::length"]
        [::std::mem::offset_of!(_cef_string_utf16_t, length) - 4usize];
    ["Offset of field: _cef_string_utf16_t::dtor"]
        [::std::mem::offset_of!(_cef_string_utf16_t, dtor) - 8usize];
};
pub type cef_string_utf16_t = _cef_string_utf16_t;
unsafe extern "C" {
    pub fn cef_string_wide_set(
        src: *const wchar_t,
        src_len: usize,
        output: *mut cef_string_wide_t,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_utf8_set(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_utf8_t,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_utf16_set(
        src: *const char16,
        src_len: usize,
        output: *mut cef_string_utf16_t,
        copy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_wide_clear(str_: *mut cef_string_wide_t);
}
unsafe extern "C" {
    pub fn cef_string_utf8_clear(str_: *mut cef_string_utf8_t);
}
unsafe extern "C" {
    pub fn cef_string_utf16_clear(str_: *mut cef_string_utf16_t);
}
unsafe extern "C" {
    pub fn cef_string_wide_cmp(
        str1: *const cef_string_wide_t,
        str2: *const cef_string_wide_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_utf8_cmp(
        str1: *const cef_string_utf8_t,
        str2: *const cef_string_utf8_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_utf16_cmp(
        str1: *const cef_string_utf16_t,
        str2: *const cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_wide_to_utf8(
        src: *const wchar_t,
        src_len: usize,
        output: *mut cef_string_utf8_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_utf8_to_wide(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_wide_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_wide_to_utf16(
        src: *const wchar_t,
        src_len: usize,
        output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_utf16_to_wide(
        src: *const char16,
        src_len: usize,
        output: *mut cef_string_wide_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_utf8_to_utf16(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_utf16_to_utf8(
        src: *const char16,
        src_len: usize,
        output: *mut cef_string_utf8_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_ascii_to_wide(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_wide_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_ascii_to_utf16(
        src: *const ::std::os::raw::c_char,
        src_len: usize,
        output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
pub type cef_string_userfree_wide_t = *mut cef_string_wide_t;
pub type cef_string_userfree_utf8_t = *mut cef_string_utf8_t;
pub type cef_string_userfree_utf16_t = *mut cef_string_utf16_t;
unsafe extern "C" {
    pub fn cef_string_userfree_wide_alloc() -> cef_string_userfree_wide_t;
}
unsafe extern "C" {
    pub fn cef_string_userfree_utf8_alloc() -> cef_string_userfree_utf8_t;
}
unsafe extern "C" {
    pub fn cef_string_userfree_utf16_alloc() -> cef_string_userfree_utf16_t;
}
unsafe extern "C" {
    pub fn cef_string_userfree_wide_free(str_: cef_string_userfree_wide_t);
}
unsafe extern "C" {
    pub fn cef_string_userfree_utf8_free(str_: cef_string_userfree_utf8_t);
}
unsafe extern "C" {
    pub fn cef_string_userfree_utf16_free(str_: cef_string_userfree_utf16_t);
}
unsafe extern "C" {
    pub fn cef_string_utf16_to_lower(
        src: *const char16,
        src_len: usize,
        output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_utf16_to_upper(
        src: *const char16,
        src_len: usize,
        output: *mut cef_string_utf16_t,
    ) -> ::std::os::raw::c_int;
}
pub type cef_char_t = char16;
pub type cef_string_userfree_t = cef_string_userfree_utf16_t;
pub type cef_string_t = cef_string_utf16_t;
pub type cef_string_list_t = *mut ::std::os::raw::c_void;
unsafe extern "C" {
    pub fn cef_string_list_alloc() -> cef_string_list_t;
}
unsafe extern "C" {
    pub fn cef_string_list_size(list: cef_string_list_t) -> usize;
}
unsafe extern "C" {
    pub fn cef_string_list_value(
        list: cef_string_list_t,
        index: usize,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_list_append(list: cef_string_list_t, value: *const cef_string_t);
}
unsafe extern "C" {
    pub fn cef_string_list_clear(list: cef_string_list_t);
}
unsafe extern "C" {
    pub fn cef_string_list_free(list: cef_string_list_t);
}
unsafe extern "C" {
    pub fn cef_string_list_copy(list: cef_string_list_t) -> cef_string_list_t;
}
pub type cef_string_map_t = *mut ::std::os::raw::c_void;
unsafe extern "C" {
    pub fn cef_string_map_alloc() -> cef_string_map_t;
}
unsafe extern "C" {
    pub fn cef_string_map_size(map: cef_string_map_t) -> usize;
}
unsafe extern "C" {
    pub fn cef_string_map_find(
        map: cef_string_map_t,
        key: *const cef_string_t,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_map_key(
        map: cef_string_map_t,
        index: usize,
        key: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_map_value(
        map: cef_string_map_t,
        index: usize,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_map_append(
        map: cef_string_map_t,
        key: *const cef_string_t,
        value: *const cef_string_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_map_clear(map: cef_string_map_t);
}
unsafe extern "C" {
    pub fn cef_string_map_free(map: cef_string_map_t);
}
pub type cef_string_multimap_t = *mut ::std::os::raw::c_void;
unsafe extern "C" {
    pub fn cef_string_multimap_alloc() -> cef_string_multimap_t;
}
unsafe extern "C" {
    pub fn cef_string_multimap_size(map: cef_string_multimap_t) -> usize;
}
unsafe extern "C" {
    pub fn cef_string_multimap_find_count(
        map: cef_string_multimap_t,
        key: *const cef_string_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn cef_string_multimap_enumerate(
        map: cef_string_multimap_t,
        key: *const cef_string_t,
        value_index: usize,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_multimap_key(
        map: cef_string_multimap_t,
        index: usize,
        key: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_multimap_value(
        map: cef_string_multimap_t,
        index: usize,
        value: *mut cef_string_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_multimap_append(
        map: cef_string_multimap_t,
        key: *const cef_string_t,
        value: *const cef_string_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_string_multimap_clear(map: cef_string_multimap_t);
}
unsafe extern "C" {
    pub fn cef_string_multimap_free(map: cef_string_multimap_t);
}
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_time_t {
    pub year: ::std::os::raw::c_int,
    pub month: ::std::os::raw::c_int,
    pub day_of_week: ::std::os::raw::c_int,
    pub day_of_month: ::std::os::raw::c_int,
    pub hour: ::std::os::raw::c_int,
    pub minute: ::std::os::raw::c_int,
    pub second: ::std::os::raw::c_int,
    pub millisecond: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_time_t"][::std::mem::size_of::<_cef_time_t>() - 32usize];
    ["Alignment of _cef_time_t"][::std::mem::align_of::<_cef_time_t>() - 4usize];
    ["Offset of field: _cef_time_t::year"][::std::mem::offset_of!(_cef_time_t, year) - 0usize];
    ["Offset of field: _cef_time_t::month"][::std::mem::offset_of!(_cef_time_t, month) - 4usize];
    ["Offset of field: _cef_time_t::day_of_week"]
        [::std::mem::offset_of!(_cef_time_t, day_of_week) - 8usize];
    ["Offset of field: _cef_time_t::day_of_month"]
        [::std::mem::offset_of!(_cef_time_t, day_of_month) - 12usize];
    ["Offset of field: _cef_time_t::hour"][::std::mem::offset_of!(_cef_time_t, hour) - 16usize];
    ["Offset of field: _cef_time_t::minute"][::std::mem::offset_of!(_cef_time_t, minute) - 20usize];
    ["Offset of field: _cef_time_t::second"][::std::mem::offset_of!(_cef_time_t, second) - 24usize];
    ["Offset of field: _cef_time_t::millisecond"]
        [::std::mem::offset_of!(_cef_time_t, millisecond) - 28usize];
};
pub type cef_time_t = _cef_time_t;
unsafe extern "C" {
    pub fn cef_time_to_timet(
        cef_time: *const cef_time_t,
        time: *mut time_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_time_from_timet(time: time_t, cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_time_to_doublet(
        cef_time: *const cef_time_t,
        time: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_time_from_doublet(time: f64, cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_time_now(cef_time: *mut cef_time_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_time_delta(
        cef_time1: *const cef_time_t,
        cef_time2: *const cef_time_t,
        delta: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_point_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_point_t"][::std::mem::size_of::<_cef_point_t>() - 8usize];
    ["Alignment of _cef_point_t"][::std::mem::align_of::<_cef_point_t>() - 4usize];
    ["Offset of field: _cef_point_t::x"][::std::mem::offset_of!(_cef_point_t, x) - 0usize];
    ["Offset of field: _cef_point_t::y"][::std::mem::offset_of!(_cef_point_t, y) - 4usize];
};
pub type cef_point_t = _cef_point_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_rect_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_rect_t"][::std::mem::size_of::<_cef_rect_t>() - 16usize];
    ["Alignment of _cef_rect_t"][::std::mem::align_of::<_cef_rect_t>() - 4usize];
    ["Offset of field: _cef_rect_t::x"][::std::mem::offset_of!(_cef_rect_t, x) - 0usize];
    ["Offset of field: _cef_rect_t::y"][::std::mem::offset_of!(_cef_rect_t, y) - 4usize];
    ["Offset of field: _cef_rect_t::width"][::std::mem::offset_of!(_cef_rect_t, width) - 8usize];
    ["Offset of field: _cef_rect_t::height"][::std::mem::offset_of!(_cef_rect_t, height) - 12usize];
};
pub type cef_rect_t = _cef_rect_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_size_t {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_size_t"][::std::mem::size_of::<_cef_size_t>() - 8usize];
    ["Alignment of _cef_size_t"][::std::mem::align_of::<_cef_size_t>() - 4usize];
    ["Offset of field: _cef_size_t::width"][::std::mem::offset_of!(_cef_size_t, width) - 0usize];
    ["Offset of field: _cef_size_t::height"][::std::mem::offset_of!(_cef_size_t, height) - 4usize];
};
pub type cef_size_t = _cef_size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_insets_t {
    pub top: ::std::os::raw::c_int,
    pub left: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_insets_t"][::std::mem::size_of::<_cef_insets_t>() - 16usize];
    ["Alignment of _cef_insets_t"][::std::mem::align_of::<_cef_insets_t>() - 4usize];
    ["Offset of field: _cef_insets_t::top"][::std::mem::offset_of!(_cef_insets_t, top) - 0usize];
    ["Offset of field: _cef_insets_t::left"][::std::mem::offset_of!(_cef_insets_t, left) - 4usize];
    ["Offset of field: _cef_insets_t::bottom"]
        [::std::mem::offset_of!(_cef_insets_t, bottom) - 8usize];
    ["Offset of field: _cef_insets_t::right"]
        [::std::mem::offset_of!(_cef_insets_t, right) - 12usize];
};
pub type cef_insets_t = _cef_insets_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XEvent {
    _unused: [u8; 0],
}
pub type XEvent = _XEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XDisplay {
    _unused: [u8; 0],
}
pub type XDisplay = _XDisplay;
unsafe extern "C" {
    pub fn cef_get_xdisplay() -> *mut XDisplay;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_main_args_t {
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_main_args_t"][::std::mem::size_of::<_cef_main_args_t>() - 8usize];
    ["Alignment of _cef_main_args_t"][::std::mem::align_of::<_cef_main_args_t>() - 4usize];
    ["Offset of field: _cef_main_args_t::argc"]
        [::std::mem::offset_of!(_cef_main_args_t, argc) - 0usize];
    ["Offset of field: _cef_main_args_t::argv"]
        [::std::mem::offset_of!(_cef_main_args_t, argv) - 4usize];
};
pub type cef_main_args_t = _cef_main_args_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_window_info_t {
    pub window_name: cef_string_t,
    pub bounds: cef_rect_t,
    pub parent_window: ::std::os::raw::c_ulong,
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    pub shared_texture_enabled: ::std::os::raw::c_int,
    pub external_begin_frame_enabled: ::std::os::raw::c_int,
    pub window: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_window_info_t"][::std::mem::size_of::<_cef_window_info_t>() - 48usize];
    ["Alignment of _cef_window_info_t"][::std::mem::align_of::<_cef_window_info_t>() - 4usize];
    ["Offset of field: _cef_window_info_t::window_name"]
        [::std::mem::offset_of!(_cef_window_info_t, window_name) - 0usize];
    ["Offset of field: _cef_window_info_t::bounds"]
        [::std::mem::offset_of!(_cef_window_info_t, bounds) - 12usize];
    ["Offset of field: _cef_window_info_t::parent_window"]
        [::std::mem::offset_of!(_cef_window_info_t, parent_window) - 28usize];
    ["Offset of field: _cef_window_info_t::windowless_rendering_enabled"]
        [::std::mem::offset_of!(_cef_window_info_t, windowless_rendering_enabled) - 32usize];
    ["Offset of field: _cef_window_info_t::shared_texture_enabled"]
        [::std::mem::offset_of!(_cef_window_info_t, shared_texture_enabled) - 36usize];
    ["Offset of field: _cef_window_info_t::external_begin_frame_enabled"]
        [::std::mem::offset_of!(_cef_window_info_t, external_begin_frame_enabled) - 40usize];
    ["Offset of field: _cef_window_info_t::window"]
        [::std::mem::offset_of!(_cef_window_info_t, window) - 44usize];
};
pub type cef_window_info_t = _cef_window_info_t;
pub type cef_color_t = uint32;
impl cef_log_severity_t {
    pub const LOGSEVERITY_DEBUG: cef_log_severity_t = cef_log_severity_t::LOGSEVERITY_VERBOSE;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_log_severity_t {
    LOGSEVERITY_DEFAULT = 0,
    LOGSEVERITY_VERBOSE = 1,
    LOGSEVERITY_INFO = 2,
    LOGSEVERITY_WARNING = 3,
    LOGSEVERITY_ERROR = 4,
    LOGSEVERITY_FATAL = 5,
    LOGSEVERITY_DISABLE = 99,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_state_t {
    STATE_DEFAULT = 0,
    STATE_ENABLED = 1,
    STATE_DISABLED = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_settings_t {
    pub size: usize,
    pub no_sandbox: ::std::os::raw::c_int,
    pub browser_subprocess_path: cef_string_t,
    pub framework_dir_path: cef_string_t,
    pub main_bundle_path: cef_string_t,
    pub chrome_runtime: ::std::os::raw::c_int,
    pub multi_threaded_message_loop: ::std::os::raw::c_int,
    pub external_message_pump: ::std::os::raw::c_int,
    pub windowless_rendering_enabled: ::std::os::raw::c_int,
    pub command_line_args_disabled: ::std::os::raw::c_int,
    pub cache_path: cef_string_t,
    pub root_cache_path: cef_string_t,
    pub user_data_path: cef_string_t,
    pub persist_session_cookies: ::std::os::raw::c_int,
    pub persist_user_preferences: ::std::os::raw::c_int,
    pub user_agent: cef_string_t,
    pub user_agent_product: cef_string_t,
    pub locale: cef_string_t,
    pub log_file: cef_string_t,
    pub log_severity: cef_log_severity_t,
    pub javascript_flags: cef_string_t,
    pub resources_dir_path: cef_string_t,
    pub locales_dir_path: cef_string_t,
    pub pack_loading_disabled: ::std::os::raw::c_int,
    pub remote_debugging_port: ::std::os::raw::c_int,
    pub uncaught_exception_stack_size: ::std::os::raw::c_int,
    pub background_color: cef_color_t,
    pub accept_language_list: cef_string_t,
    pub cookieable_schemes_list: cef_string_t,
    pub cookieable_schemes_exclude_defaults: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_settings_t"][::std::mem::size_of::<_cef_settings_t>() - 240usize];
    ["Alignment of _cef_settings_t"][::std::mem::align_of::<_cef_settings_t>() - 4usize];
    ["Offset of field: _cef_settings_t::size"]
        [::std::mem::offset_of!(_cef_settings_t, size) - 0usize];
    ["Offset of field: _cef_settings_t::no_sandbox"]
        [::std::mem::offset_of!(_cef_settings_t, no_sandbox) - 4usize];
    ["Offset of field: _cef_settings_t::browser_subprocess_path"]
        [::std::mem::offset_of!(_cef_settings_t, browser_subprocess_path) - 8usize];
    ["Offset of field: _cef_settings_t::framework_dir_path"]
        [::std::mem::offset_of!(_cef_settings_t, framework_dir_path) - 20usize];
    ["Offset of field: _cef_settings_t::main_bundle_path"]
        [::std::mem::offset_of!(_cef_settings_t, main_bundle_path) - 32usize];
    ["Offset of field: _cef_settings_t::chrome_runtime"]
        [::std::mem::offset_of!(_cef_settings_t, chrome_runtime) - 44usize];
    ["Offset of field: _cef_settings_t::multi_threaded_message_loop"]
        [::std::mem::offset_of!(_cef_settings_t, multi_threaded_message_loop) - 48usize];
    ["Offset of field: _cef_settings_t::external_message_pump"]
        [::std::mem::offset_of!(_cef_settings_t, external_message_pump) - 52usize];
    ["Offset of field: _cef_settings_t::windowless_rendering_enabled"]
        [::std::mem::offset_of!(_cef_settings_t, windowless_rendering_enabled) - 56usize];
    ["Offset of field: _cef_settings_t::command_line_args_disabled"]
        [::std::mem::offset_of!(_cef_settings_t, command_line_args_disabled) - 60usize];
    ["Offset of field: _cef_settings_t::cache_path"]
        [::std::mem::offset_of!(_cef_settings_t, cache_path) - 64usize];
    ["Offset of field: _cef_settings_t::root_cache_path"]
        [::std::mem::offset_of!(_cef_settings_t, root_cache_path) - 76usize];
    ["Offset of field: _cef_settings_t::user_data_path"]
        [::std::mem::offset_of!(_cef_settings_t, user_data_path) - 88usize];
    ["Offset of field: _cef_settings_t::persist_session_cookies"]
        [::std::mem::offset_of!(_cef_settings_t, persist_session_cookies) - 100usize];
    ["Offset of field: _cef_settings_t::persist_user_preferences"]
        [::std::mem::offset_of!(_cef_settings_t, persist_user_preferences) - 104usize];
    ["Offset of field: _cef_settings_t::user_agent"]
        [::std::mem::offset_of!(_cef_settings_t, user_agent) - 108usize];
    ["Offset of field: _cef_settings_t::user_agent_product"]
        [::std::mem::offset_of!(_cef_settings_t, user_agent_product) - 120usize];
    ["Offset of field: _cef_settings_t::locale"]
        [::std::mem::offset_of!(_cef_settings_t, locale) - 132usize];
    ["Offset of field: _cef_settings_t::log_file"]
        [::std::mem::offset_of!(_cef_settings_t, log_file) - 144usize];
    ["Offset of field: _cef_settings_t::log_severity"]
        [::std::mem::offset_of!(_cef_settings_t, log_severity) - 156usize];
    ["Offset of field: _cef_settings_t::javascript_flags"]
        [::std::mem::offset_of!(_cef_settings_t, javascript_flags) - 160usize];
    ["Offset of field: _cef_settings_t::resources_dir_path"]
        [::std::mem::offset_of!(_cef_settings_t, resources_dir_path) - 172usize];
    ["Offset of field: _cef_settings_t::locales_dir_path"]
        [::std::mem::offset_of!(_cef_settings_t, locales_dir_path) - 184usize];
    ["Offset of field: _cef_settings_t::pack_loading_disabled"]
        [::std::mem::offset_of!(_cef_settings_t, pack_loading_disabled) - 196usize];
    ["Offset of field: _cef_settings_t::remote_debugging_port"]
        [::std::mem::offset_of!(_cef_settings_t, remote_debugging_port) - 200usize];
    ["Offset of field: _cef_settings_t::uncaught_exception_stack_size"]
        [::std::mem::offset_of!(_cef_settings_t, uncaught_exception_stack_size) - 204usize];
    ["Offset of field: _cef_settings_t::background_color"]
        [::std::mem::offset_of!(_cef_settings_t, background_color) - 208usize];
    ["Offset of field: _cef_settings_t::accept_language_list"]
        [::std::mem::offset_of!(_cef_settings_t, accept_language_list) - 212usize];
    ["Offset of field: _cef_settings_t::cookieable_schemes_list"]
        [::std::mem::offset_of!(_cef_settings_t, cookieable_schemes_list) - 224usize];
    ["Offset of field: _cef_settings_t::cookieable_schemes_exclude_defaults"]
        [::std::mem::offset_of!(_cef_settings_t, cookieable_schemes_exclude_defaults) - 236usize];
};
pub type cef_settings_t = _cef_settings_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_context_settings_t {
    pub size: usize,
    pub cache_path: cef_string_t,
    pub persist_session_cookies: ::std::os::raw::c_int,
    pub persist_user_preferences: ::std::os::raw::c_int,
    pub accept_language_list: cef_string_t,
    pub cookieable_schemes_list: cef_string_t,
    pub cookieable_schemes_exclude_defaults: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_request_context_settings_t"]
        [::std::mem::size_of::<_cef_request_context_settings_t>() - 52usize];
    ["Alignment of _cef_request_context_settings_t"]
        [::std::mem::align_of::<_cef_request_context_settings_t>() - 4usize];
    ["Offset of field: _cef_request_context_settings_t::size"]
        [::std::mem::offset_of!(_cef_request_context_settings_t, size) - 0usize];
    ["Offset of field: _cef_request_context_settings_t::cache_path"]
        [::std::mem::offset_of!(_cef_request_context_settings_t, cache_path) - 4usize];
    ["Offset of field: _cef_request_context_settings_t::persist_session_cookies"][::std::mem::offset_of!(
        _cef_request_context_settings_t,
        persist_session_cookies
    ) - 16usize];
    ["Offset of field: _cef_request_context_settings_t::persist_user_preferences"][::std::mem::offset_of!(
        _cef_request_context_settings_t,
        persist_user_preferences
    ) - 20usize];
    ["Offset of field: _cef_request_context_settings_t::accept_language_list"]
        [::std::mem::offset_of!(_cef_request_context_settings_t, accept_language_list) - 24usize];
    ["Offset of field: _cef_request_context_settings_t::cookieable_schemes_list"][::std::mem::offset_of!(
        _cef_request_context_settings_t,
        cookieable_schemes_list
    ) - 36usize];
    ["Offset of field: _cef_request_context_settings_t::cookieable_schemes_exclude_defaults"][::std::mem::offset_of!(
        _cef_request_context_settings_t,
        cookieable_schemes_exclude_defaults
    )
        - 48usize];
};
pub type cef_request_context_settings_t = _cef_request_context_settings_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_settings_t {
    pub size: usize,
    pub windowless_frame_rate: ::std::os::raw::c_int,
    pub standard_font_family: cef_string_t,
    pub fixed_font_family: cef_string_t,
    pub serif_font_family: cef_string_t,
    pub sans_serif_font_family: cef_string_t,
    pub cursive_font_family: cef_string_t,
    pub fantasy_font_family: cef_string_t,
    pub default_font_size: ::std::os::raw::c_int,
    pub default_fixed_font_size: ::std::os::raw::c_int,
    pub minimum_font_size: ::std::os::raw::c_int,
    pub minimum_logical_font_size: ::std::os::raw::c_int,
    pub default_encoding: cef_string_t,
    pub remote_fonts: cef_state_t,
    pub javascript: cef_state_t,
    pub javascript_close_windows: cef_state_t,
    pub javascript_access_clipboard: cef_state_t,
    pub javascript_dom_paste: cef_state_t,
    pub image_loading: cef_state_t,
    pub image_shrink_standalone_to_fit: cef_state_t,
    pub text_area_resize: cef_state_t,
    pub tab_to_links: cef_state_t,
    pub local_storage: cef_state_t,
    pub databases: cef_state_t,
    pub webgl: cef_state_t,
    pub background_color: cef_color_t,
    pub accept_language_list: cef_string_t,
    pub chrome_status_bubble: cef_state_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_browser_settings_t"]
        [::std::mem::size_of::<_cef_browser_settings_t>() - 176usize];
    ["Alignment of _cef_browser_settings_t"]
        [::std::mem::align_of::<_cef_browser_settings_t>() - 4usize];
    ["Offset of field: _cef_browser_settings_t::size"]
        [::std::mem::offset_of!(_cef_browser_settings_t, size) - 0usize];
    ["Offset of field: _cef_browser_settings_t::windowless_frame_rate"]
        [::std::mem::offset_of!(_cef_browser_settings_t, windowless_frame_rate) - 4usize];
    ["Offset of field: _cef_browser_settings_t::standard_font_family"]
        [::std::mem::offset_of!(_cef_browser_settings_t, standard_font_family) - 8usize];
    ["Offset of field: _cef_browser_settings_t::fixed_font_family"]
        [::std::mem::offset_of!(_cef_browser_settings_t, fixed_font_family) - 20usize];
    ["Offset of field: _cef_browser_settings_t::serif_font_family"]
        [::std::mem::offset_of!(_cef_browser_settings_t, serif_font_family) - 32usize];
    ["Offset of field: _cef_browser_settings_t::sans_serif_font_family"]
        [::std::mem::offset_of!(_cef_browser_settings_t, sans_serif_font_family) - 44usize];
    ["Offset of field: _cef_browser_settings_t::cursive_font_family"]
        [::std::mem::offset_of!(_cef_browser_settings_t, cursive_font_family) - 56usize];
    ["Offset of field: _cef_browser_settings_t::fantasy_font_family"]
        [::std::mem::offset_of!(_cef_browser_settings_t, fantasy_font_family) - 68usize];
    ["Offset of field: _cef_browser_settings_t::default_font_size"]
        [::std::mem::offset_of!(_cef_browser_settings_t, default_font_size) - 80usize];
    ["Offset of field: _cef_browser_settings_t::default_fixed_font_size"]
        [::std::mem::offset_of!(_cef_browser_settings_t, default_fixed_font_size) - 84usize];
    ["Offset of field: _cef_browser_settings_t::minimum_font_size"]
        [::std::mem::offset_of!(_cef_browser_settings_t, minimum_font_size) - 88usize];
    ["Offset of field: _cef_browser_settings_t::minimum_logical_font_size"]
        [::std::mem::offset_of!(_cef_browser_settings_t, minimum_logical_font_size) - 92usize];
    ["Offset of field: _cef_browser_settings_t::default_encoding"]
        [::std::mem::offset_of!(_cef_browser_settings_t, default_encoding) - 96usize];
    ["Offset of field: _cef_browser_settings_t::remote_fonts"]
        [::std::mem::offset_of!(_cef_browser_settings_t, remote_fonts) - 108usize];
    ["Offset of field: _cef_browser_settings_t::javascript"]
        [::std::mem::offset_of!(_cef_browser_settings_t, javascript) - 112usize];
    ["Offset of field: _cef_browser_settings_t::javascript_close_windows"]
        [::std::mem::offset_of!(_cef_browser_settings_t, javascript_close_windows) - 116usize];
    ["Offset of field: _cef_browser_settings_t::javascript_access_clipboard"]
        [::std::mem::offset_of!(_cef_browser_settings_t, javascript_access_clipboard) - 120usize];
    ["Offset of field: _cef_browser_settings_t::javascript_dom_paste"]
        [::std::mem::offset_of!(_cef_browser_settings_t, javascript_dom_paste) - 124usize];
    ["Offset of field: _cef_browser_settings_t::image_loading"]
        [::std::mem::offset_of!(_cef_browser_settings_t, image_loading) - 128usize];
    ["Offset of field: _cef_browser_settings_t::image_shrink_standalone_to_fit"][::std::mem::offset_of!(
        _cef_browser_settings_t,
        image_shrink_standalone_to_fit
    ) - 132usize];
    ["Offset of field: _cef_browser_settings_t::text_area_resize"]
        [::std::mem::offset_of!(_cef_browser_settings_t, text_area_resize) - 136usize];
    ["Offset of field: _cef_browser_settings_t::tab_to_links"]
        [::std::mem::offset_of!(_cef_browser_settings_t, tab_to_links) - 140usize];
    ["Offset of field: _cef_browser_settings_t::local_storage"]
        [::std::mem::offset_of!(_cef_browser_settings_t, local_storage) - 144usize];
    ["Offset of field: _cef_browser_settings_t::databases"]
        [::std::mem::offset_of!(_cef_browser_settings_t, databases) - 148usize];
    ["Offset of field: _cef_browser_settings_t::webgl"]
        [::std::mem::offset_of!(_cef_browser_settings_t, webgl) - 152usize];
    ["Offset of field: _cef_browser_settings_t::background_color"]
        [::std::mem::offset_of!(_cef_browser_settings_t, background_color) - 156usize];
    ["Offset of field: _cef_browser_settings_t::accept_language_list"]
        [::std::mem::offset_of!(_cef_browser_settings_t, accept_language_list) - 160usize];
    ["Offset of field: _cef_browser_settings_t::chrome_status_bubble"]
        [::std::mem::offset_of!(_cef_browser_settings_t, chrome_status_bubble) - 172usize];
};
pub type cef_browser_settings_t = _cef_browser_settings_t;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_return_value_t {
    RV_CANCEL = 0,
    RV_CONTINUE = 1,
    RV_CONTINUE_ASYNC = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_urlparts_t {
    pub spec: cef_string_t,
    pub scheme: cef_string_t,
    pub username: cef_string_t,
    pub password: cef_string_t,
    pub host: cef_string_t,
    pub port: cef_string_t,
    pub origin: cef_string_t,
    pub path: cef_string_t,
    pub query: cef_string_t,
    pub fragment: cef_string_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_urlparts_t"][::std::mem::size_of::<_cef_urlparts_t>() - 120usize];
    ["Alignment of _cef_urlparts_t"][::std::mem::align_of::<_cef_urlparts_t>() - 4usize];
    ["Offset of field: _cef_urlparts_t::spec"]
        [::std::mem::offset_of!(_cef_urlparts_t, spec) - 0usize];
    ["Offset of field: _cef_urlparts_t::scheme"]
        [::std::mem::offset_of!(_cef_urlparts_t, scheme) - 12usize];
    ["Offset of field: _cef_urlparts_t::username"]
        [::std::mem::offset_of!(_cef_urlparts_t, username) - 24usize];
    ["Offset of field: _cef_urlparts_t::password"]
        [::std::mem::offset_of!(_cef_urlparts_t, password) - 36usize];
    ["Offset of field: _cef_urlparts_t::host"]
        [::std::mem::offset_of!(_cef_urlparts_t, host) - 48usize];
    ["Offset of field: _cef_urlparts_t::port"]
        [::std::mem::offset_of!(_cef_urlparts_t, port) - 60usize];
    ["Offset of field: _cef_urlparts_t::origin"]
        [::std::mem::offset_of!(_cef_urlparts_t, origin) - 72usize];
    ["Offset of field: _cef_urlparts_t::path"]
        [::std::mem::offset_of!(_cef_urlparts_t, path) - 84usize];
    ["Offset of field: _cef_urlparts_t::query"]
        [::std::mem::offset_of!(_cef_urlparts_t, query) - 96usize];
    ["Offset of field: _cef_urlparts_t::fragment"]
        [::std::mem::offset_of!(_cef_urlparts_t, fragment) - 108usize];
};
pub type cef_urlparts_t = _cef_urlparts_t;
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_cookie_priority_t {
    CEF_COOKIE_PRIORITY_LOW = -1,
    CEF_COOKIE_PRIORITY_MEDIUM = 0,
    CEF_COOKIE_PRIORITY_HIGH = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_cookie_same_site_t {
    CEF_COOKIE_SAME_SITE_UNSPECIFIED = 0,
    CEF_COOKIE_SAME_SITE_NO_RESTRICTION = 1,
    CEF_COOKIE_SAME_SITE_LAX_MODE = 2,
    CEF_COOKIE_SAME_SITE_STRICT_MODE = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cookie_t {
    pub name: cef_string_t,
    pub value: cef_string_t,
    pub domain: cef_string_t,
    pub path: cef_string_t,
    pub secure: ::std::os::raw::c_int,
    pub httponly: ::std::os::raw::c_int,
    pub creation: cef_time_t,
    pub last_access: cef_time_t,
    pub has_expires: ::std::os::raw::c_int,
    pub expires: cef_time_t,
    pub same_site: cef_cookie_same_site_t,
    pub priority: cef_cookie_priority_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_cookie_t"][::std::mem::size_of::<_cef_cookie_t>() - 164usize];
    ["Alignment of _cef_cookie_t"][::std::mem::align_of::<_cef_cookie_t>() - 4usize];
    ["Offset of field: _cef_cookie_t::name"][::std::mem::offset_of!(_cef_cookie_t, name) - 0usize];
    ["Offset of field: _cef_cookie_t::value"]
        [::std::mem::offset_of!(_cef_cookie_t, value) - 12usize];
    ["Offset of field: _cef_cookie_t::domain"]
        [::std::mem::offset_of!(_cef_cookie_t, domain) - 24usize];
    ["Offset of field: _cef_cookie_t::path"][::std::mem::offset_of!(_cef_cookie_t, path) - 36usize];
    ["Offset of field: _cef_cookie_t::secure"]
        [::std::mem::offset_of!(_cef_cookie_t, secure) - 48usize];
    ["Offset of field: _cef_cookie_t::httponly"]
        [::std::mem::offset_of!(_cef_cookie_t, httponly) - 52usize];
    ["Offset of field: _cef_cookie_t::creation"]
        [::std::mem::offset_of!(_cef_cookie_t, creation) - 56usize];
    ["Offset of field: _cef_cookie_t::last_access"]
        [::std::mem::offset_of!(_cef_cookie_t, last_access) - 88usize];
    ["Offset of field: _cef_cookie_t::has_expires"]
        [::std::mem::offset_of!(_cef_cookie_t, has_expires) - 120usize];
    ["Offset of field: _cef_cookie_t::expires"]
        [::std::mem::offset_of!(_cef_cookie_t, expires) - 124usize];
    ["Offset of field: _cef_cookie_t::same_site"]
        [::std::mem::offset_of!(_cef_cookie_t, same_site) - 156usize];
    ["Offset of field: _cef_cookie_t::priority"]
        [::std::mem::offset_of!(_cef_cookie_t, priority) - 160usize];
};
pub type cef_cookie_t = _cef_cookie_t;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_termination_status_t {
    TS_ABNORMAL_TERMINATION = 0,
    TS_PROCESS_WAS_KILLED = 1,
    TS_PROCESS_CRASHED = 2,
    TS_PROCESS_OOM = 3,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_path_key_t {
    PK_DIR_CURRENT = 0,
    PK_DIR_EXE = 1,
    PK_DIR_MODULE = 2,
    PK_DIR_TEMP = 3,
    PK_FILE_EXE = 4,
    PK_FILE_MODULE = 5,
    PK_LOCAL_APP_DATA = 6,
    PK_USER_DATA = 7,
    PK_DIR_RESOURCES = 8,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_storage_type_t {
    ST_LOCALSTORAGE = 0,
    ST_SESSIONSTORAGE = 1,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_errorcode_t {
    ERR_NONE = 0,
    ERR_IO_PENDING = -1,
    ERR_FAILED = -2,
    ERR_ABORTED = -3,
    ERR_INVALID_ARGUMENT = -4,
    ERR_INVALID_HANDLE = -5,
    ERR_FILE_NOT_FOUND = -6,
    ERR_TIMED_OUT = -7,
    ERR_FILE_TOO_BIG = -8,
    ERR_UNEXPECTED = -9,
    ERR_ACCESS_DENIED = -10,
    ERR_NOT_IMPLEMENTED = -11,
    ERR_INSUFFICIENT_RESOURCES = -12,
    ERR_OUT_OF_MEMORY = -13,
    ERR_UPLOAD_FILE_CHANGED = -14,
    ERR_SOCKET_NOT_CONNECTED = -15,
    ERR_FILE_EXISTS = -16,
    ERR_FILE_PATH_TOO_LONG = -17,
    ERR_FILE_NO_SPACE = -18,
    ERR_FILE_VIRUS_INFECTED = -19,
    ERR_BLOCKED_BY_CLIENT = -20,
    ERR_NETWORK_CHANGED = -21,
    ERR_BLOCKED_BY_ADMINISTRATOR = -22,
    ERR_SOCKET_IS_CONNECTED = -23,
    ERR_BLOCKED_ENROLLMENT_CHECK_PENDING = -24,
    ERR_UPLOAD_STREAM_REWIND_NOT_SUPPORTED = -25,
    ERR_CONTEXT_SHUT_DOWN = -26,
    ERR_BLOCKED_BY_RESPONSE = -27,
    ERR_CLEARTEXT_NOT_PERMITTED = -29,
    ERR_BLOCKED_BY_CSP = -30,
    ERR_H2_OR_QUIC_REQUIRED = -31,
    ERR_CONNECTION_CLOSED = -100,
    ERR_CONNECTION_RESET = -101,
    ERR_CONNECTION_REFUSED = -102,
    ERR_CONNECTION_ABORTED = -103,
    ERR_CONNECTION_FAILED = -104,
    ERR_NAME_NOT_RESOLVED = -105,
    ERR_INTERNET_DISCONNECTED = -106,
    ERR_SSL_PROTOCOL_ERROR = -107,
    ERR_ADDRESS_INVALID = -108,
    ERR_ADDRESS_UNREACHABLE = -109,
    ERR_SSL_CLIENT_AUTH_CERT_NEEDED = -110,
    ERR_TUNNEL_CONNECTION_FAILED = -111,
    ERR_NO_SSL_VERSIONS_ENABLED = -112,
    ERR_SSL_VERSION_OR_CIPHER_MISMATCH = -113,
    ERR_SSL_RENEGOTIATION_REQUESTED = -114,
    ERR_PROXY_AUTH_UNSUPPORTED = -115,
    ERR_BAD_SSL_CLIENT_AUTH_CERT = -117,
    ERR_CONNECTION_TIMED_OUT = -118,
    ERR_HOST_RESOLVER_QUEUE_TOO_LARGE = -119,
    ERR_SOCKS_CONNECTION_FAILED = -120,
    ERR_SOCKS_CONNECTION_HOST_UNREACHABLE = -121,
    ERR_ALPN_NEGOTIATION_FAILED = -122,
    ERR_SSL_NO_RENEGOTIATION = -123,
    ERR_WINSOCK_UNEXPECTED_WRITTEN_BYTES = -124,
    ERR_SSL_DECOMPRESSION_FAILURE_ALERT = -125,
    ERR_SSL_BAD_RECORD_MAC_ALERT = -126,
    ERR_PROXY_AUTH_REQUESTED = -127,
    ERR_PROXY_CONNECTION_FAILED = -130,
    ERR_MANDATORY_PROXY_CONFIGURATION_FAILED = -131,
    ERR_PRECONNECT_MAX_SOCKET_LIMIT = -133,
    ERR_SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED = -134,
    ERR_SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY = -135,
    ERR_PROXY_CERTIFICATE_INVALID = -136,
    ERR_NAME_RESOLUTION_FAILED = -137,
    ERR_NETWORK_ACCESS_DENIED = -138,
    ERR_TEMPORARILY_THROTTLED = -139,
    ERR_HTTPS_PROXY_TUNNEL_RESPONSE_REDIRECT = -140,
    ERR_SSL_CLIENT_AUTH_SIGNATURE_FAILED = -141,
    ERR_MSG_TOO_BIG = -142,
    ERR_WS_PROTOCOL_ERROR = -145,
    ERR_ADDRESS_IN_USE = -147,
    ERR_SSL_HANDSHAKE_NOT_COMPLETED = -148,
    ERR_SSL_BAD_PEER_PUBLIC_KEY = -149,
    ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN = -150,
    ERR_CLIENT_AUTH_CERT_TYPE_UNSUPPORTED = -151,
    ERR_SSL_DECRYPT_ERROR_ALERT = -153,
    ERR_WS_THROTTLE_QUEUE_TOO_LARGE = -154,
    ERR_SSL_SERVER_CERT_CHANGED = -156,
    ERR_SSL_UNRECOGNIZED_NAME_ALERT = -159,
    ERR_SOCKET_SET_RECEIVE_BUFFER_SIZE_ERROR = -160,
    ERR_SOCKET_SET_SEND_BUFFER_SIZE_ERROR = -161,
    ERR_SOCKET_RECEIVE_BUFFER_SIZE_UNCHANGEABLE = -162,
    ERR_SOCKET_SEND_BUFFER_SIZE_UNCHANGEABLE = -163,
    ERR_SSL_CLIENT_AUTH_CERT_BAD_FORMAT = -164,
    ERR_ICANN_NAME_COLLISION = -166,
    ERR_SSL_SERVER_CERT_BAD_FORMAT = -167,
    ERR_CT_STH_PARSING_FAILED = -168,
    ERR_CT_STH_INCOMPLETE = -169,
    ERR_UNABLE_TO_REUSE_CONNECTION_FOR_PROXY_AUTH = -170,
    ERR_CT_CONSISTENCY_PROOF_PARSING_FAILED = -171,
    ERR_SSL_OBSOLETE_CIPHER = -172,
    ERR_WS_UPGRADE = -173,
    ERR_READ_IF_READY_NOT_IMPLEMENTED = -174,
    ERR_NO_BUFFER_SPACE = -176,
    ERR_SSL_CLIENT_AUTH_NO_COMMON_ALGORITHMS = -177,
    ERR_EARLY_DATA_REJECTED = -178,
    ERR_WRONG_VERSION_ON_EARLY_DATA = -179,
    ERR_TLS13_DOWNGRADE_DETECTED = -180,
    ERR_SSL_KEY_USAGE_INCOMPATIBLE = -181,
    ERR_INVALID_ECH_CONFIG_LIST = -182,
    ERR_ECH_NOT_NEGOTIATED = -183,
    ERR_ECH_FALLBACK_CERTIFICATE_INVALID = -184,
    ERR_CERT_COMMON_NAME_INVALID = -200,
    ERR_CERT_DATE_INVALID = -201,
    ERR_CERT_AUTHORITY_INVALID = -202,
    ERR_CERT_CONTAINS_ERRORS = -203,
    ERR_CERT_NO_REVOCATION_MECHANISM = -204,
    ERR_CERT_UNABLE_TO_CHECK_REVOCATION = -205,
    ERR_CERT_REVOKED = -206,
    ERR_CERT_INVALID = -207,
    ERR_CERT_WEAK_SIGNATURE_ALGORITHM = -208,
    ERR_CERT_NON_UNIQUE_NAME = -210,
    ERR_CERT_WEAK_KEY = -211,
    ERR_CERT_NAME_CONSTRAINT_VIOLATION = -212,
    ERR_CERT_VALIDITY_TOO_LONG = -213,
    ERR_CERTIFICATE_TRANSPARENCY_REQUIRED = -214,
    ERR_CERT_SYMANTEC_LEGACY = -215,
    ERR_CERT_KNOWN_INTERCEPTION_BLOCKED = -217,
    ERR_CERT_END = -219,
    ERR_INVALID_URL = -300,
    ERR_DISALLOWED_URL_SCHEME = -301,
    ERR_UNKNOWN_URL_SCHEME = -302,
    ERR_INVALID_REDIRECT = -303,
    ERR_TOO_MANY_REDIRECTS = -310,
    ERR_UNSAFE_REDIRECT = -311,
    ERR_UNSAFE_PORT = -312,
    ERR_INVALID_RESPONSE = -320,
    ERR_INVALID_CHUNKED_ENCODING = -321,
    ERR_METHOD_NOT_SUPPORTED = -322,
    ERR_UNEXPECTED_PROXY_AUTH = -323,
    ERR_EMPTY_RESPONSE = -324,
    ERR_RESPONSE_HEADERS_TOO_BIG = -325,
    ERR_PAC_SCRIPT_FAILED = -327,
    ERR_REQUEST_RANGE_NOT_SATISFIABLE = -328,
    ERR_MALFORMED_IDENTITY = -329,
    ERR_CONTENT_DECODING_FAILED = -330,
    ERR_NETWORK_IO_SUSPENDED = -331,
    ERR_SYN_REPLY_NOT_RECEIVED = -332,
    ERR_ENCODING_CONVERSION_FAILED = -333,
    ERR_UNRECOGNIZED_FTP_DIRECTORY_LISTING_FORMAT = -334,
    ERR_NO_SUPPORTED_PROXIES = -336,
    ERR_HTTP2_PROTOCOL_ERROR = -337,
    ERR_INVALID_AUTH_CREDENTIALS = -338,
    ERR_UNSUPPORTED_AUTH_SCHEME = -339,
    ERR_ENCODING_DETECTION_FAILED = -340,
    ERR_MISSING_AUTH_CREDENTIALS = -341,
    ERR_UNEXPECTED_SECURITY_LIBRARY_STATUS = -342,
    ERR_MISCONFIGURED_AUTH_ENVIRONMENT = -343,
    ERR_UNDOCUMENTED_SECURITY_LIBRARY_STATUS = -344,
    ERR_RESPONSE_BODY_TOO_BIG_TO_DRAIN = -345,
    ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH = -346,
    ERR_INCOMPLETE_HTTP2_HEADERS = -347,
    ERR_PAC_NOT_IN_DHCP = -348,
    ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_DISPOSITION = -349,
    ERR_RESPONSE_HEADERS_MULTIPLE_LOCATION = -350,
    ERR_HTTP2_SERVER_REFUSED_STREAM = -351,
    ERR_HTTP2_PING_FAILED = -352,
    ERR_CONTENT_LENGTH_MISMATCH = -354,
    ERR_INCOMPLETE_CHUNKED_ENCODING = -355,
    ERR_QUIC_PROTOCOL_ERROR = -356,
    ERR_RESPONSE_HEADERS_TRUNCATED = -357,
    ERR_QUIC_HANDSHAKE_FAILED = -358,
    ERR_HTTP2_INADEQUATE_TRANSPORT_SECURITY = -360,
    ERR_HTTP2_FLOW_CONTROL_ERROR = -361,
    ERR_HTTP2_FRAME_SIZE_ERROR = -362,
    ERR_HTTP2_COMPRESSION_ERROR = -363,
    ERR_PROXY_AUTH_REQUESTED_WITH_NO_CONNECTION = -364,
    ERR_HTTP_1_1_REQUIRED = -365,
    ERR_PROXY_HTTP_1_1_REQUIRED = -366,
    ERR_PAC_SCRIPT_TERMINATED = -367,
    ERR_INVALID_HTTP_RESPONSE = -370,
    ERR_CONTENT_DECODING_INIT_FAILED = -371,
    ERR_HTTP2_RST_STREAM_NO_ERROR_RECEIVED = -372,
    ERR_HTTP2_PUSHED_STREAM_NOT_AVAILABLE = -373,
    ERR_HTTP2_CLAIMED_PUSHED_STREAM_RESET_BY_SERVER = -374,
    ERR_TOO_MANY_RETRIES = -375,
    ERR_HTTP2_STREAM_CLOSED = -376,
    ERR_HTTP2_CLIENT_REFUSED_STREAM = -377,
    ERR_HTTP2_PUSHED_RESPONSE_DOES_NOT_MATCH = -378,
    ERR_HTTP_RESPONSE_CODE_FAILURE = -379,
    ERR_QUIC_CERT_ROOT_NOT_KNOWN = -380,
    ERR_QUIC_GOAWAY_REQUEST_CAN_BE_RETRIED = -381,
    ERR_TOO_MANY_ACCEPT_CH_RESTARTS = -382,
    ERR_CACHE_MISS = -400,
    ERR_CACHE_READ_FAILURE = -401,
    ERR_CACHE_WRITE_FAILURE = -402,
    ERR_CACHE_OPERATION_NOT_SUPPORTED = -403,
    ERR_CACHE_OPEN_FAILURE = -404,
    ERR_CACHE_CREATE_FAILURE = -405,
    ERR_CACHE_RACE = -406,
    ERR_CACHE_CHECKSUM_READ_FAILURE = -407,
    ERR_CACHE_CHECKSUM_MISMATCH = -408,
    ERR_CACHE_LOCK_TIMEOUT = -409,
    ERR_CACHE_AUTH_FAILURE_AFTER_READ = -410,
    ERR_CACHE_ENTRY_NOT_SUITABLE = -411,
    ERR_CACHE_DOOM_FAILURE = -412,
    ERR_CACHE_OPEN_OR_CREATE_FAILURE = -413,
    ERR_INSECURE_RESPONSE = -501,
    ERR_NO_PRIVATE_KEY_FOR_CERT = -502,
    ERR_ADD_USER_CERT_FAILED = -503,
    ERR_INVALID_SIGNED_EXCHANGE = -504,
    ERR_INVALID_WEB_BUNDLE = -505,
    ERR_TRUST_TOKEN_OPERATION_FAILED = -506,
    ERR_TRUST_TOKEN_OPERATION_SUCCESS_WITHOUT_SENDING_REQUEST = -507,
    ERR_FTP_FAILED = -601,
    ERR_FTP_SERVICE_UNAVAILABLE = -602,
    ERR_FTP_TRANSFER_ABORTED = -603,
    ERR_FTP_FILE_BUSY = -604,
    ERR_FTP_SYNTAX_ERROR = -605,
    ERR_FTP_COMMAND_NOT_SUPPORTED = -606,
    ERR_FTP_BAD_COMMAND_SEQUENCE = -607,
    ERR_PKCS12_IMPORT_BAD_PASSWORD = -701,
    ERR_PKCS12_IMPORT_FAILED = -702,
    ERR_IMPORT_CA_CERT_NOT_CA = -703,
    ERR_IMPORT_CERT_ALREADY_EXISTS = -704,
    ERR_IMPORT_CA_CERT_FAILED = -705,
    ERR_IMPORT_SERVER_CERT_FAILED = -706,
    ERR_PKCS12_IMPORT_INVALID_MAC = -707,
    ERR_PKCS12_IMPORT_INVALID_FILE = -708,
    ERR_PKCS12_IMPORT_UNSUPPORTED = -709,
    ERR_KEY_GENERATION_FAILED = -710,
    ERR_PRIVATE_KEY_EXPORT_FAILED = -712,
    ERR_SELF_SIGNED_CERT_GENERATION_FAILED = -713,
    ERR_CERT_DATABASE_CHANGED = -714,
    ERR_DNS_MALFORMED_RESPONSE = -800,
    ERR_DNS_SERVER_REQUIRES_TCP = -801,
    ERR_DNS_SERVER_FAILED = -802,
    ERR_DNS_TIMED_OUT = -803,
    ERR_DNS_CACHE_MISS = -804,
    ERR_DNS_SEARCH_EMPTY = -805,
    ERR_DNS_SORT_ERROR = -806,
    ERR_DNS_SECURE_RESOLVER_HOSTNAME_RESOLUTION_FAILED = -808,
    ERR_DNS_NAME_HTTPS_ONLY = -809,
    ERR_DNS_REQUEST_CANCELLED = -810,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_cert_status_t {
    CERT_STATUS_NONE = 0,
    CERT_STATUS_COMMON_NAME_INVALID = 1,
    CERT_STATUS_DATE_INVALID = 2,
    CERT_STATUS_AUTHORITY_INVALID = 4,
    CERT_STATUS_NO_REVOCATION_MECHANISM = 16,
    CERT_STATUS_UNABLE_TO_CHECK_REVOCATION = 32,
    CERT_STATUS_REVOKED = 64,
    CERT_STATUS_INVALID = 128,
    CERT_STATUS_WEAK_SIGNATURE_ALGORITHM = 256,
    CERT_STATUS_NON_UNIQUE_NAME = 1024,
    CERT_STATUS_WEAK_KEY = 2048,
    CERT_STATUS_PINNED_KEY_MISSING = 8192,
    CERT_STATUS_NAME_CONSTRAINT_VIOLATION = 16384,
    CERT_STATUS_VALIDITY_TOO_LONG = 32768,
    CERT_STATUS_IS_EV = 65536,
    CERT_STATUS_REV_CHECKING_ENABLED = 131072,
    CERT_STATUS_SHA1_SIGNATURE_PRESENT = 524288,
    CERT_STATUS_CT_COMPLIANCE_FAILED = 1048576,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_window_open_disposition_t {
    WOD_UNKNOWN = 0,
    WOD_CURRENT_TAB = 1,
    WOD_SINGLETON_TAB = 2,
    WOD_NEW_FOREGROUND_TAB = 3,
    WOD_NEW_BACKGROUND_TAB = 4,
    WOD_NEW_POPUP = 5,
    WOD_NEW_WINDOW = 6,
    WOD_SAVE_TO_DISK = 7,
    WOD_OFF_THE_RECORD = 8,
    WOD_IGNORE_ACTION = 9,
    WOD_SWITCH_TO_TAB = 10,
    WOD_NEW_PICTURE_IN_PICTURE = 11,
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_NONE: cef_drag_operations_mask_t = cef_drag_operations_mask_t(0);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_COPY: cef_drag_operations_mask_t = cef_drag_operations_mask_t(1);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_LINK: cef_drag_operations_mask_t = cef_drag_operations_mask_t(2);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_GENERIC: cef_drag_operations_mask_t = cef_drag_operations_mask_t(4);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_PRIVATE: cef_drag_operations_mask_t = cef_drag_operations_mask_t(8);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_MOVE: cef_drag_operations_mask_t = cef_drag_operations_mask_t(16);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_DELETE: cef_drag_operations_mask_t = cef_drag_operations_mask_t(32);
}
impl cef_drag_operations_mask_t {
    pub const DRAG_OPERATION_EVERY: cef_drag_operations_mask_t =
        cef_drag_operations_mask_t(4294967295);
}
impl ::std::ops::BitOr<cef_drag_operations_mask_t> for cef_drag_operations_mask_t {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        cef_drag_operations_mask_t(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for cef_drag_operations_mask_t {
    #[inline]
    fn bitor_assign(&mut self, rhs: cef_drag_operations_mask_t) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<cef_drag_operations_mask_t> for cef_drag_operations_mask_t {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        cef_drag_operations_mask_t(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for cef_drag_operations_mask_t {
    #[inline]
    fn bitand_assign(&mut self, rhs: cef_drag_operations_mask_t) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct cef_drag_operations_mask_t(pub ::std::os::raw::c_uint);
impl cef_text_input_mode_t {
    pub const CEF_TEXT_INPUT_MODE_MAX: cef_text_input_mode_t =
        cef_text_input_mode_t::CEF_TEXT_INPUT_MODE_SEARCH;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_text_input_mode_t {
    CEF_TEXT_INPUT_MODE_DEFAULT = 0,
    CEF_TEXT_INPUT_MODE_NONE = 1,
    CEF_TEXT_INPUT_MODE_TEXT = 2,
    CEF_TEXT_INPUT_MODE_TEL = 3,
    CEF_TEXT_INPUT_MODE_URL = 4,
    CEF_TEXT_INPUT_MODE_EMAIL = 5,
    CEF_TEXT_INPUT_MODE_NUMERIC = 6,
    CEF_TEXT_INPUT_MODE_DECIMAL = 7,
    CEF_TEXT_INPUT_MODE_SEARCH = 8,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_v8_accesscontrol_t {
    V8_ACCESS_CONTROL_DEFAULT = 0,
    V8_ACCESS_CONTROL_ALL_CAN_READ = 1,
    V8_ACCESS_CONTROL_ALL_CAN_WRITE = 2,
    V8_ACCESS_CONTROL_PROHIBITS_OVERWRITING = 4,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_v8_propertyattribute_t {
    V8_PROPERTY_ATTRIBUTE_NONE = 0,
    V8_PROPERTY_ATTRIBUTE_READONLY = 1,
    V8_PROPERTY_ATTRIBUTE_DONTENUM = 2,
    V8_PROPERTY_ATTRIBUTE_DONTDELETE = 4,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_postdataelement_type_t {
    PDE_TYPE_EMPTY = 0,
    PDE_TYPE_BYTES = 1,
    PDE_TYPE_FILE = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_resource_type_t {
    RT_MAIN_FRAME = 0,
    RT_SUB_FRAME = 1,
    RT_STYLESHEET = 2,
    RT_SCRIPT = 3,
    RT_IMAGE = 4,
    RT_FONT_RESOURCE = 5,
    RT_SUB_RESOURCE = 6,
    RT_OBJECT = 7,
    RT_MEDIA = 8,
    RT_WORKER = 9,
    RT_SHARED_WORKER = 10,
    RT_PREFETCH = 11,
    RT_FAVICON = 12,
    RT_XHR = 13,
    RT_PING = 14,
    RT_SERVICE_WORKER = 15,
    RT_CSP_REPORT = 16,
    RT_PLUGIN_RESOURCE = 17,
    RT_NAVIGATION_PRELOAD_MAIN_FRAME = 19,
    RT_NAVIGATION_PRELOAD_SUB_FRAME = 20,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_transition_type_t {
    TT_LINK = 0,
    TT_EXPLICIT = 1,
    TT_AUTO_BOOKMARK = 2,
    TT_AUTO_SUBFRAME = 3,
    TT_MANUAL_SUBFRAME = 4,
    TT_GENERATED = 5,
    TT_AUTO_TOPLEVEL = 6,
    TT_FORM_SUBMIT = 7,
    TT_RELOAD = 8,
    TT_KEYWORD = 9,
    TT_KEYWORD_GENERATED = 10,
    TT_SOURCE_MASK = 255,
    TT_BLOCKED_FLAG = 8388608,
    TT_FORWARD_BACK_FLAG = 16777216,
    TT_DIRECT_LOAD_FLAG = 33554432,
    TT_HOME_PAGE_FLAG = 67108864,
    TT_FROM_API_FLAG = 134217728,
    TT_CHAIN_START_FLAG = 268435456,
    TT_CHAIN_END_FLAG = 536870912,
    TT_CLIENT_REDIRECT_FLAG = 1073741824,
    TT_SERVER_REDIRECT_FLAG = 2147483648,
    TT_IS_REDIRECT_MASK = 3221225472,
    TT_QUALIFIER_MASK = 4294967040,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_urlrequest_flags_t {
    UR_FLAG_NONE = 0,
    UR_FLAG_SKIP_CACHE = 1,
    UR_FLAG_ONLY_FROM_CACHE = 2,
    UR_FLAG_DISABLE_CACHE = 4,
    UR_FLAG_ALLOW_STORED_CREDENTIALS = 8,
    UR_FLAG_REPORT_UPLOAD_PROGRESS = 16,
    UR_FLAG_NO_DOWNLOAD_DATA = 32,
    UR_FLAG_NO_RETRY_ON_5XX = 64,
    UR_FLAG_STOP_ON_REDIRECT = 128,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_urlrequest_status_t {
    UR_UNKNOWN = 0,
    UR_SUCCESS = 1,
    UR_IO_PENDING = 2,
    UR_CANCELED = 3,
    UR_FAILED = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_draggable_region_t {
    pub bounds: cef_rect_t,
    pub draggable: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_draggable_region_t"][::std::mem::size_of::<_cef_draggable_region_t>() - 20usize];
    ["Alignment of _cef_draggable_region_t"]
        [::std::mem::align_of::<_cef_draggable_region_t>() - 4usize];
    ["Offset of field: _cef_draggable_region_t::bounds"]
        [::std::mem::offset_of!(_cef_draggable_region_t, bounds) - 0usize];
    ["Offset of field: _cef_draggable_region_t::draggable"]
        [::std::mem::offset_of!(_cef_draggable_region_t, draggable) - 16usize];
};
pub type cef_draggable_region_t = _cef_draggable_region_t;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_process_id_t {
    PID_BROWSER = 0,
    PID_RENDERER = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_thread_id_t {
    TID_UI = 0,
    TID_FILE_BACKGROUND = 1,
    TID_FILE_USER_VISIBLE = 2,
    TID_FILE_USER_BLOCKING = 3,
    TID_PROCESS_LAUNCHER = 4,
    TID_IO = 5,
    TID_RENDERER = 6,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_thread_priority_t {
    TP_BACKGROUND = 0,
    TP_NORMAL = 1,
    TP_DISPLAY = 2,
    TP_REALTIME_AUDIO = 3,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_message_loop_type_t {
    ML_TYPE_DEFAULT = 0,
    ML_TYPE_UI = 1,
    ML_TYPE_IO = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_com_init_mode_t {
    COM_INIT_MODE_NONE = 0,
    COM_INIT_MODE_STA = 1,
    COM_INIT_MODE_MTA = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_value_type_t {
    VTYPE_INVALID = 0,
    VTYPE_NULL = 1,
    VTYPE_BOOL = 2,
    VTYPE_INT = 3,
    VTYPE_DOUBLE = 4,
    VTYPE_STRING = 5,
    VTYPE_BINARY = 6,
    VTYPE_DICTIONARY = 7,
    VTYPE_LIST = 8,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_jsdialog_type_t {
    JSDIALOGTYPE_ALERT = 0,
    JSDIALOGTYPE_CONFIRM = 1,
    JSDIALOGTYPE_PROMPT = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_screen_info_t {
    pub device_scale_factor: f32,
    pub depth: ::std::os::raw::c_int,
    pub depth_per_component: ::std::os::raw::c_int,
    pub is_monochrome: ::std::os::raw::c_int,
    pub rect: cef_rect_t,
    pub available_rect: cef_rect_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_screen_info_t"][::std::mem::size_of::<_cef_screen_info_t>() - 48usize];
    ["Alignment of _cef_screen_info_t"][::std::mem::align_of::<_cef_screen_info_t>() - 4usize];
    ["Offset of field: _cef_screen_info_t::device_scale_factor"]
        [::std::mem::offset_of!(_cef_screen_info_t, device_scale_factor) - 0usize];
    ["Offset of field: _cef_screen_info_t::depth"]
        [::std::mem::offset_of!(_cef_screen_info_t, depth) - 4usize];
    ["Offset of field: _cef_screen_info_t::depth_per_component"]
        [::std::mem::offset_of!(_cef_screen_info_t, depth_per_component) - 8usize];
    ["Offset of field: _cef_screen_info_t::is_monochrome"]
        [::std::mem::offset_of!(_cef_screen_info_t, is_monochrome) - 12usize];
    ["Offset of field: _cef_screen_info_t::rect"]
        [::std::mem::offset_of!(_cef_screen_info_t, rect) - 16usize];
    ["Offset of field: _cef_screen_info_t::available_rect"]
        [::std::mem::offset_of!(_cef_screen_info_t, available_rect) - 32usize];
};
pub type cef_screen_info_t = _cef_screen_info_t;
impl cef_menu_id_t {
    pub const MENU_ID_SPELLCHECK_SUGGESTION_LAST: cef_menu_id_t =
        cef_menu_id_t::MENU_ID_SPELLCHECK_SUGGESTION_4;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_menu_id_t {
    MENU_ID_BACK = 100,
    MENU_ID_FORWARD = 101,
    MENU_ID_RELOAD = 102,
    MENU_ID_RELOAD_NOCACHE = 103,
    MENU_ID_STOPLOAD = 104,
    MENU_ID_UNDO = 110,
    MENU_ID_REDO = 111,
    MENU_ID_CUT = 112,
    MENU_ID_COPY = 113,
    MENU_ID_PASTE = 114,
    MENU_ID_DELETE = 115,
    MENU_ID_SELECT_ALL = 116,
    MENU_ID_FIND = 130,
    MENU_ID_PRINT = 131,
    MENU_ID_VIEW_SOURCE = 132,
    MENU_ID_SPELLCHECK_SUGGESTION_0 = 200,
    MENU_ID_SPELLCHECK_SUGGESTION_1 = 201,
    MENU_ID_SPELLCHECK_SUGGESTION_2 = 202,
    MENU_ID_SPELLCHECK_SUGGESTION_3 = 203,
    MENU_ID_SPELLCHECK_SUGGESTION_4 = 204,
    MENU_ID_NO_SPELLING_SUGGESTIONS = 205,
    MENU_ID_ADD_TO_DICTIONARY = 206,
    MENU_ID_CUSTOM_FIRST = 220,
    MENU_ID_CUSTOM_LAST = 250,
    MENU_ID_USER_FIRST = 26500,
    MENU_ID_USER_LAST = 28500,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_mouse_button_type_t {
    MBT_LEFT = 0,
    MBT_MIDDLE = 1,
    MBT_RIGHT = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_mouse_event_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub modifiers: uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_mouse_event_t"][::std::mem::size_of::<_cef_mouse_event_t>() - 12usize];
    ["Alignment of _cef_mouse_event_t"][::std::mem::align_of::<_cef_mouse_event_t>() - 4usize];
    ["Offset of field: _cef_mouse_event_t::x"]
        [::std::mem::offset_of!(_cef_mouse_event_t, x) - 0usize];
    ["Offset of field: _cef_mouse_event_t::y"]
        [::std::mem::offset_of!(_cef_mouse_event_t, y) - 4usize];
    ["Offset of field: _cef_mouse_event_t::modifiers"]
        [::std::mem::offset_of!(_cef_mouse_event_t, modifiers) - 8usize];
};
pub type cef_mouse_event_t = _cef_mouse_event_t;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_touch_event_type_t {
    CEF_TET_RELEASED = 0,
    CEF_TET_PRESSED = 1,
    CEF_TET_MOVED = 2,
    CEF_TET_CANCELLED = 3,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_pointer_type_t {
    CEF_POINTER_TYPE_TOUCH = 0,
    CEF_POINTER_TYPE_MOUSE = 1,
    CEF_POINTER_TYPE_PEN = 2,
    CEF_POINTER_TYPE_ERASER = 3,
    CEF_POINTER_TYPE_UNKNOWN = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_touch_event_t {
    pub id: ::std::os::raw::c_int,
    pub x: f32,
    pub y: f32,
    pub radius_x: f32,
    pub radius_y: f32,
    pub rotation_angle: f32,
    pub pressure: f32,
    pub type_: cef_touch_event_type_t,
    pub modifiers: uint32,
    pub pointer_type: cef_pointer_type_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_touch_event_t"][::std::mem::size_of::<_cef_touch_event_t>() - 40usize];
    ["Alignment of _cef_touch_event_t"][::std::mem::align_of::<_cef_touch_event_t>() - 4usize];
    ["Offset of field: _cef_touch_event_t::id"]
        [::std::mem::offset_of!(_cef_touch_event_t, id) - 0usize];
    ["Offset of field: _cef_touch_event_t::x"]
        [::std::mem::offset_of!(_cef_touch_event_t, x) - 4usize];
    ["Offset of field: _cef_touch_event_t::y"]
        [::std::mem::offset_of!(_cef_touch_event_t, y) - 8usize];
    ["Offset of field: _cef_touch_event_t::radius_x"]
        [::std::mem::offset_of!(_cef_touch_event_t, radius_x) - 12usize];
    ["Offset of field: _cef_touch_event_t::radius_y"]
        [::std::mem::offset_of!(_cef_touch_event_t, radius_y) - 16usize];
    ["Offset of field: _cef_touch_event_t::rotation_angle"]
        [::std::mem::offset_of!(_cef_touch_event_t, rotation_angle) - 20usize];
    ["Offset of field: _cef_touch_event_t::pressure"]
        [::std::mem::offset_of!(_cef_touch_event_t, pressure) - 24usize];
    ["Offset of field: _cef_touch_event_t::type_"]
        [::std::mem::offset_of!(_cef_touch_event_t, type_) - 28usize];
    ["Offset of field: _cef_touch_event_t::modifiers"]
        [::std::mem::offset_of!(_cef_touch_event_t, modifiers) - 32usize];
    ["Offset of field: _cef_touch_event_t::pointer_type"]
        [::std::mem::offset_of!(_cef_touch_event_t, pointer_type) - 36usize];
};
pub type cef_touch_event_t = _cef_touch_event_t;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_paint_element_type_t {
    PET_VIEW = 0,
    PET_POPUP = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_event_flags_t {
    EVENTFLAG_NONE = 0,
    EVENTFLAG_CAPS_LOCK_ON = 1,
    EVENTFLAG_SHIFT_DOWN = 2,
    EVENTFLAG_CONTROL_DOWN = 4,
    EVENTFLAG_ALT_DOWN = 8,
    EVENTFLAG_LEFT_MOUSE_BUTTON = 16,
    EVENTFLAG_MIDDLE_MOUSE_BUTTON = 32,
    EVENTFLAG_RIGHT_MOUSE_BUTTON = 64,
    EVENTFLAG_COMMAND_DOWN = 128,
    EVENTFLAG_NUM_LOCK_ON = 256,
    EVENTFLAG_IS_KEY_PAD = 512,
    EVENTFLAG_IS_LEFT = 1024,
    EVENTFLAG_IS_RIGHT = 2048,
    EVENTFLAG_ALTGR_DOWN = 4096,
    EVENTFLAG_IS_REPEAT = 8192,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_menu_item_type_t {
    MENUITEMTYPE_NONE = 0,
    MENUITEMTYPE_COMMAND = 1,
    MENUITEMTYPE_CHECK = 2,
    MENUITEMTYPE_RADIO = 3,
    MENUITEMTYPE_SEPARATOR = 4,
    MENUITEMTYPE_SUBMENU = 5,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_context_menu_type_flags_t {
    CM_TYPEFLAG_NONE = 0,
    CM_TYPEFLAG_PAGE = 1,
    CM_TYPEFLAG_FRAME = 2,
    CM_TYPEFLAG_LINK = 4,
    CM_TYPEFLAG_MEDIA = 8,
    CM_TYPEFLAG_SELECTION = 16,
    CM_TYPEFLAG_EDITABLE = 32,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_context_menu_media_type_t {
    CM_MEDIATYPE_NONE = 0,
    CM_MEDIATYPE_IMAGE = 1,
    CM_MEDIATYPE_VIDEO = 2,
    CM_MEDIATYPE_AUDIO = 3,
    CM_MEDIATYPE_CANVAS = 4,
    CM_MEDIATYPE_FILE = 5,
    CM_MEDIATYPE_PLUGIN = 6,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_context_menu_media_state_flags_t {
    CM_MEDIAFLAG_NONE = 0,
    CM_MEDIAFLAG_IN_ERROR = 1,
    CM_MEDIAFLAG_PAUSED = 2,
    CM_MEDIAFLAG_MUTED = 4,
    CM_MEDIAFLAG_LOOP = 8,
    CM_MEDIAFLAG_CAN_SAVE = 16,
    CM_MEDIAFLAG_HAS_AUDIO = 32,
    CM_MEDIAFLAG_CAN_TOGGLE_CONTROLS = 64,
    CM_MEDIAFLAG_CONTROLS = 128,
    CM_MEDIAFLAG_CAN_PRINT = 256,
    CM_MEDIAFLAG_CAN_ROTATE = 512,
    CM_MEDIAFLAG_CAN_PICTURE_IN_PICTURE = 1024,
    CM_MEDIAFLAG_PICTURE_IN_PICTURE = 2048,
    CM_MEDIAFLAG_CAN_LOOP = 4096,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_context_menu_edit_state_flags_t {
    CM_EDITFLAG_NONE = 0,
    CM_EDITFLAG_CAN_UNDO = 1,
    CM_EDITFLAG_CAN_REDO = 2,
    CM_EDITFLAG_CAN_CUT = 4,
    CM_EDITFLAG_CAN_COPY = 8,
    CM_EDITFLAG_CAN_PASTE = 16,
    CM_EDITFLAG_CAN_DELETE = 32,
    CM_EDITFLAG_CAN_SELECT_ALL = 64,
    CM_EDITFLAG_CAN_TRANSLATE = 128,
    CM_EDITFLAG_CAN_EDIT_RICHLY = 256,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_key_event_type_t {
    KEYEVENT_RAWKEYDOWN = 0,
    KEYEVENT_KEYDOWN = 1,
    KEYEVENT_KEYUP = 2,
    KEYEVENT_CHAR = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_key_event_t {
    pub type_: cef_key_event_type_t,
    pub modifiers: uint32,
    pub windows_key_code: ::std::os::raw::c_int,
    pub native_key_code: ::std::os::raw::c_int,
    pub is_system_key: ::std::os::raw::c_int,
    pub character: char16,
    pub unmodified_character: char16,
    pub focus_on_editable_field: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_key_event_t"][::std::mem::size_of::<_cef_key_event_t>() - 28usize];
    ["Alignment of _cef_key_event_t"][::std::mem::align_of::<_cef_key_event_t>() - 4usize];
    ["Offset of field: _cef_key_event_t::type_"]
        [::std::mem::offset_of!(_cef_key_event_t, type_) - 0usize];
    ["Offset of field: _cef_key_event_t::modifiers"]
        [::std::mem::offset_of!(_cef_key_event_t, modifiers) - 4usize];
    ["Offset of field: _cef_key_event_t::windows_key_code"]
        [::std::mem::offset_of!(_cef_key_event_t, windows_key_code) - 8usize];
    ["Offset of field: _cef_key_event_t::native_key_code"]
        [::std::mem::offset_of!(_cef_key_event_t, native_key_code) - 12usize];
    ["Offset of field: _cef_key_event_t::is_system_key"]
        [::std::mem::offset_of!(_cef_key_event_t, is_system_key) - 16usize];
    ["Offset of field: _cef_key_event_t::character"]
        [::std::mem::offset_of!(_cef_key_event_t, character) - 20usize];
    ["Offset of field: _cef_key_event_t::unmodified_character"]
        [::std::mem::offset_of!(_cef_key_event_t, unmodified_character) - 22usize];
    ["Offset of field: _cef_key_event_t::focus_on_editable_field"]
        [::std::mem::offset_of!(_cef_key_event_t, focus_on_editable_field) - 24usize];
};
pub type cef_key_event_t = _cef_key_event_t;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_focus_source_t {
    FOCUS_SOURCE_NAVIGATION = 0,
    FOCUS_SOURCE_SYSTEM = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_navigation_type_t {
    NAVIGATION_LINK_CLICKED = 0,
    NAVIGATION_FORM_SUBMITTED = 1,
    NAVIGATION_BACK_FORWARD = 2,
    NAVIGATION_RELOAD = 3,
    NAVIGATION_FORM_RESUBMITTED = 4,
    NAVIGATION_OTHER = 5,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_xml_encoding_type_t {
    XML_ENCODING_NONE = 0,
    XML_ENCODING_UTF8 = 1,
    XML_ENCODING_UTF16LE = 2,
    XML_ENCODING_UTF16BE = 3,
    XML_ENCODING_ASCII = 4,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_xml_node_type_t {
    XML_NODE_UNSUPPORTED = 0,
    XML_NODE_PROCESSING_INSTRUCTION = 1,
    XML_NODE_DOCUMENT_TYPE = 2,
    XML_NODE_ELEMENT_START = 3,
    XML_NODE_ELEMENT_END = 4,
    XML_NODE_ATTRIBUTE = 5,
    XML_NODE_TEXT = 6,
    XML_NODE_CDATA = 7,
    XML_NODE_ENTITY_REFERENCE = 8,
    XML_NODE_WHITESPACE = 9,
    XML_NODE_COMMENT = 10,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_popup_features_t {
    pub x: ::std::os::raw::c_int,
    pub xSet: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub ySet: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub widthSet: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub heightSet: ::std::os::raw::c_int,
    pub menuBarVisible: ::std::os::raw::c_int,
    pub statusBarVisible: ::std::os::raw::c_int,
    pub toolBarVisible: ::std::os::raw::c_int,
    pub scrollbarsVisible: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_popup_features_t"][::std::mem::size_of::<_cef_popup_features_t>() - 48usize];
    ["Alignment of _cef_popup_features_t"]
        [::std::mem::align_of::<_cef_popup_features_t>() - 4usize];
    ["Offset of field: _cef_popup_features_t::x"]
        [::std::mem::offset_of!(_cef_popup_features_t, x) - 0usize];
    ["Offset of field: _cef_popup_features_t::xSet"]
        [::std::mem::offset_of!(_cef_popup_features_t, xSet) - 4usize];
    ["Offset of field: _cef_popup_features_t::y"]
        [::std::mem::offset_of!(_cef_popup_features_t, y) - 8usize];
    ["Offset of field: _cef_popup_features_t::ySet"]
        [::std::mem::offset_of!(_cef_popup_features_t, ySet) - 12usize];
    ["Offset of field: _cef_popup_features_t::width"]
        [::std::mem::offset_of!(_cef_popup_features_t, width) - 16usize];
    ["Offset of field: _cef_popup_features_t::widthSet"]
        [::std::mem::offset_of!(_cef_popup_features_t, widthSet) - 20usize];
    ["Offset of field: _cef_popup_features_t::height"]
        [::std::mem::offset_of!(_cef_popup_features_t, height) - 24usize];
    ["Offset of field: _cef_popup_features_t::heightSet"]
        [::std::mem::offset_of!(_cef_popup_features_t, heightSet) - 28usize];
    ["Offset of field: _cef_popup_features_t::menuBarVisible"]
        [::std::mem::offset_of!(_cef_popup_features_t, menuBarVisible) - 32usize];
    ["Offset of field: _cef_popup_features_t::statusBarVisible"]
        [::std::mem::offset_of!(_cef_popup_features_t, statusBarVisible) - 36usize];
    ["Offset of field: _cef_popup_features_t::toolBarVisible"]
        [::std::mem::offset_of!(_cef_popup_features_t, toolBarVisible) - 40usize];
    ["Offset of field: _cef_popup_features_t::scrollbarsVisible"]
        [::std::mem::offset_of!(_cef_popup_features_t, scrollbarsVisible) - 44usize];
};
pub type cef_popup_features_t = _cef_popup_features_t;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_dom_document_type_t {
    DOM_DOCUMENT_TYPE_UNKNOWN = 0,
    DOM_DOCUMENT_TYPE_HTML = 1,
    DOM_DOCUMENT_TYPE_XHTML = 2,
    DOM_DOCUMENT_TYPE_PLUGIN = 3,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_dom_event_category_t {
    DOM_EVENT_CATEGORY_UNKNOWN = 0,
    DOM_EVENT_CATEGORY_UI = 1,
    DOM_EVENT_CATEGORY_MOUSE = 2,
    DOM_EVENT_CATEGORY_MUTATION = 4,
    DOM_EVENT_CATEGORY_KEYBOARD = 8,
    DOM_EVENT_CATEGORY_TEXT = 16,
    DOM_EVENT_CATEGORY_COMPOSITION = 32,
    DOM_EVENT_CATEGORY_DRAG = 64,
    DOM_EVENT_CATEGORY_CLIPBOARD = 128,
    DOM_EVENT_CATEGORY_MESSAGE = 256,
    DOM_EVENT_CATEGORY_WHEEL = 512,
    DOM_EVENT_CATEGORY_BEFORE_TEXT_INSERTED = 1024,
    DOM_EVENT_CATEGORY_OVERFLOW = 2048,
    DOM_EVENT_CATEGORY_PAGE_TRANSITION = 4096,
    DOM_EVENT_CATEGORY_POPSTATE = 8192,
    DOM_EVENT_CATEGORY_PROGRESS = 16384,
    DOM_EVENT_CATEGORY_XMLHTTPREQUEST_PROGRESS = 32768,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_dom_event_phase_t {
    DOM_EVENT_PHASE_UNKNOWN = 0,
    DOM_EVENT_PHASE_CAPTURING = 1,
    DOM_EVENT_PHASE_AT_TARGET = 2,
    DOM_EVENT_PHASE_BUBBLING = 3,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_dom_node_type_t {
    DOM_NODE_TYPE_UNSUPPORTED = 0,
    DOM_NODE_TYPE_ELEMENT = 1,
    DOM_NODE_TYPE_ATTRIBUTE = 2,
    DOM_NODE_TYPE_TEXT = 3,
    DOM_NODE_TYPE_CDATA_SECTION = 4,
    DOM_NODE_TYPE_PROCESSING_INSTRUCTIONS = 5,
    DOM_NODE_TYPE_COMMENT = 6,
    DOM_NODE_TYPE_DOCUMENT = 7,
    DOM_NODE_TYPE_DOCUMENT_TYPE = 8,
    DOM_NODE_TYPE_DOCUMENT_FRAGMENT = 9,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_file_dialog_mode_t {
    FILE_DIALOG_OPEN = 0,
    FILE_DIALOG_OPEN_MULTIPLE = 1,
    FILE_DIALOG_OPEN_FOLDER = 2,
    FILE_DIALOG_SAVE = 3,
    FILE_DIALOG_TYPE_MASK = 255,
    FILE_DIALOG_OVERWRITEPROMPT_FLAG = 16777216,
    FILE_DIALOG_HIDEREADONLY_FLAG = 33554432,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_color_model_t {
    COLOR_MODEL_UNKNOWN = 0,
    COLOR_MODEL_GRAY = 1,
    COLOR_MODEL_COLOR = 2,
    COLOR_MODEL_CMYK = 3,
    COLOR_MODEL_CMY = 4,
    COLOR_MODEL_KCMY = 5,
    COLOR_MODEL_CMY_K = 6,
    COLOR_MODEL_BLACK = 7,
    COLOR_MODEL_GRAYSCALE = 8,
    COLOR_MODEL_RGB = 9,
    COLOR_MODEL_RGB16 = 10,
    COLOR_MODEL_RGBA = 11,
    COLOR_MODEL_COLORMODE_COLOR = 12,
    COLOR_MODEL_COLORMODE_MONOCHROME = 13,
    COLOR_MODEL_HP_COLOR_COLOR = 14,
    COLOR_MODEL_HP_COLOR_BLACK = 15,
    COLOR_MODEL_PRINTOUTMODE_NORMAL = 16,
    COLOR_MODEL_PRINTOUTMODE_NORMAL_GRAY = 17,
    COLOR_MODEL_PROCESSCOLORMODEL_CMYK = 18,
    COLOR_MODEL_PROCESSCOLORMODEL_GREYSCALE = 19,
    COLOR_MODEL_PROCESSCOLORMODEL_RGB = 20,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_duplex_mode_t {
    DUPLEX_MODE_UNKNOWN = -1,
    DUPLEX_MODE_SIMPLEX = 0,
    DUPLEX_MODE_LONG_EDGE = 1,
    DUPLEX_MODE_SHORT_EDGE = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_cursor_type_t {
    CT_POINTER = 0,
    CT_CROSS = 1,
    CT_HAND = 2,
    CT_IBEAM = 3,
    CT_WAIT = 4,
    CT_HELP = 5,
    CT_EASTRESIZE = 6,
    CT_NORTHRESIZE = 7,
    CT_NORTHEASTRESIZE = 8,
    CT_NORTHWESTRESIZE = 9,
    CT_SOUTHRESIZE = 10,
    CT_SOUTHEASTRESIZE = 11,
    CT_SOUTHWESTRESIZE = 12,
    CT_WESTRESIZE = 13,
    CT_NORTHSOUTHRESIZE = 14,
    CT_EASTWESTRESIZE = 15,
    CT_NORTHEASTSOUTHWESTRESIZE = 16,
    CT_NORTHWESTSOUTHEASTRESIZE = 17,
    CT_COLUMNRESIZE = 18,
    CT_ROWRESIZE = 19,
    CT_MIDDLEPANNING = 20,
    CT_EASTPANNING = 21,
    CT_NORTHPANNING = 22,
    CT_NORTHEASTPANNING = 23,
    CT_NORTHWESTPANNING = 24,
    CT_SOUTHPANNING = 25,
    CT_SOUTHEASTPANNING = 26,
    CT_SOUTHWESTPANNING = 27,
    CT_WESTPANNING = 28,
    CT_MOVE = 29,
    CT_VERTICALTEXT = 30,
    CT_CELL = 31,
    CT_CONTEXTMENU = 32,
    CT_ALIAS = 33,
    CT_PROGRESS = 34,
    CT_NODROP = 35,
    CT_COPY = 36,
    CT_NONE = 37,
    CT_NOTALLOWED = 38,
    CT_ZOOMIN = 39,
    CT_ZOOMOUT = 40,
    CT_GRAB = 41,
    CT_GRABBING = 42,
    CT_MIDDLE_PANNING_VERTICAL = 43,
    CT_MIDDLE_PANNING_HORIZONTAL = 44,
    CT_CUSTOM = 45,
    CT_DND_NONE = 46,
    CT_DND_MOVE = 47,
    CT_DND_COPY = 48,
    CT_DND_LINK = 49,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cursor_info_t {
    pub hotspot: cef_point_t,
    pub image_scale_factor: f32,
    pub buffer: *mut ::std::os::raw::c_void,
    pub size: cef_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_cursor_info_t"][::std::mem::size_of::<_cef_cursor_info_t>() - 24usize];
    ["Alignment of _cef_cursor_info_t"][::std::mem::align_of::<_cef_cursor_info_t>() - 4usize];
    ["Offset of field: _cef_cursor_info_t::hotspot"]
        [::std::mem::offset_of!(_cef_cursor_info_t, hotspot) - 0usize];
    ["Offset of field: _cef_cursor_info_t::image_scale_factor"]
        [::std::mem::offset_of!(_cef_cursor_info_t, image_scale_factor) - 8usize];
    ["Offset of field: _cef_cursor_info_t::buffer"]
        [::std::mem::offset_of!(_cef_cursor_info_t, buffer) - 12usize];
    ["Offset of field: _cef_cursor_info_t::size"]
        [::std::mem::offset_of!(_cef_cursor_info_t, size) - 16usize];
};
pub type cef_cursor_info_t = _cef_cursor_info_t;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_uri_unescape_rule_t {
    UU_NONE = 0,
    UU_NORMAL = 1,
    UU_SPACES = 2,
    UU_PATH_SEPARATORS = 4,
    UU_URL_SPECIAL_CHARS_EXCEPT_PATH_SEPARATORS = 8,
    UU_REPLACE_PLUS_WITH_SPACE = 16,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_json_parser_options_t {
    JSON_PARSER_RFC = 0,
    JSON_PARSER_ALLOW_TRAILING_COMMAS = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_json_writer_options_t {
    JSON_WRITER_DEFAULT = 0,
    JSON_WRITER_OMIT_BINARY_VALUES = 1,
    JSON_WRITER_OMIT_DOUBLE_TYPE_PRESERVATION = 2,
    JSON_WRITER_PRETTY_PRINT = 4,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_pdf_print_margin_type_t {
    PDF_PRINT_MARGIN_DEFAULT = 0,
    PDF_PRINT_MARGIN_NONE = 1,
    PDF_PRINT_MARGIN_MINIMUM = 2,
    PDF_PRINT_MARGIN_CUSTOM = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_pdf_print_settings_t {
    pub header_footer_title: cef_string_t,
    pub header_footer_url: cef_string_t,
    pub page_width: ::std::os::raw::c_int,
    pub page_height: ::std::os::raw::c_int,
    pub scale_factor: ::std::os::raw::c_int,
    pub margin_top: ::std::os::raw::c_int,
    pub margin_right: ::std::os::raw::c_int,
    pub margin_bottom: ::std::os::raw::c_int,
    pub margin_left: ::std::os::raw::c_int,
    pub margin_type: cef_pdf_print_margin_type_t,
    pub header_footer_enabled: ::std::os::raw::c_int,
    pub selection_only: ::std::os::raw::c_int,
    pub landscape: ::std::os::raw::c_int,
    pub backgrounds_enabled: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_pdf_print_settings_t"]
        [::std::mem::size_of::<_cef_pdf_print_settings_t>() - 72usize];
    ["Alignment of _cef_pdf_print_settings_t"]
        [::std::mem::align_of::<_cef_pdf_print_settings_t>() - 4usize];
    ["Offset of field: _cef_pdf_print_settings_t::header_footer_title"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, header_footer_title) - 0usize];
    ["Offset of field: _cef_pdf_print_settings_t::header_footer_url"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, header_footer_url) - 12usize];
    ["Offset of field: _cef_pdf_print_settings_t::page_width"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, page_width) - 24usize];
    ["Offset of field: _cef_pdf_print_settings_t::page_height"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, page_height) - 28usize];
    ["Offset of field: _cef_pdf_print_settings_t::scale_factor"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, scale_factor) - 32usize];
    ["Offset of field: _cef_pdf_print_settings_t::margin_top"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, margin_top) - 36usize];
    ["Offset of field: _cef_pdf_print_settings_t::margin_right"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, margin_right) - 40usize];
    ["Offset of field: _cef_pdf_print_settings_t::margin_bottom"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, margin_bottom) - 44usize];
    ["Offset of field: _cef_pdf_print_settings_t::margin_left"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, margin_left) - 48usize];
    ["Offset of field: _cef_pdf_print_settings_t::margin_type"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, margin_type) - 52usize];
    ["Offset of field: _cef_pdf_print_settings_t::header_footer_enabled"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, header_footer_enabled) - 56usize];
    ["Offset of field: _cef_pdf_print_settings_t::selection_only"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, selection_only) - 60usize];
    ["Offset of field: _cef_pdf_print_settings_t::landscape"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, landscape) - 64usize];
    ["Offset of field: _cef_pdf_print_settings_t::backgrounds_enabled"]
        [::std::mem::offset_of!(_cef_pdf_print_settings_t, backgrounds_enabled) - 68usize];
};
pub type cef_pdf_print_settings_t = _cef_pdf_print_settings_t;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_scale_factor_t {
    SCALE_FACTOR_NONE = 0,
    SCALE_FACTOR_100P = 1,
    SCALE_FACTOR_125P = 2,
    SCALE_FACTOR_133P = 3,
    SCALE_FACTOR_140P = 4,
    SCALE_FACTOR_150P = 5,
    SCALE_FACTOR_180P = 6,
    SCALE_FACTOR_200P = 7,
    SCALE_FACTOR_250P = 8,
    SCALE_FACTOR_300P = 9,
}
impl cef_referrer_policy_t {
    pub const REFERRER_POLICY_DEFAULT: cef_referrer_policy_t =
        cef_referrer_policy_t::REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE;
}
impl cef_referrer_policy_t {
    pub const REFERRER_POLICY_LAST_VALUE: cef_referrer_policy_t =
        cef_referrer_policy_t::REFERRER_POLICY_NO_REFERRER;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_referrer_policy_t {
    REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_FROM_SECURE_TO_INSECURE = 0,
    REFERRER_POLICY_REDUCE_REFERRER_GRANULARITY_ON_TRANSITION_CROSS_ORIGIN = 1,
    REFERRER_POLICY_ORIGIN_ONLY_ON_TRANSITION_CROSS_ORIGIN = 2,
    REFERRER_POLICY_NEVER_CLEAR_REFERRER = 3,
    REFERRER_POLICY_ORIGIN = 4,
    REFERRER_POLICY_CLEAR_REFERRER_ON_TRANSITION_CROSS_ORIGIN = 5,
    REFERRER_POLICY_ORIGIN_CLEAR_ON_TRANSITION_FROM_SECURE_TO_INSECURE = 6,
    REFERRER_POLICY_NO_REFERRER = 7,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_response_filter_status_t {
    RESPONSE_FILTER_NEED_MORE_DATA = 0,
    RESPONSE_FILTER_DONE = 1,
    RESPONSE_FILTER_ERROR = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_color_type_t {
    CEF_COLOR_TYPE_RGBA_8888 = 0,
    CEF_COLOR_TYPE_BGRA_8888 = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_alpha_type_t {
    CEF_ALPHA_TYPE_OPAQUE = 0,
    CEF_ALPHA_TYPE_PREMULTIPLIED = 1,
    CEF_ALPHA_TYPE_POSTMULTIPLIED = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_text_style_t {
    CEF_TEXT_STYLE_BOLD = 0,
    CEF_TEXT_STYLE_ITALIC = 1,
    CEF_TEXT_STYLE_STRIKE = 2,
    CEF_TEXT_STYLE_DIAGONAL_STRIKE = 3,
    CEF_TEXT_STYLE_UNDERLINE = 4,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_main_axis_alignment_t {
    CEF_MAIN_AXIS_ALIGNMENT_START = 0,
    CEF_MAIN_AXIS_ALIGNMENT_CENTER = 1,
    CEF_MAIN_AXIS_ALIGNMENT_END = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_cross_axis_alignment_t {
    CEF_CROSS_AXIS_ALIGNMENT_STRETCH = 0,
    CEF_CROSS_AXIS_ALIGNMENT_START = 1,
    CEF_CROSS_AXIS_ALIGNMENT_CENTER = 2,
    CEF_CROSS_AXIS_ALIGNMENT_END = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_box_layout_settings_t {
    pub horizontal: ::std::os::raw::c_int,
    pub inside_border_horizontal_spacing: ::std::os::raw::c_int,
    pub inside_border_vertical_spacing: ::std::os::raw::c_int,
    pub inside_border_insets: cef_insets_t,
    pub between_child_spacing: ::std::os::raw::c_int,
    pub main_axis_alignment: cef_main_axis_alignment_t,
    pub cross_axis_alignment: cef_cross_axis_alignment_t,
    pub minimum_cross_axis_size: ::std::os::raw::c_int,
    pub default_flex: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_box_layout_settings_t"]
        [::std::mem::size_of::<_cef_box_layout_settings_t>() - 48usize];
    ["Alignment of _cef_box_layout_settings_t"]
        [::std::mem::align_of::<_cef_box_layout_settings_t>() - 4usize];
    ["Offset of field: _cef_box_layout_settings_t::horizontal"]
        [::std::mem::offset_of!(_cef_box_layout_settings_t, horizontal) - 0usize];
    ["Offset of field: _cef_box_layout_settings_t::inside_border_horizontal_spacing"][::std::mem::offset_of!(
        _cef_box_layout_settings_t,
        inside_border_horizontal_spacing
    ) - 4usize];
    ["Offset of field: _cef_box_layout_settings_t::inside_border_vertical_spacing"][::std::mem::offset_of!(
        _cef_box_layout_settings_t,
        inside_border_vertical_spacing
    ) - 8usize];
    ["Offset of field: _cef_box_layout_settings_t::inside_border_insets"]
        [::std::mem::offset_of!(_cef_box_layout_settings_t, inside_border_insets) - 12usize];
    ["Offset of field: _cef_box_layout_settings_t::between_child_spacing"]
        [::std::mem::offset_of!(_cef_box_layout_settings_t, between_child_spacing) - 28usize];
    ["Offset of field: _cef_box_layout_settings_t::main_axis_alignment"]
        [::std::mem::offset_of!(_cef_box_layout_settings_t, main_axis_alignment) - 32usize];
    ["Offset of field: _cef_box_layout_settings_t::cross_axis_alignment"]
        [::std::mem::offset_of!(_cef_box_layout_settings_t, cross_axis_alignment) - 36usize];
    ["Offset of field: _cef_box_layout_settings_t::minimum_cross_axis_size"]
        [::std::mem::offset_of!(_cef_box_layout_settings_t, minimum_cross_axis_size) - 40usize];
    ["Offset of field: _cef_box_layout_settings_t::default_flex"]
        [::std::mem::offset_of!(_cef_box_layout_settings_t, default_flex) - 44usize];
};
pub type cef_box_layout_settings_t = _cef_box_layout_settings_t;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_button_state_t {
    CEF_BUTTON_STATE_NORMAL = 0,
    CEF_BUTTON_STATE_HOVERED = 1,
    CEF_BUTTON_STATE_PRESSED = 2,
    CEF_BUTTON_STATE_DISABLED = 3,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_horizontal_alignment_t {
    CEF_HORIZONTAL_ALIGNMENT_LEFT = 0,
    CEF_HORIZONTAL_ALIGNMENT_CENTER = 1,
    CEF_HORIZONTAL_ALIGNMENT_RIGHT = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_menu_anchor_position_t {
    CEF_MENU_ANCHOR_TOPLEFT = 0,
    CEF_MENU_ANCHOR_TOPRIGHT = 1,
    CEF_MENU_ANCHOR_BOTTOMCENTER = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_menu_color_type_t {
    CEF_MENU_COLOR_TEXT = 0,
    CEF_MENU_COLOR_TEXT_HOVERED = 1,
    CEF_MENU_COLOR_TEXT_ACCELERATOR = 2,
    CEF_MENU_COLOR_TEXT_ACCELERATOR_HOVERED = 3,
    CEF_MENU_COLOR_BACKGROUND = 4,
    CEF_MENU_COLOR_BACKGROUND_HOVERED = 5,
    CEF_MENU_COLOR_COUNT = 6,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_ssl_version_t {
    SSL_CONNECTION_VERSION_UNKNOWN = 0,
    SSL_CONNECTION_VERSION_SSL2 = 1,
    SSL_CONNECTION_VERSION_SSL3 = 2,
    SSL_CONNECTION_VERSION_TLS1 = 3,
    SSL_CONNECTION_VERSION_TLS1_1 = 4,
    SSL_CONNECTION_VERSION_TLS1_2 = 5,
    SSL_CONNECTION_VERSION_TLS1_3 = 6,
    SSL_CONNECTION_VERSION_QUIC = 7,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_ssl_content_status_t {
    SSL_CONTENT_NORMAL_CONTENT = 0,
    SSL_CONTENT_DISPLAYED_INSECURE_CONTENT = 1,
    SSL_CONTENT_RAN_INSECURE_CONTENT = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_scheme_options_t {
    CEF_SCHEME_OPTION_NONE = 0,
    CEF_SCHEME_OPTION_STANDARD = 1,
    CEF_SCHEME_OPTION_LOCAL = 2,
    CEF_SCHEME_OPTION_DISPLAY_ISOLATED = 4,
    CEF_SCHEME_OPTION_SECURE = 8,
    CEF_SCHEME_OPTION_CORS_ENABLED = 16,
    CEF_SCHEME_OPTION_CSP_BYPASSING = 32,
    CEF_SCHEME_OPTION_FETCH_ENABLED = 64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_range_t {
    pub from: ::std::os::raw::c_int,
    pub to: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_range_t"][::std::mem::size_of::<_cef_range_t>() - 8usize];
    ["Alignment of _cef_range_t"][::std::mem::align_of::<_cef_range_t>() - 4usize];
    ["Offset of field: _cef_range_t::from"][::std::mem::offset_of!(_cef_range_t, from) - 0usize];
    ["Offset of field: _cef_range_t::to"][::std::mem::offset_of!(_cef_range_t, to) - 4usize];
};
pub type cef_range_t = _cef_range_t;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_composition_underline_style_t {
    CEF_CUS_SOLID = 0,
    CEF_CUS_DOT = 1,
    CEF_CUS_DASH = 2,
    CEF_CUS_NONE = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_composition_underline_t {
    pub range: cef_range_t,
    pub color: cef_color_t,
    pub background_color: cef_color_t,
    pub thick: ::std::os::raw::c_int,
    pub style: cef_composition_underline_style_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_composition_underline_t"]
        [::std::mem::size_of::<_cef_composition_underline_t>() - 24usize];
    ["Alignment of _cef_composition_underline_t"]
        [::std::mem::align_of::<_cef_composition_underline_t>() - 4usize];
    ["Offset of field: _cef_composition_underline_t::range"]
        [::std::mem::offset_of!(_cef_composition_underline_t, range) - 0usize];
    ["Offset of field: _cef_composition_underline_t::color"]
        [::std::mem::offset_of!(_cef_composition_underline_t, color) - 8usize];
    ["Offset of field: _cef_composition_underline_t::background_color"]
        [::std::mem::offset_of!(_cef_composition_underline_t, background_color) - 12usize];
    ["Offset of field: _cef_composition_underline_t::thick"]
        [::std::mem::offset_of!(_cef_composition_underline_t, thick) - 16usize];
    ["Offset of field: _cef_composition_underline_t::style"]
        [::std::mem::offset_of!(_cef_composition_underline_t, style) - 20usize];
};
pub type cef_composition_underline_t = _cef_composition_underline_t;
impl cef_channel_layout_t {
    pub const CEF_CHANNEL_LAYOUT_MAX: cef_channel_layout_t =
        cef_channel_layout_t::CEF_CHANNEL_LAYOUT_BITSTREAM;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_channel_layout_t {
    CEF_CHANNEL_LAYOUT_NONE = 0,
    CEF_CHANNEL_LAYOUT_UNSUPPORTED = 1,
    CEF_CHANNEL_LAYOUT_MONO = 2,
    CEF_CHANNEL_LAYOUT_STEREO = 3,
    CEF_CHANNEL_LAYOUT_2_1 = 4,
    CEF_CHANNEL_LAYOUT_SURROUND = 5,
    CEF_CHANNEL_LAYOUT_4_0 = 6,
    CEF_CHANNEL_LAYOUT_2_2 = 7,
    CEF_CHANNEL_LAYOUT_QUAD = 8,
    CEF_CHANNEL_LAYOUT_5_0 = 9,
    CEF_CHANNEL_LAYOUT_5_1 = 10,
    CEF_CHANNEL_LAYOUT_5_0_BACK = 11,
    CEF_CHANNEL_LAYOUT_5_1_BACK = 12,
    CEF_CHANNEL_LAYOUT_7_0 = 13,
    CEF_CHANNEL_LAYOUT_7_1 = 14,
    CEF_CHANNEL_LAYOUT_7_1_WIDE = 15,
    CEF_CHANNEL_LAYOUT_STEREO_DOWNMIX = 16,
    CEF_CHANNEL_LAYOUT_2POINT1 = 17,
    CEF_CHANNEL_LAYOUT_3_1 = 18,
    CEF_CHANNEL_LAYOUT_4_1 = 19,
    CEF_CHANNEL_LAYOUT_6_0 = 20,
    CEF_CHANNEL_LAYOUT_6_0_FRONT = 21,
    CEF_CHANNEL_LAYOUT_HEXAGONAL = 22,
    CEF_CHANNEL_LAYOUT_6_1 = 23,
    CEF_CHANNEL_LAYOUT_6_1_BACK = 24,
    CEF_CHANNEL_LAYOUT_6_1_FRONT = 25,
    CEF_CHANNEL_LAYOUT_7_0_FRONT = 26,
    CEF_CHANNEL_LAYOUT_7_1_WIDE_BACK = 27,
    CEF_CHANNEL_LAYOUT_OCTAGONAL = 28,
    CEF_CHANNEL_LAYOUT_DISCRETE = 29,
    CEF_CHANNEL_LAYOUT_STEREO_AND_KEYBOARD_MIC = 30,
    CEF_CHANNEL_LAYOUT_4_1_QUAD_SIDE = 31,
    CEF_CHANNEL_LAYOUT_BITSTREAM = 32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_audio_parameters_t {
    pub channel_layout: cef_channel_layout_t,
    pub sample_rate: ::std::os::raw::c_int,
    pub frames_per_buffer: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_audio_parameters_t"][::std::mem::size_of::<_cef_audio_parameters_t>() - 12usize];
    ["Alignment of _cef_audio_parameters_t"]
        [::std::mem::align_of::<_cef_audio_parameters_t>() - 4usize];
    ["Offset of field: _cef_audio_parameters_t::channel_layout"]
        [::std::mem::offset_of!(_cef_audio_parameters_t, channel_layout) - 0usize];
    ["Offset of field: _cef_audio_parameters_t::sample_rate"]
        [::std::mem::offset_of!(_cef_audio_parameters_t, sample_rate) - 4usize];
    ["Offset of field: _cef_audio_parameters_t::frames_per_buffer"]
        [::std::mem::offset_of!(_cef_audio_parameters_t, frames_per_buffer) - 8usize];
};
pub type cef_audio_parameters_t = _cef_audio_parameters_t;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_media_route_create_result_t {
    CEF_MRCR_UNKNOWN_ERROR = 0,
    CEF_MRCR_OK = 1,
    CEF_MRCR_TIMED_OUT = 2,
    CEF_MRCR_ROUTE_NOT_FOUND = 3,
    CEF_MRCR_SINK_NOT_FOUND = 4,
    CEF_MRCR_INVALID_ORIGIN = 5,
    CEF_MRCR_NO_SUPPORTED_PROVIDER = 7,
    CEF_MRCR_CANCELLED = 8,
    CEF_MRCR_ROUTE_ALREADY_EXISTS = 9,
    CEF_MRCR_ROUTE_ALREADY_TERMINATED = 11,
    CEF_MRCR_TOTAL_COUNT = 12,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_media_route_connection_state_t {
    CEF_MRCS_UNKNOWN = 0,
    CEF_MRCS_CONNECTING = 1,
    CEF_MRCS_CONNECTED = 2,
    CEF_MRCS_CLOSED = 3,
    CEF_MRCS_TERMINATED = 4,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_media_sink_icon_type_t {
    CEF_MSIT_CAST = 0,
    CEF_MSIT_CAST_AUDIO_GROUP = 1,
    CEF_MSIT_CAST_AUDIO = 2,
    CEF_MSIT_MEETING = 3,
    CEF_MSIT_HANGOUT = 4,
    CEF_MSIT_EDUCATION = 5,
    CEF_MSIT_WIRED_DISPLAY = 6,
    CEF_MSIT_GENERIC = 7,
    CEF_MSIT_TOTAL_COUNT = 8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_sink_device_info_t {
    pub ip_address: cef_string_t,
    pub port: ::std::os::raw::c_int,
    pub model_name: cef_string_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_media_sink_device_info_t"]
        [::std::mem::size_of::<_cef_media_sink_device_info_t>() - 28usize];
    ["Alignment of _cef_media_sink_device_info_t"]
        [::std::mem::align_of::<_cef_media_sink_device_info_t>() - 4usize];
    ["Offset of field: _cef_media_sink_device_info_t::ip_address"]
        [::std::mem::offset_of!(_cef_media_sink_device_info_t, ip_address) - 0usize];
    ["Offset of field: _cef_media_sink_device_info_t::port"]
        [::std::mem::offset_of!(_cef_media_sink_device_info_t, port) - 12usize];
    ["Offset of field: _cef_media_sink_device_info_t::model_name"]
        [::std::mem::offset_of!(_cef_media_sink_device_info_t, model_name) - 16usize];
};
pub type cef_media_sink_device_info_t = _cef_media_sink_device_info_t;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_text_field_commands_t {
    CEF_TFC_CUT = 1,
    CEF_TFC_COPY = 2,
    CEF_TFC_PASTE = 3,
    CEF_TFC_UNDO = 4,
    CEF_TFC_DELETE = 5,
    CEF_TFC_SELECT_ALL = 6,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_chrome_toolbar_type_t {
    CEF_CTT_NONE = 1,
    CEF_CTT_NORMAL = 2,
    CEF_CTT_LOCATION = 3,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_docking_mode_t {
    CEF_DOCKING_MODE_TOP_LEFT = 1,
    CEF_DOCKING_MODE_TOP_RIGHT = 2,
    CEF_DOCKING_MODE_BOTTOM_LEFT = 3,
    CEF_DOCKING_MODE_BOTTOM_RIGHT = 4,
    CEF_DOCKING_MODE_CUSTOM = 5,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum cef_show_state_t {
    CEF_SHOW_STATE_NORMAL = 1,
    CEF_SHOW_STATE_MINIMIZED = 2,
    CEF_SHOW_STATE_MAXIMIZED = 3,
    CEF_SHOW_STATE_FULLSCREEN = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_base_ref_counted_t {
    pub size: usize,
    pub add_ref: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t)>,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
    pub has_one_ref: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
    pub has_at_least_one_ref: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_base_ref_counted_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_base_ref_counted_t"][::std::mem::size_of::<_cef_base_ref_counted_t>() - 20usize];
    ["Alignment of _cef_base_ref_counted_t"]
        [::std::mem::align_of::<_cef_base_ref_counted_t>() - 4usize];
    ["Offset of field: _cef_base_ref_counted_t::size"]
        [::std::mem::offset_of!(_cef_base_ref_counted_t, size) - 0usize];
    ["Offset of field: _cef_base_ref_counted_t::add_ref"]
        [::std::mem::offset_of!(_cef_base_ref_counted_t, add_ref) - 4usize];
    ["Offset of field: _cef_base_ref_counted_t::release"]
        [::std::mem::offset_of!(_cef_base_ref_counted_t, release) - 8usize];
    ["Offset of field: _cef_base_ref_counted_t::has_one_ref"]
        [::std::mem::offset_of!(_cef_base_ref_counted_t, has_one_ref) - 12usize];
    ["Offset of field: _cef_base_ref_counted_t::has_at_least_one_ref"]
        [::std::mem::offset_of!(_cef_base_ref_counted_t, has_at_least_one_ref) - 16usize];
};
pub type cef_base_ref_counted_t = _cef_base_ref_counted_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_base_scoped_t {
    pub size: usize,
    pub del: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_base_scoped_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_base_scoped_t"][::std::mem::size_of::<_cef_base_scoped_t>() - 8usize];
    ["Alignment of _cef_base_scoped_t"][::std::mem::align_of::<_cef_base_scoped_t>() - 4usize];
    ["Offset of field: _cef_base_scoped_t::size"]
        [::std::mem::offset_of!(_cef_base_scoped_t, size) - 0usize];
    ["Offset of field: _cef_base_scoped_t::del"]
        [::std::mem::offset_of!(_cef_base_scoped_t, del) - 4usize];
};
pub type cef_base_scoped_t = _cef_base_scoped_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_dev_tools_message_observer_t {
    pub base: cef_base_ref_counted_t,
    pub on_dev_tools_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_dev_tools_method_result: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            message_id: ::std::os::raw::c_int,
            success: ::std::os::raw::c_int,
            result: *const ::std::os::raw::c_void,
            result_size: usize,
        ),
    >,
    pub on_dev_tools_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
            method: *const cef_string_t,
            params: *const ::std::os::raw::c_void,
            params_size: usize,
        ),
    >,
    pub on_dev_tools_agent_attached: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    pub on_dev_tools_agent_detached: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dev_tools_message_observer_t,
            browser: *mut _cef_browser_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_dev_tools_message_observer_t"]
        [::std::mem::size_of::<_cef_dev_tools_message_observer_t>() - 40usize];
    ["Alignment of _cef_dev_tools_message_observer_t"]
        [::std::mem::align_of::<_cef_dev_tools_message_observer_t>() - 4usize];
    ["Offset of field: _cef_dev_tools_message_observer_t::base"]
        [::std::mem::offset_of!(_cef_dev_tools_message_observer_t, base) - 0usize];
    ["Offset of field: _cef_dev_tools_message_observer_t::on_dev_tools_message"]
        [::std::mem::offset_of!(_cef_dev_tools_message_observer_t, on_dev_tools_message) - 20usize];
    ["Offset of field: _cef_dev_tools_message_observer_t::on_dev_tools_method_result"][::std::mem::offset_of!(
        _cef_dev_tools_message_observer_t,
        on_dev_tools_method_result
    ) - 24usize];
    ["Offset of field: _cef_dev_tools_message_observer_t::on_dev_tools_event"]
        [::std::mem::offset_of!(_cef_dev_tools_message_observer_t, on_dev_tools_event) - 28usize];
    ["Offset of field: _cef_dev_tools_message_observer_t::on_dev_tools_agent_attached"][::std::mem::offset_of!(
        _cef_dev_tools_message_observer_t,
        on_dev_tools_agent_attached
    )
        - 32usize];
    ["Offset of field: _cef_dev_tools_message_observer_t::on_dev_tools_agent_detached"][::std::mem::offset_of!(
        _cef_dev_tools_message_observer_t,
        on_dev_tools_agent_detached
    )
        - 36usize];
};
pub type cef_dev_tools_message_observer_t = _cef_dev_tools_message_observer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            that: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_value_t>,
    pub get_type:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_value_type_t>,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_value_t) -> f64>,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> *mut _cef_list_value_t,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_value_t, value: f64) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_value_t,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_value_t"][::std::mem::size_of::<_cef_value_t>() - 108usize];
    ["Alignment of _cef_value_t"][::std::mem::align_of::<_cef_value_t>() - 4usize];
    ["Offset of field: _cef_value_t::base"][::std::mem::offset_of!(_cef_value_t, base) - 0usize];
    ["Offset of field: _cef_value_t::is_valid"]
        [::std::mem::offset_of!(_cef_value_t, is_valid) - 20usize];
    ["Offset of field: _cef_value_t::is_owned"]
        [::std::mem::offset_of!(_cef_value_t, is_owned) - 24usize];
    ["Offset of field: _cef_value_t::is_read_only"]
        [::std::mem::offset_of!(_cef_value_t, is_read_only) - 28usize];
    ["Offset of field: _cef_value_t::is_same"]
        [::std::mem::offset_of!(_cef_value_t, is_same) - 32usize];
    ["Offset of field: _cef_value_t::is_equal"]
        [::std::mem::offset_of!(_cef_value_t, is_equal) - 36usize];
    ["Offset of field: _cef_value_t::copy"][::std::mem::offset_of!(_cef_value_t, copy) - 40usize];
    ["Offset of field: _cef_value_t::get_type"]
        [::std::mem::offset_of!(_cef_value_t, get_type) - 44usize];
    ["Offset of field: _cef_value_t::get_bool"]
        [::std::mem::offset_of!(_cef_value_t, get_bool) - 48usize];
    ["Offset of field: _cef_value_t::get_int"]
        [::std::mem::offset_of!(_cef_value_t, get_int) - 52usize];
    ["Offset of field: _cef_value_t::get_double"]
        [::std::mem::offset_of!(_cef_value_t, get_double) - 56usize];
    ["Offset of field: _cef_value_t::get_string"]
        [::std::mem::offset_of!(_cef_value_t, get_string) - 60usize];
    ["Offset of field: _cef_value_t::get_binary"]
        [::std::mem::offset_of!(_cef_value_t, get_binary) - 64usize];
    ["Offset of field: _cef_value_t::get_dictionary"]
        [::std::mem::offset_of!(_cef_value_t, get_dictionary) - 68usize];
    ["Offset of field: _cef_value_t::get_list"]
        [::std::mem::offset_of!(_cef_value_t, get_list) - 72usize];
    ["Offset of field: _cef_value_t::set_null"]
        [::std::mem::offset_of!(_cef_value_t, set_null) - 76usize];
    ["Offset of field: _cef_value_t::set_bool"]
        [::std::mem::offset_of!(_cef_value_t, set_bool) - 80usize];
    ["Offset of field: _cef_value_t::set_int"]
        [::std::mem::offset_of!(_cef_value_t, set_int) - 84usize];
    ["Offset of field: _cef_value_t::set_double"]
        [::std::mem::offset_of!(_cef_value_t, set_double) - 88usize];
    ["Offset of field: _cef_value_t::set_string"]
        [::std::mem::offset_of!(_cef_value_t, set_string) - 92usize];
    ["Offset of field: _cef_value_t::set_binary"]
        [::std::mem::offset_of!(_cef_value_t, set_binary) - 96usize];
    ["Offset of field: _cef_value_t::set_dictionary"]
        [::std::mem::offset_of!(_cef_value_t, set_dictionary) - 100usize];
    ["Offset of field: _cef_value_t::set_list"]
        [::std::mem::offset_of!(_cef_value_t, set_list) - 104usize];
};
pub type cef_value_t = _cef_value_t;
unsafe extern "C" {
    pub fn cef_value_create() -> *mut cef_value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_binary_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            that: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> *mut _cef_binary_value_t,
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_binary_value_t) -> usize>,
    pub get_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_binary_value_t,
            buffer: *mut ::std::os::raw::c_void,
            buffer_size: usize,
            data_offset: usize,
        ) -> usize,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_binary_value_t"][::std::mem::size_of::<_cef_binary_value_t>() - 48usize];
    ["Alignment of _cef_binary_value_t"][::std::mem::align_of::<_cef_binary_value_t>() - 4usize];
    ["Offset of field: _cef_binary_value_t::base"]
        [::std::mem::offset_of!(_cef_binary_value_t, base) - 0usize];
    ["Offset of field: _cef_binary_value_t::is_valid"]
        [::std::mem::offset_of!(_cef_binary_value_t, is_valid) - 20usize];
    ["Offset of field: _cef_binary_value_t::is_owned"]
        [::std::mem::offset_of!(_cef_binary_value_t, is_owned) - 24usize];
    ["Offset of field: _cef_binary_value_t::is_same"]
        [::std::mem::offset_of!(_cef_binary_value_t, is_same) - 28usize];
    ["Offset of field: _cef_binary_value_t::is_equal"]
        [::std::mem::offset_of!(_cef_binary_value_t, is_equal) - 32usize];
    ["Offset of field: _cef_binary_value_t::copy"]
        [::std::mem::offset_of!(_cef_binary_value_t, copy) - 36usize];
    ["Offset of field: _cef_binary_value_t::get_size"]
        [::std::mem::offset_of!(_cef_binary_value_t, get_size) - 40usize];
    ["Offset of field: _cef_binary_value_t::get_data"]
        [::std::mem::offset_of!(_cef_binary_value_t, get_data) - 44usize];
};
pub type cef_binary_value_t = _cef_binary_value_t;
unsafe extern "C" {
    pub fn cef_binary_value_create(
        data: *const ::std::os::raw::c_void,
        data_size: usize,
    ) -> *mut cef_binary_value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_dictionary_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            that: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            exclude_empty_children: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> usize>,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t) -> ::std::os::raw::c_int,
    >,
    pub has_key: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_keys: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            keys: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> cef_value_type_t,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_value_t,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_dictionary_value_t, key: *const cef_string_t) -> f64,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_list_value_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dictionary_value_t,
            key: *const cef_string_t,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_dictionary_value_t"]
        [::std::mem::size_of::<_cef_dictionary_value_t>() - 136usize];
    ["Alignment of _cef_dictionary_value_t"]
        [::std::mem::align_of::<_cef_dictionary_value_t>() - 4usize];
    ["Offset of field: _cef_dictionary_value_t::base"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, base) - 0usize];
    ["Offset of field: _cef_dictionary_value_t::is_valid"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, is_valid) - 20usize];
    ["Offset of field: _cef_dictionary_value_t::is_owned"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, is_owned) - 24usize];
    ["Offset of field: _cef_dictionary_value_t::is_read_only"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, is_read_only) - 28usize];
    ["Offset of field: _cef_dictionary_value_t::is_same"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, is_same) - 32usize];
    ["Offset of field: _cef_dictionary_value_t::is_equal"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, is_equal) - 36usize];
    ["Offset of field: _cef_dictionary_value_t::copy"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, copy) - 40usize];
    ["Offset of field: _cef_dictionary_value_t::get_size"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, get_size) - 44usize];
    ["Offset of field: _cef_dictionary_value_t::clear"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, clear) - 48usize];
    ["Offset of field: _cef_dictionary_value_t::has_key"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, has_key) - 52usize];
    ["Offset of field: _cef_dictionary_value_t::get_keys"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, get_keys) - 56usize];
    ["Offset of field: _cef_dictionary_value_t::remove"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, remove) - 60usize];
    ["Offset of field: _cef_dictionary_value_t::get_type"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, get_type) - 64usize];
    ["Offset of field: _cef_dictionary_value_t::get_value"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, get_value) - 68usize];
    ["Offset of field: _cef_dictionary_value_t::get_bool"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, get_bool) - 72usize];
    ["Offset of field: _cef_dictionary_value_t::get_int"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, get_int) - 76usize];
    ["Offset of field: _cef_dictionary_value_t::get_double"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, get_double) - 80usize];
    ["Offset of field: _cef_dictionary_value_t::get_string"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, get_string) - 84usize];
    ["Offset of field: _cef_dictionary_value_t::get_binary"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, get_binary) - 88usize];
    ["Offset of field: _cef_dictionary_value_t::get_dictionary"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, get_dictionary) - 92usize];
    ["Offset of field: _cef_dictionary_value_t::get_list"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, get_list) - 96usize];
    ["Offset of field: _cef_dictionary_value_t::set_value"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, set_value) - 100usize];
    ["Offset of field: _cef_dictionary_value_t::set_null"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, set_null) - 104usize];
    ["Offset of field: _cef_dictionary_value_t::set_bool"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, set_bool) - 108usize];
    ["Offset of field: _cef_dictionary_value_t::set_int"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, set_int) - 112usize];
    ["Offset of field: _cef_dictionary_value_t::set_double"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, set_double) - 116usize];
    ["Offset of field: _cef_dictionary_value_t::set_string"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, set_string) - 120usize];
    ["Offset of field: _cef_dictionary_value_t::set_binary"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, set_binary) - 124usize];
    ["Offset of field: _cef_dictionary_value_t::set_dictionary"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, set_dictionary) - 128usize];
    ["Offset of field: _cef_dictionary_value_t::set_list"]
        [::std::mem::offset_of!(_cef_dictionary_value_t, set_list) - 132usize];
};
pub type cef_dictionary_value_t = _cef_dictionary_value_t;
unsafe extern "C" {
    pub fn cef_dictionary_value_create() -> *mut cef_dictionary_value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_list_value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_owned: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_equal: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            that: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> *mut _cef_list_value_t,
    >,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, size: usize) -> ::std::os::raw::c_int,
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> usize>,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t) -> ::std::os::raw::c_int,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_value_type_t,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_value_t,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> f64,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> cef_string_userfree_t,
    >,
    pub get_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub get_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> *mut _cef_list_value_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_list_value_t, index: usize) -> ::std::os::raw::c_int,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_binary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_binary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_dictionary: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_list_value_t,
            index: usize,
            value: *mut _cef_list_value_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_list_value_t"][::std::mem::size_of::<_cef_list_value_t>() - 132usize];
    ["Alignment of _cef_list_value_t"][::std::mem::align_of::<_cef_list_value_t>() - 4usize];
    ["Offset of field: _cef_list_value_t::base"]
        [::std::mem::offset_of!(_cef_list_value_t, base) - 0usize];
    ["Offset of field: _cef_list_value_t::is_valid"]
        [::std::mem::offset_of!(_cef_list_value_t, is_valid) - 20usize];
    ["Offset of field: _cef_list_value_t::is_owned"]
        [::std::mem::offset_of!(_cef_list_value_t, is_owned) - 24usize];
    ["Offset of field: _cef_list_value_t::is_read_only"]
        [::std::mem::offset_of!(_cef_list_value_t, is_read_only) - 28usize];
    ["Offset of field: _cef_list_value_t::is_same"]
        [::std::mem::offset_of!(_cef_list_value_t, is_same) - 32usize];
    ["Offset of field: _cef_list_value_t::is_equal"]
        [::std::mem::offset_of!(_cef_list_value_t, is_equal) - 36usize];
    ["Offset of field: _cef_list_value_t::copy"]
        [::std::mem::offset_of!(_cef_list_value_t, copy) - 40usize];
    ["Offset of field: _cef_list_value_t::set_size"]
        [::std::mem::offset_of!(_cef_list_value_t, set_size) - 44usize];
    ["Offset of field: _cef_list_value_t::get_size"]
        [::std::mem::offset_of!(_cef_list_value_t, get_size) - 48usize];
    ["Offset of field: _cef_list_value_t::clear"]
        [::std::mem::offset_of!(_cef_list_value_t, clear) - 52usize];
    ["Offset of field: _cef_list_value_t::remove"]
        [::std::mem::offset_of!(_cef_list_value_t, remove) - 56usize];
    ["Offset of field: _cef_list_value_t::get_type"]
        [::std::mem::offset_of!(_cef_list_value_t, get_type) - 60usize];
    ["Offset of field: _cef_list_value_t::get_value"]
        [::std::mem::offset_of!(_cef_list_value_t, get_value) - 64usize];
    ["Offset of field: _cef_list_value_t::get_bool"]
        [::std::mem::offset_of!(_cef_list_value_t, get_bool) - 68usize];
    ["Offset of field: _cef_list_value_t::get_int"]
        [::std::mem::offset_of!(_cef_list_value_t, get_int) - 72usize];
    ["Offset of field: _cef_list_value_t::get_double"]
        [::std::mem::offset_of!(_cef_list_value_t, get_double) - 76usize];
    ["Offset of field: _cef_list_value_t::get_string"]
        [::std::mem::offset_of!(_cef_list_value_t, get_string) - 80usize];
    ["Offset of field: _cef_list_value_t::get_binary"]
        [::std::mem::offset_of!(_cef_list_value_t, get_binary) - 84usize];
    ["Offset of field: _cef_list_value_t::get_dictionary"]
        [::std::mem::offset_of!(_cef_list_value_t, get_dictionary) - 88usize];
    ["Offset of field: _cef_list_value_t::get_list"]
        [::std::mem::offset_of!(_cef_list_value_t, get_list) - 92usize];
    ["Offset of field: _cef_list_value_t::set_value"]
        [::std::mem::offset_of!(_cef_list_value_t, set_value) - 96usize];
    ["Offset of field: _cef_list_value_t::set_null"]
        [::std::mem::offset_of!(_cef_list_value_t, set_null) - 100usize];
    ["Offset of field: _cef_list_value_t::set_bool"]
        [::std::mem::offset_of!(_cef_list_value_t, set_bool) - 104usize];
    ["Offset of field: _cef_list_value_t::set_int"]
        [::std::mem::offset_of!(_cef_list_value_t, set_int) - 108usize];
    ["Offset of field: _cef_list_value_t::set_double"]
        [::std::mem::offset_of!(_cef_list_value_t, set_double) - 112usize];
    ["Offset of field: _cef_list_value_t::set_string"]
        [::std::mem::offset_of!(_cef_list_value_t, set_string) - 116usize];
    ["Offset of field: _cef_list_value_t::set_binary"]
        [::std::mem::offset_of!(_cef_list_value_t, set_binary) - 120usize];
    ["Offset of field: _cef_list_value_t::set_dictionary"]
        [::std::mem::offset_of!(_cef_list_value_t, set_dictionary) - 124usize];
    ["Offset of field: _cef_list_value_t::set_list"]
        [::std::mem::offset_of!(_cef_list_value_t, set_list) - 128usize];
};
pub type cef_list_value_t = _cef_list_value_t;
unsafe extern "C" {
    pub fn cef_list_value_create() -> *mut cef_list_value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_image_t {
    pub base: cef_base_ref_counted_t,
    pub is_empty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            that: *mut _cef_image_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_bitmap: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            pixel_width: ::std::os::raw::c_int,
            pixel_height: ::std::os::raw::c_int,
            color_type: cef_color_type_t,
            alpha_type: cef_alpha_type_t,
            pixel_data: *const ::std::os::raw::c_void,
            pixel_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_png: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            png_data: *const ::std::os::raw::c_void,
            png_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_jpeg: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            jpeg_data: *const ::std::os::raw::c_void,
            jpeg_data_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_width: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_image_t) -> usize>,
    pub get_height: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_image_t) -> usize>,
    pub has_representation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t, scale_factor: f32) -> ::std::os::raw::c_int,
    >,
    pub remove_representation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_image_t, scale_factor: f32) -> ::std::os::raw::c_int,
    >,
    pub get_representation_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            actual_scale_factor: *mut f32,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_as_bitmap: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            color_type: cef_color_type_t,
            alpha_type: cef_alpha_type_t,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_as_png: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            with_transparency: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
    pub get_as_jpeg: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_image_t,
            scale_factor: f32,
            quality: ::std::os::raw::c_int,
            pixel_width: *mut ::std::os::raw::c_int,
            pixel_height: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_binary_value_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_image_t"][::std::mem::size_of::<_cef_image_t>() - 72usize];
    ["Alignment of _cef_image_t"][::std::mem::align_of::<_cef_image_t>() - 4usize];
    ["Offset of field: _cef_image_t::base"][::std::mem::offset_of!(_cef_image_t, base) - 0usize];
    ["Offset of field: _cef_image_t::is_empty"]
        [::std::mem::offset_of!(_cef_image_t, is_empty) - 20usize];
    ["Offset of field: _cef_image_t::is_same"]
        [::std::mem::offset_of!(_cef_image_t, is_same) - 24usize];
    ["Offset of field: _cef_image_t::add_bitmap"]
        [::std::mem::offset_of!(_cef_image_t, add_bitmap) - 28usize];
    ["Offset of field: _cef_image_t::add_png"]
        [::std::mem::offset_of!(_cef_image_t, add_png) - 32usize];
    ["Offset of field: _cef_image_t::add_jpeg"]
        [::std::mem::offset_of!(_cef_image_t, add_jpeg) - 36usize];
    ["Offset of field: _cef_image_t::get_width"]
        [::std::mem::offset_of!(_cef_image_t, get_width) - 40usize];
    ["Offset of field: _cef_image_t::get_height"]
        [::std::mem::offset_of!(_cef_image_t, get_height) - 44usize];
    ["Offset of field: _cef_image_t::has_representation"]
        [::std::mem::offset_of!(_cef_image_t, has_representation) - 48usize];
    ["Offset of field: _cef_image_t::remove_representation"]
        [::std::mem::offset_of!(_cef_image_t, remove_representation) - 52usize];
    ["Offset of field: _cef_image_t::get_representation_info"]
        [::std::mem::offset_of!(_cef_image_t, get_representation_info) - 56usize];
    ["Offset of field: _cef_image_t::get_as_bitmap"]
        [::std::mem::offset_of!(_cef_image_t, get_as_bitmap) - 60usize];
    ["Offset of field: _cef_image_t::get_as_png"]
        [::std::mem::offset_of!(_cef_image_t, get_as_png) - 64usize];
    ["Offset of field: _cef_image_t::get_as_jpeg"]
        [::std::mem::offset_of!(_cef_image_t, get_as_jpeg) - 68usize];
};
pub type cef_image_t = _cef_image_t;
unsafe extern "C" {
    pub fn cef_image_create() -> *mut cef_image_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_read_handler_t {
    pub base: cef_base_ref_counted_t,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_read_handler_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_read_handler_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_read_handler_t) -> int64>,
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_read_handler_t) -> ::std::os::raw::c_int,
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_read_handler_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_read_handler_t"][::std::mem::size_of::<_cef_read_handler_t>() - 40usize];
    ["Alignment of _cef_read_handler_t"][::std::mem::align_of::<_cef_read_handler_t>() - 4usize];
    ["Offset of field: _cef_read_handler_t::base"]
        [::std::mem::offset_of!(_cef_read_handler_t, base) - 0usize];
    ["Offset of field: _cef_read_handler_t::read"]
        [::std::mem::offset_of!(_cef_read_handler_t, read) - 20usize];
    ["Offset of field: _cef_read_handler_t::seek"]
        [::std::mem::offset_of!(_cef_read_handler_t, seek) - 24usize];
    ["Offset of field: _cef_read_handler_t::tell"]
        [::std::mem::offset_of!(_cef_read_handler_t, tell) - 28usize];
    ["Offset of field: _cef_read_handler_t::eof"]
        [::std::mem::offset_of!(_cef_read_handler_t, eof) - 32usize];
    ["Offset of field: _cef_read_handler_t::may_block"]
        [::std::mem::offset_of!(_cef_read_handler_t, may_block) - 36usize];
};
pub type cef_read_handler_t = _cef_read_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_stream_reader_t {
    pub base: cef_base_ref_counted_t,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_reader_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_reader_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> int64>,
    pub eof: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int,
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_reader_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_stream_reader_t"][::std::mem::size_of::<_cef_stream_reader_t>() - 40usize];
    ["Alignment of _cef_stream_reader_t"][::std::mem::align_of::<_cef_stream_reader_t>() - 4usize];
    ["Offset of field: _cef_stream_reader_t::base"]
        [::std::mem::offset_of!(_cef_stream_reader_t, base) - 0usize];
    ["Offset of field: _cef_stream_reader_t::read"]
        [::std::mem::offset_of!(_cef_stream_reader_t, read) - 20usize];
    ["Offset of field: _cef_stream_reader_t::seek"]
        [::std::mem::offset_of!(_cef_stream_reader_t, seek) - 24usize];
    ["Offset of field: _cef_stream_reader_t::tell"]
        [::std::mem::offset_of!(_cef_stream_reader_t, tell) - 28usize];
    ["Offset of field: _cef_stream_reader_t::eof"]
        [::std::mem::offset_of!(_cef_stream_reader_t, eof) - 32usize];
    ["Offset of field: _cef_stream_reader_t::may_block"]
        [::std::mem::offset_of!(_cef_stream_reader_t, may_block) - 36usize];
};
pub type cef_stream_reader_t = _cef_stream_reader_t;
unsafe extern "C" {
    pub fn cef_stream_reader_create_for_file(
        fileName: *const cef_string_t,
    ) -> *mut cef_stream_reader_t;
}
unsafe extern "C" {
    pub fn cef_stream_reader_create_for_data(
        data: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut cef_stream_reader_t;
}
unsafe extern "C" {
    pub fn cef_stream_reader_create_for_handler(
        handler: *mut cef_read_handler_t,
    ) -> *mut cef_stream_reader_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_write_handler_t {
    pub base: cef_base_ref_counted_t,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_write_handler_t,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_write_handler_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_write_handler_t) -> int64>,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_write_handler_t) -> ::std::os::raw::c_int,
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_write_handler_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_write_handler_t"][::std::mem::size_of::<_cef_write_handler_t>() - 40usize];
    ["Alignment of _cef_write_handler_t"][::std::mem::align_of::<_cef_write_handler_t>() - 4usize];
    ["Offset of field: _cef_write_handler_t::base"]
        [::std::mem::offset_of!(_cef_write_handler_t, base) - 0usize];
    ["Offset of field: _cef_write_handler_t::write"]
        [::std::mem::offset_of!(_cef_write_handler_t, write) - 20usize];
    ["Offset of field: _cef_write_handler_t::seek"]
        [::std::mem::offset_of!(_cef_write_handler_t, seek) - 24usize];
    ["Offset of field: _cef_write_handler_t::tell"]
        [::std::mem::offset_of!(_cef_write_handler_t, tell) - 28usize];
    ["Offset of field: _cef_write_handler_t::flush"]
        [::std::mem::offset_of!(_cef_write_handler_t, flush) - 32usize];
    ["Offset of field: _cef_write_handler_t::may_block"]
        [::std::mem::offset_of!(_cef_write_handler_t, may_block) - 36usize];
};
pub type cef_write_handler_t = _cef_write_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_stream_writer_t {
    pub base: cef_base_ref_counted_t,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_writer_t,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
            n: usize,
        ) -> usize,
    >,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_stream_writer_t,
            offset: int64,
            whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tell:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> int64>,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int,
    >,
    pub may_block: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_stream_writer_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_stream_writer_t"][::std::mem::size_of::<_cef_stream_writer_t>() - 40usize];
    ["Alignment of _cef_stream_writer_t"][::std::mem::align_of::<_cef_stream_writer_t>() - 4usize];
    ["Offset of field: _cef_stream_writer_t::base"]
        [::std::mem::offset_of!(_cef_stream_writer_t, base) - 0usize];
    ["Offset of field: _cef_stream_writer_t::write"]
        [::std::mem::offset_of!(_cef_stream_writer_t, write) - 20usize];
    ["Offset of field: _cef_stream_writer_t::seek"]
        [::std::mem::offset_of!(_cef_stream_writer_t, seek) - 24usize];
    ["Offset of field: _cef_stream_writer_t::tell"]
        [::std::mem::offset_of!(_cef_stream_writer_t, tell) - 28usize];
    ["Offset of field: _cef_stream_writer_t::flush"]
        [::std::mem::offset_of!(_cef_stream_writer_t, flush) - 32usize];
    ["Offset of field: _cef_stream_writer_t::may_block"]
        [::std::mem::offset_of!(_cef_stream_writer_t, may_block) - 36usize];
};
pub type cef_stream_writer_t = _cef_stream_writer_t;
unsafe extern "C" {
    pub fn cef_stream_writer_create_for_file(
        fileName: *const cef_string_t,
    ) -> *mut cef_stream_writer_t;
}
unsafe extern "C" {
    pub fn cef_stream_writer_create_for_handler(
        handler: *mut cef_write_handler_t,
    ) -> *mut cef_stream_writer_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_drag_data_t {
    pub base: cef_base_ref_counted_t,
    pub clone: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_drag_data_t,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub is_link: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub is_fragment: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub is_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
    pub get_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_link_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_link_metadata: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_fragment_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_fragment_html: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_fragment_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_file_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_string_userfree_t,
    >,
    pub get_file_contents: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            writer: *mut _cef_stream_writer_t,
        ) -> usize,
    >,
    pub get_file_names: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            names: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, url: *const cef_string_t),
    >,
    pub set_link_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, title: *const cef_string_t),
    >,
    pub set_link_metadata: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, data: *const cef_string_t),
    >,
    pub set_fragment_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, text: *const cef_string_t),
    >,
    pub set_fragment_html: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, html: *const cef_string_t),
    >,
    pub set_fragment_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t, base_url: *const cef_string_t),
    >,
    pub reset_file_contents:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t)>,
    pub add_file: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_data_t,
            path: *const cef_string_t,
            display_name: *const cef_string_t,
        ),
    >,
    pub clear_filenames: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t)>,
    pub get_image: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> *mut _cef_image_t,
    >,
    pub get_image_hotspot:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> cef_point_t>,
    pub has_image: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_drag_data_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_drag_data_t"][::std::mem::size_of::<_cef_drag_data_t>() - 124usize];
    ["Alignment of _cef_drag_data_t"][::std::mem::align_of::<_cef_drag_data_t>() - 4usize];
    ["Offset of field: _cef_drag_data_t::base"]
        [::std::mem::offset_of!(_cef_drag_data_t, base) - 0usize];
    ["Offset of field: _cef_drag_data_t::clone"]
        [::std::mem::offset_of!(_cef_drag_data_t, clone) - 20usize];
    ["Offset of field: _cef_drag_data_t::is_read_only"]
        [::std::mem::offset_of!(_cef_drag_data_t, is_read_only) - 24usize];
    ["Offset of field: _cef_drag_data_t::is_link"]
        [::std::mem::offset_of!(_cef_drag_data_t, is_link) - 28usize];
    ["Offset of field: _cef_drag_data_t::is_fragment"]
        [::std::mem::offset_of!(_cef_drag_data_t, is_fragment) - 32usize];
    ["Offset of field: _cef_drag_data_t::is_file"]
        [::std::mem::offset_of!(_cef_drag_data_t, is_file) - 36usize];
    ["Offset of field: _cef_drag_data_t::get_link_url"]
        [::std::mem::offset_of!(_cef_drag_data_t, get_link_url) - 40usize];
    ["Offset of field: _cef_drag_data_t::get_link_title"]
        [::std::mem::offset_of!(_cef_drag_data_t, get_link_title) - 44usize];
    ["Offset of field: _cef_drag_data_t::get_link_metadata"]
        [::std::mem::offset_of!(_cef_drag_data_t, get_link_metadata) - 48usize];
    ["Offset of field: _cef_drag_data_t::get_fragment_text"]
        [::std::mem::offset_of!(_cef_drag_data_t, get_fragment_text) - 52usize];
    ["Offset of field: _cef_drag_data_t::get_fragment_html"]
        [::std::mem::offset_of!(_cef_drag_data_t, get_fragment_html) - 56usize];
    ["Offset of field: _cef_drag_data_t::get_fragment_base_url"]
        [::std::mem::offset_of!(_cef_drag_data_t, get_fragment_base_url) - 60usize];
    ["Offset of field: _cef_drag_data_t::get_file_name"]
        [::std::mem::offset_of!(_cef_drag_data_t, get_file_name) - 64usize];
    ["Offset of field: _cef_drag_data_t::get_file_contents"]
        [::std::mem::offset_of!(_cef_drag_data_t, get_file_contents) - 68usize];
    ["Offset of field: _cef_drag_data_t::get_file_names"]
        [::std::mem::offset_of!(_cef_drag_data_t, get_file_names) - 72usize];
    ["Offset of field: _cef_drag_data_t::set_link_url"]
        [::std::mem::offset_of!(_cef_drag_data_t, set_link_url) - 76usize];
    ["Offset of field: _cef_drag_data_t::set_link_title"]
        [::std::mem::offset_of!(_cef_drag_data_t, set_link_title) - 80usize];
    ["Offset of field: _cef_drag_data_t::set_link_metadata"]
        [::std::mem::offset_of!(_cef_drag_data_t, set_link_metadata) - 84usize];
    ["Offset of field: _cef_drag_data_t::set_fragment_text"]
        [::std::mem::offset_of!(_cef_drag_data_t, set_fragment_text) - 88usize];
    ["Offset of field: _cef_drag_data_t::set_fragment_html"]
        [::std::mem::offset_of!(_cef_drag_data_t, set_fragment_html) - 92usize];
    ["Offset of field: _cef_drag_data_t::set_fragment_base_url"]
        [::std::mem::offset_of!(_cef_drag_data_t, set_fragment_base_url) - 96usize];
    ["Offset of field: _cef_drag_data_t::reset_file_contents"]
        [::std::mem::offset_of!(_cef_drag_data_t, reset_file_contents) - 100usize];
    ["Offset of field: _cef_drag_data_t::add_file"]
        [::std::mem::offset_of!(_cef_drag_data_t, add_file) - 104usize];
    ["Offset of field: _cef_drag_data_t::clear_filenames"]
        [::std::mem::offset_of!(_cef_drag_data_t, clear_filenames) - 108usize];
    ["Offset of field: _cef_drag_data_t::get_image"]
        [::std::mem::offset_of!(_cef_drag_data_t, get_image) - 112usize];
    ["Offset of field: _cef_drag_data_t::get_image_hotspot"]
        [::std::mem::offset_of!(_cef_drag_data_t, get_image_hotspot) - 116usize];
    ["Offset of field: _cef_drag_data_t::has_image"]
        [::std::mem::offset_of!(_cef_drag_data_t, has_image) - 120usize];
};
pub type cef_drag_data_t = _cef_drag_data_t;
unsafe extern "C" {
    pub fn cef_drag_data_create() -> *mut cef_drag_data_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_domvisitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domvisitor_t, document: *mut _cef_domdocument_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_domvisitor_t"][::std::mem::size_of::<_cef_domvisitor_t>() - 24usize];
    ["Alignment of _cef_domvisitor_t"][::std::mem::align_of::<_cef_domvisitor_t>() - 4usize];
    ["Offset of field: _cef_domvisitor_t::base"]
        [::std::mem::offset_of!(_cef_domvisitor_t, base) - 0usize];
    ["Offset of field: _cef_domvisitor_t::visit"]
        [::std::mem::offset_of!(_cef_domvisitor_t, visit) - 20usize];
};
pub type cef_domvisitor_t = _cef_domvisitor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_domdocument_t {
    pub base: cef_base_ref_counted_t,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_dom_document_type_t,
    >,
    pub get_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub get_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub get_head: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub get_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_element_by_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domdocument_t,
            id: *const cef_string_t,
        ) -> *mut _cef_domnode_t,
    >,
    pub get_focused_node: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> *mut _cef_domnode_t,
    >,
    pub has_selection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    pub get_selection_start_offset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    pub get_selection_end_offset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> ::std::os::raw::c_int,
    >,
    pub get_selection_as_markup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_selection_as_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_base_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domdocument_t) -> cef_string_userfree_t,
    >,
    pub get_complete_url: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domdocument_t,
            partialURL: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_domdocument_t"][::std::mem::size_of::<_cef_domdocument_t>() - 76usize];
    ["Alignment of _cef_domdocument_t"][::std::mem::align_of::<_cef_domdocument_t>() - 4usize];
    ["Offset of field: _cef_domdocument_t::base"]
        [::std::mem::offset_of!(_cef_domdocument_t, base) - 0usize];
    ["Offset of field: _cef_domdocument_t::get_type"]
        [::std::mem::offset_of!(_cef_domdocument_t, get_type) - 20usize];
    ["Offset of field: _cef_domdocument_t::get_document"]
        [::std::mem::offset_of!(_cef_domdocument_t, get_document) - 24usize];
    ["Offset of field: _cef_domdocument_t::get_body"]
        [::std::mem::offset_of!(_cef_domdocument_t, get_body) - 28usize];
    ["Offset of field: _cef_domdocument_t::get_head"]
        [::std::mem::offset_of!(_cef_domdocument_t, get_head) - 32usize];
    ["Offset of field: _cef_domdocument_t::get_title"]
        [::std::mem::offset_of!(_cef_domdocument_t, get_title) - 36usize];
    ["Offset of field: _cef_domdocument_t::get_element_by_id"]
        [::std::mem::offset_of!(_cef_domdocument_t, get_element_by_id) - 40usize];
    ["Offset of field: _cef_domdocument_t::get_focused_node"]
        [::std::mem::offset_of!(_cef_domdocument_t, get_focused_node) - 44usize];
    ["Offset of field: _cef_domdocument_t::has_selection"]
        [::std::mem::offset_of!(_cef_domdocument_t, has_selection) - 48usize];
    ["Offset of field: _cef_domdocument_t::get_selection_start_offset"]
        [::std::mem::offset_of!(_cef_domdocument_t, get_selection_start_offset) - 52usize];
    ["Offset of field: _cef_domdocument_t::get_selection_end_offset"]
        [::std::mem::offset_of!(_cef_domdocument_t, get_selection_end_offset) - 56usize];
    ["Offset of field: _cef_domdocument_t::get_selection_as_markup"]
        [::std::mem::offset_of!(_cef_domdocument_t, get_selection_as_markup) - 60usize];
    ["Offset of field: _cef_domdocument_t::get_selection_as_text"]
        [::std::mem::offset_of!(_cef_domdocument_t, get_selection_as_text) - 64usize];
    ["Offset of field: _cef_domdocument_t::get_base_url"]
        [::std::mem::offset_of!(_cef_domdocument_t, get_base_url) - 68usize];
    ["Offset of field: _cef_domdocument_t::get_complete_url"]
        [::std::mem::offset_of!(_cef_domdocument_t, get_complete_url) - 72usize];
};
pub type cef_domdocument_t = _cef_domdocument_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_domnode_t {
    pub base: cef_base_ref_counted_t,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_dom_node_type_t,
    >,
    pub is_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub is_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub is_editable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub is_form_control_element: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub get_form_control_element_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            that: *mut _cef_domnode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub set_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_as_markup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub get_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domdocument_t,
    >,
    pub get_parent: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_previous_sibling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_next_sibling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub has_children: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub get_first_child: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_last_child: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> *mut _cef_domnode_t,
    >,
    pub get_element_tag_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub has_element_attributes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> ::std::os::raw::c_int,
    >,
    pub has_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_element_attributes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t, attrMap: cef_string_map_t),
    >,
    pub set_element_attribute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_domnode_t,
            attrName: *const cef_string_t,
            value: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_element_inner_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_string_userfree_t,
    >,
    pub get_element_bounds:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_domnode_t) -> cef_rect_t>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_domnode_t"][::std::mem::size_of::<_cef_domnode_t>() - 124usize];
    ["Alignment of _cef_domnode_t"][::std::mem::align_of::<_cef_domnode_t>() - 4usize];
    ["Offset of field: _cef_domnode_t::base"]
        [::std::mem::offset_of!(_cef_domnode_t, base) - 0usize];
    ["Offset of field: _cef_domnode_t::get_type"]
        [::std::mem::offset_of!(_cef_domnode_t, get_type) - 20usize];
    ["Offset of field: _cef_domnode_t::is_text"]
        [::std::mem::offset_of!(_cef_domnode_t, is_text) - 24usize];
    ["Offset of field: _cef_domnode_t::is_element"]
        [::std::mem::offset_of!(_cef_domnode_t, is_element) - 28usize];
    ["Offset of field: _cef_domnode_t::is_editable"]
        [::std::mem::offset_of!(_cef_domnode_t, is_editable) - 32usize];
    ["Offset of field: _cef_domnode_t::is_form_control_element"]
        [::std::mem::offset_of!(_cef_domnode_t, is_form_control_element) - 36usize];
    ["Offset of field: _cef_domnode_t::get_form_control_element_type"]
        [::std::mem::offset_of!(_cef_domnode_t, get_form_control_element_type) - 40usize];
    ["Offset of field: _cef_domnode_t::is_same"]
        [::std::mem::offset_of!(_cef_domnode_t, is_same) - 44usize];
    ["Offset of field: _cef_domnode_t::get_name"]
        [::std::mem::offset_of!(_cef_domnode_t, get_name) - 48usize];
    ["Offset of field: _cef_domnode_t::get_value"]
        [::std::mem::offset_of!(_cef_domnode_t, get_value) - 52usize];
    ["Offset of field: _cef_domnode_t::set_value"]
        [::std::mem::offset_of!(_cef_domnode_t, set_value) - 56usize];
    ["Offset of field: _cef_domnode_t::get_as_markup"]
        [::std::mem::offset_of!(_cef_domnode_t, get_as_markup) - 60usize];
    ["Offset of field: _cef_domnode_t::get_document"]
        [::std::mem::offset_of!(_cef_domnode_t, get_document) - 64usize];
    ["Offset of field: _cef_domnode_t::get_parent"]
        [::std::mem::offset_of!(_cef_domnode_t, get_parent) - 68usize];
    ["Offset of field: _cef_domnode_t::get_previous_sibling"]
        [::std::mem::offset_of!(_cef_domnode_t, get_previous_sibling) - 72usize];
    ["Offset of field: _cef_domnode_t::get_next_sibling"]
        [::std::mem::offset_of!(_cef_domnode_t, get_next_sibling) - 76usize];
    ["Offset of field: _cef_domnode_t::has_children"]
        [::std::mem::offset_of!(_cef_domnode_t, has_children) - 80usize];
    ["Offset of field: _cef_domnode_t::get_first_child"]
        [::std::mem::offset_of!(_cef_domnode_t, get_first_child) - 84usize];
    ["Offset of field: _cef_domnode_t::get_last_child"]
        [::std::mem::offset_of!(_cef_domnode_t, get_last_child) - 88usize];
    ["Offset of field: _cef_domnode_t::get_element_tag_name"]
        [::std::mem::offset_of!(_cef_domnode_t, get_element_tag_name) - 92usize];
    ["Offset of field: _cef_domnode_t::has_element_attributes"]
        [::std::mem::offset_of!(_cef_domnode_t, has_element_attributes) - 96usize];
    ["Offset of field: _cef_domnode_t::has_element_attribute"]
        [::std::mem::offset_of!(_cef_domnode_t, has_element_attribute) - 100usize];
    ["Offset of field: _cef_domnode_t::get_element_attribute"]
        [::std::mem::offset_of!(_cef_domnode_t, get_element_attribute) - 104usize];
    ["Offset of field: _cef_domnode_t::get_element_attributes"]
        [::std::mem::offset_of!(_cef_domnode_t, get_element_attributes) - 108usize];
    ["Offset of field: _cef_domnode_t::set_element_attribute"]
        [::std::mem::offset_of!(_cef_domnode_t, set_element_attribute) - 112usize];
    ["Offset of field: _cef_domnode_t::get_element_inner_text"]
        [::std::mem::offset_of!(_cef_domnode_t, get_element_inner_text) - 116usize];
    ["Offset of field: _cef_domnode_t::get_element_bounds"]
        [::std::mem::offset_of!(_cef_domnode_t, get_element_bounds) - 120usize];
};
pub type cef_domnode_t = _cef_domnode_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_process_message_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> *mut _cef_process_message_t,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> cef_string_userfree_t,
    >,
    pub get_argument_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_process_message_t) -> *mut _cef_list_value_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_process_message_t"][::std::mem::size_of::<_cef_process_message_t>() - 40usize];
    ["Alignment of _cef_process_message_t"]
        [::std::mem::align_of::<_cef_process_message_t>() - 4usize];
    ["Offset of field: _cef_process_message_t::base"]
        [::std::mem::offset_of!(_cef_process_message_t, base) - 0usize];
    ["Offset of field: _cef_process_message_t::is_valid"]
        [::std::mem::offset_of!(_cef_process_message_t, is_valid) - 20usize];
    ["Offset of field: _cef_process_message_t::is_read_only"]
        [::std::mem::offset_of!(_cef_process_message_t, is_read_only) - 24usize];
    ["Offset of field: _cef_process_message_t::copy"]
        [::std::mem::offset_of!(_cef_process_message_t, copy) - 28usize];
    ["Offset of field: _cef_process_message_t::get_name"]
        [::std::mem::offset_of!(_cef_process_message_t, get_name) - 32usize];
    ["Offset of field: _cef_process_message_t::get_argument_list"]
        [::std::mem::offset_of!(_cef_process_message_t, get_argument_list) - 36usize];
};
pub type cef_process_message_t = _cef_process_message_t;
unsafe extern "C" {
    pub fn cef_process_message_create(name: *const cef_string_t) -> *mut cef_process_message_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int,
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub set_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t),
    >,
    pub get_method: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub set_method: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, method: *const cef_string_t),
    >,
    pub set_referrer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            referrer_url: *const cef_string_t,
            policy: cef_referrer_policy_t,
        ),
    >,
    pub get_referrer_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub get_referrer_policy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_referrer_policy_t,
    >,
    pub get_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> *mut _cef_post_data_t,
    >,
    pub set_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, postData: *mut _cef_post_data_t),
    >,
    pub get_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t),
    >,
    pub set_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, headerMap: cef_string_multimap_t),
    >,
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int,
        ),
    >,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_t,
            url: *const cef_string_t,
            method: *const cef_string_t,
            postData: *mut _cef_post_data_t,
            headerMap: cef_string_multimap_t,
        ),
    >,
    pub get_flags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> ::std::os::raw::c_int,
    >,
    pub set_flags: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, flags: ::std::os::raw::c_int),
    >,
    pub get_first_party_for_cookies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_string_userfree_t,
    >,
    pub set_first_party_for_cookies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t, url: *const cef_string_t),
    >,
    pub get_resource_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_resource_type_t,
    >,
    pub get_transition_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_t) -> cef_transition_type_t,
    >,
    pub get_identifier:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_request_t) -> uint64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_request_t"][::std::mem::size_of::<_cef_request_t>() - 108usize];
    ["Alignment of _cef_request_t"][::std::mem::align_of::<_cef_request_t>() - 4usize];
    ["Offset of field: _cef_request_t::base"]
        [::std::mem::offset_of!(_cef_request_t, base) - 0usize];
    ["Offset of field: _cef_request_t::is_read_only"]
        [::std::mem::offset_of!(_cef_request_t, is_read_only) - 20usize];
    ["Offset of field: _cef_request_t::get_url"]
        [::std::mem::offset_of!(_cef_request_t, get_url) - 24usize];
    ["Offset of field: _cef_request_t::set_url"]
        [::std::mem::offset_of!(_cef_request_t, set_url) - 28usize];
    ["Offset of field: _cef_request_t::get_method"]
        [::std::mem::offset_of!(_cef_request_t, get_method) - 32usize];
    ["Offset of field: _cef_request_t::set_method"]
        [::std::mem::offset_of!(_cef_request_t, set_method) - 36usize];
    ["Offset of field: _cef_request_t::set_referrer"]
        [::std::mem::offset_of!(_cef_request_t, set_referrer) - 40usize];
    ["Offset of field: _cef_request_t::get_referrer_url"]
        [::std::mem::offset_of!(_cef_request_t, get_referrer_url) - 44usize];
    ["Offset of field: _cef_request_t::get_referrer_policy"]
        [::std::mem::offset_of!(_cef_request_t, get_referrer_policy) - 48usize];
    ["Offset of field: _cef_request_t::get_post_data"]
        [::std::mem::offset_of!(_cef_request_t, get_post_data) - 52usize];
    ["Offset of field: _cef_request_t::set_post_data"]
        [::std::mem::offset_of!(_cef_request_t, set_post_data) - 56usize];
    ["Offset of field: _cef_request_t::get_header_map"]
        [::std::mem::offset_of!(_cef_request_t, get_header_map) - 60usize];
    ["Offset of field: _cef_request_t::set_header_map"]
        [::std::mem::offset_of!(_cef_request_t, set_header_map) - 64usize];
    ["Offset of field: _cef_request_t::get_header_by_name"]
        [::std::mem::offset_of!(_cef_request_t, get_header_by_name) - 68usize];
    ["Offset of field: _cef_request_t::set_header_by_name"]
        [::std::mem::offset_of!(_cef_request_t, set_header_by_name) - 72usize];
    ["Offset of field: _cef_request_t::set"][::std::mem::offset_of!(_cef_request_t, set) - 76usize];
    ["Offset of field: _cef_request_t::get_flags"]
        [::std::mem::offset_of!(_cef_request_t, get_flags) - 80usize];
    ["Offset of field: _cef_request_t::set_flags"]
        [::std::mem::offset_of!(_cef_request_t, set_flags) - 84usize];
    ["Offset of field: _cef_request_t::get_first_party_for_cookies"]
        [::std::mem::offset_of!(_cef_request_t, get_first_party_for_cookies) - 88usize];
    ["Offset of field: _cef_request_t::set_first_party_for_cookies"]
        [::std::mem::offset_of!(_cef_request_t, set_first_party_for_cookies) - 92usize];
    ["Offset of field: _cef_request_t::get_resource_type"]
        [::std::mem::offset_of!(_cef_request_t, get_resource_type) - 96usize];
    ["Offset of field: _cef_request_t::get_transition_type"]
        [::std::mem::offset_of!(_cef_request_t, get_transition_type) - 100usize];
    ["Offset of field: _cef_request_t::get_identifier"]
        [::std::mem::offset_of!(_cef_request_t, get_identifier) - 104usize];
};
pub type cef_request_t = _cef_request_t;
unsafe extern "C" {
    pub fn cef_request_create() -> *mut cef_request_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_post_data_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int,
    >,
    pub has_excluded_elements: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> ::std::os::raw::c_int,
    >,
    pub get_element_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t) -> usize>,
    pub get_elements: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            elementsCount: *mut usize,
            elements: *mut *mut _cef_post_data_element_t,
        ),
    >,
    pub remove_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_element: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_t,
            element: *mut _cef_post_data_element_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_elements: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_post_data_t"][::std::mem::size_of::<_cef_post_data_t>() - 48usize];
    ["Alignment of _cef_post_data_t"][::std::mem::align_of::<_cef_post_data_t>() - 4usize];
    ["Offset of field: _cef_post_data_t::base"]
        [::std::mem::offset_of!(_cef_post_data_t, base) - 0usize];
    ["Offset of field: _cef_post_data_t::is_read_only"]
        [::std::mem::offset_of!(_cef_post_data_t, is_read_only) - 20usize];
    ["Offset of field: _cef_post_data_t::has_excluded_elements"]
        [::std::mem::offset_of!(_cef_post_data_t, has_excluded_elements) - 24usize];
    ["Offset of field: _cef_post_data_t::get_element_count"]
        [::std::mem::offset_of!(_cef_post_data_t, get_element_count) - 28usize];
    ["Offset of field: _cef_post_data_t::get_elements"]
        [::std::mem::offset_of!(_cef_post_data_t, get_elements) - 32usize];
    ["Offset of field: _cef_post_data_t::remove_element"]
        [::std::mem::offset_of!(_cef_post_data_t, remove_element) - 36usize];
    ["Offset of field: _cef_post_data_t::add_element"]
        [::std::mem::offset_of!(_cef_post_data_t, add_element) - 40usize];
    ["Offset of field: _cef_post_data_t::remove_elements"]
        [::std::mem::offset_of!(_cef_post_data_t, remove_elements) - 44usize];
};
pub type cef_post_data_t = _cef_post_data_t;
unsafe extern "C" {
    pub fn cef_post_data_create() -> *mut cef_post_data_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_post_data_element_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> ::std::os::raw::c_int,
    >,
    pub set_to_empty:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t)>,
    pub set_to_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t, fileName: *const cef_string_t),
    >,
    pub set_to_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *const ::std::os::raw::c_void,
        ),
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> cef_postdataelement_type_t,
    >,
    pub get_file: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> cef_string_userfree_t,
    >,
    pub get_bytes_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_post_data_element_t) -> usize>,
    pub get_bytes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_post_data_element_t,
            size: usize,
            bytes: *mut ::std::os::raw::c_void,
        ) -> usize,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_post_data_element_t"]
        [::std::mem::size_of::<_cef_post_data_element_t>() - 52usize];
    ["Alignment of _cef_post_data_element_t"]
        [::std::mem::align_of::<_cef_post_data_element_t>() - 4usize];
    ["Offset of field: _cef_post_data_element_t::base"]
        [::std::mem::offset_of!(_cef_post_data_element_t, base) - 0usize];
    ["Offset of field: _cef_post_data_element_t::is_read_only"]
        [::std::mem::offset_of!(_cef_post_data_element_t, is_read_only) - 20usize];
    ["Offset of field: _cef_post_data_element_t::set_to_empty"]
        [::std::mem::offset_of!(_cef_post_data_element_t, set_to_empty) - 24usize];
    ["Offset of field: _cef_post_data_element_t::set_to_file"]
        [::std::mem::offset_of!(_cef_post_data_element_t, set_to_file) - 28usize];
    ["Offset of field: _cef_post_data_element_t::set_to_bytes"]
        [::std::mem::offset_of!(_cef_post_data_element_t, set_to_bytes) - 32usize];
    ["Offset of field: _cef_post_data_element_t::get_type"]
        [::std::mem::offset_of!(_cef_post_data_element_t, get_type) - 36usize];
    ["Offset of field: _cef_post_data_element_t::get_file"]
        [::std::mem::offset_of!(_cef_post_data_element_t, get_file) - 40usize];
    ["Offset of field: _cef_post_data_element_t::get_bytes_count"]
        [::std::mem::offset_of!(_cef_post_data_element_t, get_bytes_count) - 44usize];
    ["Offset of field: _cef_post_data_element_t::get_bytes"]
        [::std::mem::offset_of!(_cef_post_data_element_t, get_bytes) - 48usize];
};
pub type cef_post_data_element_t = _cef_post_data_element_t;
unsafe extern "C" {
    pub fn cef_post_data_element_create() -> *mut cef_post_data_element_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_string_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_string_visitor_t, string: *const cef_string_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_string_visitor_t"][::std::mem::size_of::<_cef_string_visitor_t>() - 24usize];
    ["Alignment of _cef_string_visitor_t"]
        [::std::mem::align_of::<_cef_string_visitor_t>() - 4usize];
    ["Offset of field: _cef_string_visitor_t::base"]
        [::std::mem::offset_of!(_cef_string_visitor_t, base) - 0usize];
    ["Offset of field: _cef_string_visitor_t::visit"]
        [::std::mem::offset_of!(_cef_string_visitor_t, visit) - 20usize];
};
pub type cef_string_visitor_t = _cef_string_visitor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_frame_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    pub undo: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub redo: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub cut: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub copy: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub paste: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub del: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub select_all: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub view_source: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t)>,
    pub get_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t),
    >,
    pub get_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_string_visitor_t),
    >,
    pub load_request: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, request: *mut _cef_request_t),
    >,
    pub load_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, url: *const cef_string_t),
    >,
    pub execute_java_script: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int,
        ),
    >,
    pub is_main: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    pub is_focused: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> ::std::os::raw::c_int,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t,
    >,
    pub get_identifier:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> int64>,
    pub get_parent:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_frame_t>,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> cef_string_userfree_t,
    >,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_browser_t,
    >,
    pub get_v8context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t) -> *mut _cef_v8context_t,
    >,
    pub visit_dom: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_frame_t, visitor: *mut _cef_domvisitor_t),
    >,
    pub create_urlrequest: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            client: *mut _cef_urlrequest_client_t,
        ) -> *mut _cef_urlrequest_t,
    >,
    pub send_process_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_t,
            target_process: cef_process_id_t,
            message: *mut _cef_process_message_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_frame_t"][::std::mem::size_of::<_cef_frame_t>() - 120usize];
    ["Alignment of _cef_frame_t"][::std::mem::align_of::<_cef_frame_t>() - 4usize];
    ["Offset of field: _cef_frame_t::base"][::std::mem::offset_of!(_cef_frame_t, base) - 0usize];
    ["Offset of field: _cef_frame_t::is_valid"]
        [::std::mem::offset_of!(_cef_frame_t, is_valid) - 20usize];
    ["Offset of field: _cef_frame_t::undo"][::std::mem::offset_of!(_cef_frame_t, undo) - 24usize];
    ["Offset of field: _cef_frame_t::redo"][::std::mem::offset_of!(_cef_frame_t, redo) - 28usize];
    ["Offset of field: _cef_frame_t::cut"][::std::mem::offset_of!(_cef_frame_t, cut) - 32usize];
    ["Offset of field: _cef_frame_t::copy"][::std::mem::offset_of!(_cef_frame_t, copy) - 36usize];
    ["Offset of field: _cef_frame_t::paste"][::std::mem::offset_of!(_cef_frame_t, paste) - 40usize];
    ["Offset of field: _cef_frame_t::del"][::std::mem::offset_of!(_cef_frame_t, del) - 44usize];
    ["Offset of field: _cef_frame_t::select_all"]
        [::std::mem::offset_of!(_cef_frame_t, select_all) - 48usize];
    ["Offset of field: _cef_frame_t::view_source"]
        [::std::mem::offset_of!(_cef_frame_t, view_source) - 52usize];
    ["Offset of field: _cef_frame_t::get_source"]
        [::std::mem::offset_of!(_cef_frame_t, get_source) - 56usize];
    ["Offset of field: _cef_frame_t::get_text"]
        [::std::mem::offset_of!(_cef_frame_t, get_text) - 60usize];
    ["Offset of field: _cef_frame_t::load_request"]
        [::std::mem::offset_of!(_cef_frame_t, load_request) - 64usize];
    ["Offset of field: _cef_frame_t::load_url"]
        [::std::mem::offset_of!(_cef_frame_t, load_url) - 68usize];
    ["Offset of field: _cef_frame_t::execute_java_script"]
        [::std::mem::offset_of!(_cef_frame_t, execute_java_script) - 72usize];
    ["Offset of field: _cef_frame_t::is_main"]
        [::std::mem::offset_of!(_cef_frame_t, is_main) - 76usize];
    ["Offset of field: _cef_frame_t::is_focused"]
        [::std::mem::offset_of!(_cef_frame_t, is_focused) - 80usize];
    ["Offset of field: _cef_frame_t::get_name"]
        [::std::mem::offset_of!(_cef_frame_t, get_name) - 84usize];
    ["Offset of field: _cef_frame_t::get_identifier"]
        [::std::mem::offset_of!(_cef_frame_t, get_identifier) - 88usize];
    ["Offset of field: _cef_frame_t::get_parent"]
        [::std::mem::offset_of!(_cef_frame_t, get_parent) - 92usize];
    ["Offset of field: _cef_frame_t::get_url"]
        [::std::mem::offset_of!(_cef_frame_t, get_url) - 96usize];
    ["Offset of field: _cef_frame_t::get_browser"]
        [::std::mem::offset_of!(_cef_frame_t, get_browser) - 100usize];
    ["Offset of field: _cef_frame_t::get_v8context"]
        [::std::mem::offset_of!(_cef_frame_t, get_v8context) - 104usize];
    ["Offset of field: _cef_frame_t::visit_dom"]
        [::std::mem::offset_of!(_cef_frame_t, visit_dom) - 108usize];
    ["Offset of field: _cef_frame_t::create_urlrequest"]
        [::std::mem::offset_of!(_cef_frame_t, create_urlrequest) - 112usize];
    ["Offset of field: _cef_frame_t::send_process_message"]
        [::std::mem::offset_of!(_cef_frame_t, send_process_message) - 116usize];
};
pub type cef_frame_t = _cef_frame_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_x509cert_principal_t {
    pub base: cef_base_ref_counted_t,
    pub get_display_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_common_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_locality_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_state_or_province_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_country_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t) -> cef_string_userfree_t,
    >,
    pub get_street_addresses: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, addresses: cef_string_list_t),
    >,
    pub get_organization_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t),
    >,
    pub get_organization_unit_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, names: cef_string_list_t),
    >,
    pub get_domain_components: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509cert_principal_t, components: cef_string_list_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_x509cert_principal_t"]
        [::std::mem::size_of::<_cef_x509cert_principal_t>() - 56usize];
    ["Alignment of _cef_x509cert_principal_t"]
        [::std::mem::align_of::<_cef_x509cert_principal_t>() - 4usize];
    ["Offset of field: _cef_x509cert_principal_t::base"]
        [::std::mem::offset_of!(_cef_x509cert_principal_t, base) - 0usize];
    ["Offset of field: _cef_x509cert_principal_t::get_display_name"]
        [::std::mem::offset_of!(_cef_x509cert_principal_t, get_display_name) - 20usize];
    ["Offset of field: _cef_x509cert_principal_t::get_common_name"]
        [::std::mem::offset_of!(_cef_x509cert_principal_t, get_common_name) - 24usize];
    ["Offset of field: _cef_x509cert_principal_t::get_locality_name"]
        [::std::mem::offset_of!(_cef_x509cert_principal_t, get_locality_name) - 28usize];
    ["Offset of field: _cef_x509cert_principal_t::get_state_or_province_name"]
        [::std::mem::offset_of!(_cef_x509cert_principal_t, get_state_or_province_name) - 32usize];
    ["Offset of field: _cef_x509cert_principal_t::get_country_name"]
        [::std::mem::offset_of!(_cef_x509cert_principal_t, get_country_name) - 36usize];
    ["Offset of field: _cef_x509cert_principal_t::get_street_addresses"]
        [::std::mem::offset_of!(_cef_x509cert_principal_t, get_street_addresses) - 40usize];
    ["Offset of field: _cef_x509cert_principal_t::get_organization_names"]
        [::std::mem::offset_of!(_cef_x509cert_principal_t, get_organization_names) - 44usize];
    ["Offset of field: _cef_x509cert_principal_t::get_organization_unit_names"]
        [::std::mem::offset_of!(_cef_x509cert_principal_t, get_organization_unit_names) - 48usize];
    ["Offset of field: _cef_x509cert_principal_t::get_domain_components"]
        [::std::mem::offset_of!(_cef_x509cert_principal_t, get_domain_components) - 52usize];
};
pub type cef_x509cert_principal_t = _cef_x509cert_principal_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_x509certificate_t {
    pub base: cef_base_ref_counted_t,
    pub get_subject: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_x509cert_principal_t,
    >,
    pub get_issuer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_x509cert_principal_t,
    >,
    pub get_serial_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    pub get_valid_start: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> cef_time_t,
    >,
    pub get_valid_expiry: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> cef_time_t,
    >,
    pub get_derencoded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    pub get_pemencoded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> *mut _cef_binary_value_t,
    >,
    pub get_issuer_chain_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_x509certificate_t) -> usize>,
    pub get_derencoded_issuer_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t,
        ),
    >,
    pub get_pemencoded_issuer_chain: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_x509certificate_t,
            chainCount: *mut usize,
            chain: *mut *mut _cef_binary_value_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_x509certificate_t"][::std::mem::size_of::<_cef_x509certificate_t>() - 60usize];
    ["Alignment of _cef_x509certificate_t"]
        [::std::mem::align_of::<_cef_x509certificate_t>() - 4usize];
    ["Offset of field: _cef_x509certificate_t::base"]
        [::std::mem::offset_of!(_cef_x509certificate_t, base) - 0usize];
    ["Offset of field: _cef_x509certificate_t::get_subject"]
        [::std::mem::offset_of!(_cef_x509certificate_t, get_subject) - 20usize];
    ["Offset of field: _cef_x509certificate_t::get_issuer"]
        [::std::mem::offset_of!(_cef_x509certificate_t, get_issuer) - 24usize];
    ["Offset of field: _cef_x509certificate_t::get_serial_number"]
        [::std::mem::offset_of!(_cef_x509certificate_t, get_serial_number) - 28usize];
    ["Offset of field: _cef_x509certificate_t::get_valid_start"]
        [::std::mem::offset_of!(_cef_x509certificate_t, get_valid_start) - 32usize];
    ["Offset of field: _cef_x509certificate_t::get_valid_expiry"]
        [::std::mem::offset_of!(_cef_x509certificate_t, get_valid_expiry) - 36usize];
    ["Offset of field: _cef_x509certificate_t::get_derencoded"]
        [::std::mem::offset_of!(_cef_x509certificate_t, get_derencoded) - 40usize];
    ["Offset of field: _cef_x509certificate_t::get_pemencoded"]
        [::std::mem::offset_of!(_cef_x509certificate_t, get_pemencoded) - 44usize];
    ["Offset of field: _cef_x509certificate_t::get_issuer_chain_size"]
        [::std::mem::offset_of!(_cef_x509certificate_t, get_issuer_chain_size) - 48usize];
    ["Offset of field: _cef_x509certificate_t::get_derencoded_issuer_chain"]
        [::std::mem::offset_of!(_cef_x509certificate_t, get_derencoded_issuer_chain) - 52usize];
    ["Offset of field: _cef_x509certificate_t::get_pemencoded_issuer_chain"]
        [::std::mem::offset_of!(_cef_x509certificate_t, get_pemencoded_issuer_chain) - 56usize];
};
pub type cef_x509certificate_t = _cef_x509certificate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_sslstatus_t {
    pub base: cef_base_ref_counted_t,
    pub is_secure_connection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> ::std::os::raw::c_int,
    >,
    pub get_cert_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_cert_status_t,
    >,
    pub get_sslversion: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_version_t,
    >,
    pub get_content_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> cef_ssl_content_status_t,
    >,
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslstatus_t) -> *mut _cef_x509certificate_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_sslstatus_t"][::std::mem::size_of::<_cef_sslstatus_t>() - 40usize];
    ["Alignment of _cef_sslstatus_t"][::std::mem::align_of::<_cef_sslstatus_t>() - 4usize];
    ["Offset of field: _cef_sslstatus_t::base"]
        [::std::mem::offset_of!(_cef_sslstatus_t, base) - 0usize];
    ["Offset of field: _cef_sslstatus_t::is_secure_connection"]
        [::std::mem::offset_of!(_cef_sslstatus_t, is_secure_connection) - 20usize];
    ["Offset of field: _cef_sslstatus_t::get_cert_status"]
        [::std::mem::offset_of!(_cef_sslstatus_t, get_cert_status) - 24usize];
    ["Offset of field: _cef_sslstatus_t::get_sslversion"]
        [::std::mem::offset_of!(_cef_sslstatus_t, get_sslversion) - 28usize];
    ["Offset of field: _cef_sslstatus_t::get_content_status"]
        [::std::mem::offset_of!(_cef_sslstatus_t, get_content_status) - 32usize];
    ["Offset of field: _cef_sslstatus_t::get_x509certificate"]
        [::std::mem::offset_of!(_cef_sslstatus_t, get_x509certificate) - 36usize];
};
pub type cef_sslstatus_t = _cef_sslstatus_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_navigation_entry_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_display_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_original_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_string_userfree_t,
    >,
    pub get_transition_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_transition_type_t,
    >,
    pub has_post_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    pub get_completion_time: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> cef_time_t,
    >,
    pub get_http_status_code: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> ::std::os::raw::c_int,
    >,
    pub get_sslstatus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_navigation_entry_t) -> *mut _cef_sslstatus_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_navigation_entry_t"][::std::mem::size_of::<_cef_navigation_entry_t>() - 60usize];
    ["Alignment of _cef_navigation_entry_t"]
        [::std::mem::align_of::<_cef_navigation_entry_t>() - 4usize];
    ["Offset of field: _cef_navigation_entry_t::base"]
        [::std::mem::offset_of!(_cef_navigation_entry_t, base) - 0usize];
    ["Offset of field: _cef_navigation_entry_t::is_valid"]
        [::std::mem::offset_of!(_cef_navigation_entry_t, is_valid) - 20usize];
    ["Offset of field: _cef_navigation_entry_t::get_url"]
        [::std::mem::offset_of!(_cef_navigation_entry_t, get_url) - 24usize];
    ["Offset of field: _cef_navigation_entry_t::get_display_url"]
        [::std::mem::offset_of!(_cef_navigation_entry_t, get_display_url) - 28usize];
    ["Offset of field: _cef_navigation_entry_t::get_original_url"]
        [::std::mem::offset_of!(_cef_navigation_entry_t, get_original_url) - 32usize];
    ["Offset of field: _cef_navigation_entry_t::get_title"]
        [::std::mem::offset_of!(_cef_navigation_entry_t, get_title) - 36usize];
    ["Offset of field: _cef_navigation_entry_t::get_transition_type"]
        [::std::mem::offset_of!(_cef_navigation_entry_t, get_transition_type) - 40usize];
    ["Offset of field: _cef_navigation_entry_t::has_post_data"]
        [::std::mem::offset_of!(_cef_navigation_entry_t, has_post_data) - 44usize];
    ["Offset of field: _cef_navigation_entry_t::get_completion_time"]
        [::std::mem::offset_of!(_cef_navigation_entry_t, get_completion_time) - 48usize];
    ["Offset of field: _cef_navigation_entry_t::get_http_status_code"]
        [::std::mem::offset_of!(_cef_navigation_entry_t, get_http_status_code) - 52usize];
    ["Offset of field: _cef_navigation_entry_t::get_sslstatus"]
        [::std::mem::offset_of!(_cef_navigation_entry_t, get_sslstatus) - 56usize];
};
pub type cef_navigation_entry_t = _cef_navigation_entry_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_registration_t {
    pub base: cef_base_ref_counted_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_registration_t"][::std::mem::size_of::<_cef_registration_t>() - 20usize];
    ["Alignment of _cef_registration_t"][::std::mem::align_of::<_cef_registration_t>() - 4usize];
    ["Offset of field: _cef_registration_t::base"]
        [::std::mem::offset_of!(_cef_registration_t, base) - 0usize];
};
pub type cef_registration_t = _cef_registration_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_callback_t)>,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_callback_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_callback_t"][::std::mem::size_of::<_cef_callback_t>() - 28usize];
    ["Alignment of _cef_callback_t"][::std::mem::align_of::<_cef_callback_t>() - 4usize];
    ["Offset of field: _cef_callback_t::base"]
        [::std::mem::offset_of!(_cef_callback_t, base) - 0usize];
    ["Offset of field: _cef_callback_t::cont"]
        [::std::mem::offset_of!(_cef_callback_t, cont) - 20usize];
    ["Offset of field: _cef_callback_t::cancel"]
        [::std::mem::offset_of!(_cef_callback_t, cancel) - 24usize];
};
pub type cef_callback_t = _cef_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_completion_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_completion_callback_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_completion_callback_t"]
        [::std::mem::size_of::<_cef_completion_callback_t>() - 24usize];
    ["Alignment of _cef_completion_callback_t"]
        [::std::mem::align_of::<_cef_completion_callback_t>() - 4usize];
    ["Offset of field: _cef_completion_callback_t::base"]
        [::std::mem::offset_of!(_cef_completion_callback_t, base) - 0usize];
    ["Offset of field: _cef_completion_callback_t::on_complete"]
        [::std::mem::offset_of!(_cef_completion_callback_t, on_complete) - 20usize];
};
pub type cef_completion_callback_t = _cef_completion_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cookie_manager_t {
    pub base: cef_base_ref_counted_t,
    pub visit_all_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub visit_url_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            includeHttpOnly: ::std::os::raw::c_int,
            visitor: *mut _cef_cookie_visitor_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie: *const _cef_cookie_t,
            callback: *mut _cef_set_cookie_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_cookies: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            url: *const cef_string_t,
            cookie_name: *const cef_string_t,
            callback: *mut _cef_delete_cookies_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush_store: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_manager_t,
            callback: *mut _cef_completion_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_cookie_manager_t"][::std::mem::size_of::<_cef_cookie_manager_t>() - 40usize];
    ["Alignment of _cef_cookie_manager_t"]
        [::std::mem::align_of::<_cef_cookie_manager_t>() - 4usize];
    ["Offset of field: _cef_cookie_manager_t::base"]
        [::std::mem::offset_of!(_cef_cookie_manager_t, base) - 0usize];
    ["Offset of field: _cef_cookie_manager_t::visit_all_cookies"]
        [::std::mem::offset_of!(_cef_cookie_manager_t, visit_all_cookies) - 20usize];
    ["Offset of field: _cef_cookie_manager_t::visit_url_cookies"]
        [::std::mem::offset_of!(_cef_cookie_manager_t, visit_url_cookies) - 24usize];
    ["Offset of field: _cef_cookie_manager_t::set_cookie"]
        [::std::mem::offset_of!(_cef_cookie_manager_t, set_cookie) - 28usize];
    ["Offset of field: _cef_cookie_manager_t::delete_cookies"]
        [::std::mem::offset_of!(_cef_cookie_manager_t, delete_cookies) - 32usize];
    ["Offset of field: _cef_cookie_manager_t::flush_store"]
        [::std::mem::offset_of!(_cef_cookie_manager_t, flush_store) - 36usize];
};
pub type cef_cookie_manager_t = _cef_cookie_manager_t;
unsafe extern "C" {
    pub fn cef_cookie_manager_get_global_manager(
        callback: *mut _cef_completion_callback_t,
    ) -> *mut cef_cookie_manager_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cookie_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_visitor_t,
            cookie: *const _cef_cookie_t,
            count: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
            deleteCookie: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_cookie_visitor_t"][::std::mem::size_of::<_cef_cookie_visitor_t>() - 24usize];
    ["Alignment of _cef_cookie_visitor_t"]
        [::std::mem::align_of::<_cef_cookie_visitor_t>() - 4usize];
    ["Offset of field: _cef_cookie_visitor_t::base"]
        [::std::mem::offset_of!(_cef_cookie_visitor_t, base) - 0usize];
    ["Offset of field: _cef_cookie_visitor_t::visit"]
        [::std::mem::offset_of!(_cef_cookie_visitor_t, visit) - 20usize];
};
pub type cef_cookie_visitor_t = _cef_cookie_visitor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_set_cookie_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_set_cookie_callback_t,
            success: ::std::os::raw::c_int,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_set_cookie_callback_t"]
        [::std::mem::size_of::<_cef_set_cookie_callback_t>() - 24usize];
    ["Alignment of _cef_set_cookie_callback_t"]
        [::std::mem::align_of::<_cef_set_cookie_callback_t>() - 4usize];
    ["Offset of field: _cef_set_cookie_callback_t::base"]
        [::std::mem::offset_of!(_cef_set_cookie_callback_t, base) - 0usize];
    ["Offset of field: _cef_set_cookie_callback_t::on_complete"]
        [::std::mem::offset_of!(_cef_set_cookie_callback_t, on_complete) - 20usize];
};
pub type cef_set_cookie_callback_t = _cef_set_cookie_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_delete_cookies_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_delete_cookies_callback_t,
            num_deleted: ::std::os::raw::c_int,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_delete_cookies_callback_t"]
        [::std::mem::size_of::<_cef_delete_cookies_callback_t>() - 24usize];
    ["Alignment of _cef_delete_cookies_callback_t"]
        [::std::mem::align_of::<_cef_delete_cookies_callback_t>() - 4usize];
    ["Offset of field: _cef_delete_cookies_callback_t::base"]
        [::std::mem::offset_of!(_cef_delete_cookies_callback_t, base) - 0usize];
    ["Offset of field: _cef_delete_cookies_callback_t::on_complete"]
        [::std::mem::offset_of!(_cef_delete_cookies_callback_t, on_complete) - 20usize];
};
pub type cef_delete_cookies_callback_t = _cef_delete_cookies_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_extension_t {
    pub base: cef_base_ref_counted_t,
    pub get_identifier: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t,
    >,
    pub get_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> cef_string_userfree_t,
    >,
    pub get_manifest: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_dictionary_value_t,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_t,
            that: *mut _cef_extension_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_extension_handler_t,
    >,
    pub get_loader_context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> *mut _cef_request_context_t,
    >,
    pub is_loaded: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_t) -> ::std::os::raw::c_int,
    >,
    pub unload: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_extension_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_extension_t"][::std::mem::size_of::<_cef_extension_t>() - 52usize];
    ["Alignment of _cef_extension_t"][::std::mem::align_of::<_cef_extension_t>() - 4usize];
    ["Offset of field: _cef_extension_t::base"]
        [::std::mem::offset_of!(_cef_extension_t, base) - 0usize];
    ["Offset of field: _cef_extension_t::get_identifier"]
        [::std::mem::offset_of!(_cef_extension_t, get_identifier) - 20usize];
    ["Offset of field: _cef_extension_t::get_path"]
        [::std::mem::offset_of!(_cef_extension_t, get_path) - 24usize];
    ["Offset of field: _cef_extension_t::get_manifest"]
        [::std::mem::offset_of!(_cef_extension_t, get_manifest) - 28usize];
    ["Offset of field: _cef_extension_t::is_same"]
        [::std::mem::offset_of!(_cef_extension_t, is_same) - 32usize];
    ["Offset of field: _cef_extension_t::get_handler"]
        [::std::mem::offset_of!(_cef_extension_t, get_handler) - 36usize];
    ["Offset of field: _cef_extension_t::get_loader_context"]
        [::std::mem::offset_of!(_cef_extension_t, get_loader_context) - 40usize];
    ["Offset of field: _cef_extension_t::is_loaded"]
        [::std::mem::offset_of!(_cef_extension_t, is_loaded) - 44usize];
    ["Offset of field: _cef_extension_t::unload"]
        [::std::mem::offset_of!(_cef_extension_t, unload) - 48usize];
};
pub type cef_extension_t = _cef_extension_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_get_extension_resource_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_get_extension_resource_callback_t,
            stream: *mut _cef_stream_reader_t,
        ),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_get_extension_resource_callback_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_get_extension_resource_callback_t"]
        [::std::mem::size_of::<_cef_get_extension_resource_callback_t>() - 28usize];
    ["Alignment of _cef_get_extension_resource_callback_t"]
        [::std::mem::align_of::<_cef_get_extension_resource_callback_t>() - 4usize];
    ["Offset of field: _cef_get_extension_resource_callback_t::base"]
        [::std::mem::offset_of!(_cef_get_extension_resource_callback_t, base) - 0usize];
    ["Offset of field: _cef_get_extension_resource_callback_t::cont"]
        [::std::mem::offset_of!(_cef_get_extension_resource_callback_t, cont) - 20usize];
    ["Offset of field: _cef_get_extension_resource_callback_t::cancel"]
        [::std::mem::offset_of!(_cef_get_extension_resource_callback_t, cancel) - 24usize];
};
pub type cef_get_extension_resource_callback_t = _cef_get_extension_resource_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_extension_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_extension_load_failed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_extension_handler_t, result: cef_errorcode_t),
    >,
    pub on_extension_loaded: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
        ),
    >,
    pub on_extension_unloaded: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
        ),
    >,
    pub on_before_background_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            url: *const cef_string_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            active_browser: *mut _cef_browser_t,
            index: ::std::os::raw::c_int,
            url: *const cef_string_t,
            active: ::std::os::raw::c_int,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_active_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
        ) -> *mut _cef_browser_t,
    >,
    pub can_access_browser: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            include_incognito: ::std::os::raw::c_int,
            target_browser: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extension_resource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_extension_handler_t,
            extension: *mut _cef_extension_t,
            browser: *mut _cef_browser_t,
            file: *const cef_string_t,
            callback: *mut _cef_get_extension_resource_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_extension_handler_t"]
        [::std::mem::size_of::<_cef_extension_handler_t>() - 52usize];
    ["Alignment of _cef_extension_handler_t"]
        [::std::mem::align_of::<_cef_extension_handler_t>() - 4usize];
    ["Offset of field: _cef_extension_handler_t::base"]
        [::std::mem::offset_of!(_cef_extension_handler_t, base) - 0usize];
    ["Offset of field: _cef_extension_handler_t::on_extension_load_failed"]
        [::std::mem::offset_of!(_cef_extension_handler_t, on_extension_load_failed) - 20usize];
    ["Offset of field: _cef_extension_handler_t::on_extension_loaded"]
        [::std::mem::offset_of!(_cef_extension_handler_t, on_extension_loaded) - 24usize];
    ["Offset of field: _cef_extension_handler_t::on_extension_unloaded"]
        [::std::mem::offset_of!(_cef_extension_handler_t, on_extension_unloaded) - 28usize];
    ["Offset of field: _cef_extension_handler_t::on_before_background_browser"]
        [::std::mem::offset_of!(_cef_extension_handler_t, on_before_background_browser) - 32usize];
    ["Offset of field: _cef_extension_handler_t::on_before_browser"]
        [::std::mem::offset_of!(_cef_extension_handler_t, on_before_browser) - 36usize];
    ["Offset of field: _cef_extension_handler_t::get_active_browser"]
        [::std::mem::offset_of!(_cef_extension_handler_t, get_active_browser) - 40usize];
    ["Offset of field: _cef_extension_handler_t::can_access_browser"]
        [::std::mem::offset_of!(_cef_extension_handler_t, can_access_browser) - 44usize];
    ["Offset of field: _cef_extension_handler_t::get_extension_resource"]
        [::std::mem::offset_of!(_cef_extension_handler_t, get_extension_resource) - 48usize];
};
pub type cef_extension_handler_t = _cef_extension_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_router_t {
    pub base: cef_base_ref_counted_t,
    pub add_observer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_router_t,
            observer: *mut _cef_media_observer_t,
        ) -> *mut _cef_registration_t,
    >,
    pub get_source: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_router_t,
            urn: *const cef_string_t,
        ) -> *mut _cef_media_source_t,
    >,
    pub notify_current_sinks:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_router_t)>,
    pub create_route: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_router_t,
            source: *mut _cef_media_source_t,
            sink: *mut _cef_media_sink_t,
            callback: *mut _cef_media_route_create_callback_t,
        ),
    >,
    pub notify_current_routes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_router_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_media_router_t"][::std::mem::size_of::<_cef_media_router_t>() - 40usize];
    ["Alignment of _cef_media_router_t"][::std::mem::align_of::<_cef_media_router_t>() - 4usize];
    ["Offset of field: _cef_media_router_t::base"]
        [::std::mem::offset_of!(_cef_media_router_t, base) - 0usize];
    ["Offset of field: _cef_media_router_t::add_observer"]
        [::std::mem::offset_of!(_cef_media_router_t, add_observer) - 20usize];
    ["Offset of field: _cef_media_router_t::get_source"]
        [::std::mem::offset_of!(_cef_media_router_t, get_source) - 24usize];
    ["Offset of field: _cef_media_router_t::notify_current_sinks"]
        [::std::mem::offset_of!(_cef_media_router_t, notify_current_sinks) - 28usize];
    ["Offset of field: _cef_media_router_t::create_route"]
        [::std::mem::offset_of!(_cef_media_router_t, create_route) - 32usize];
    ["Offset of field: _cef_media_router_t::notify_current_routes"]
        [::std::mem::offset_of!(_cef_media_router_t, notify_current_routes) - 36usize];
};
pub type cef_media_router_t = _cef_media_router_t;
unsafe extern "C" {
    pub fn cef_media_router_get_global(
        callback: *mut _cef_completion_callback_t,
    ) -> *mut cef_media_router_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_observer_t {
    pub base: cef_base_ref_counted_t,
    pub on_sinks: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            sinksCount: usize,
            sinks: *const *mut _cef_media_sink_t,
        ),
    >,
    pub on_routes: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            routesCount: usize,
            routes: *const *mut _cef_media_route_t,
        ),
    >,
    pub on_route_state_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            route: *mut _cef_media_route_t,
            state: cef_media_route_connection_state_t,
        ),
    >,
    pub on_route_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_observer_t,
            route: *mut _cef_media_route_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_media_observer_t"][::std::mem::size_of::<_cef_media_observer_t>() - 36usize];
    ["Alignment of _cef_media_observer_t"]
        [::std::mem::align_of::<_cef_media_observer_t>() - 4usize];
    ["Offset of field: _cef_media_observer_t::base"]
        [::std::mem::offset_of!(_cef_media_observer_t, base) - 0usize];
    ["Offset of field: _cef_media_observer_t::on_sinks"]
        [::std::mem::offset_of!(_cef_media_observer_t, on_sinks) - 20usize];
    ["Offset of field: _cef_media_observer_t::on_routes"]
        [::std::mem::offset_of!(_cef_media_observer_t, on_routes) - 24usize];
    ["Offset of field: _cef_media_observer_t::on_route_state_changed"]
        [::std::mem::offset_of!(_cef_media_observer_t, on_route_state_changed) - 28usize];
    ["Offset of field: _cef_media_observer_t::on_route_message_received"]
        [::std::mem::offset_of!(_cef_media_observer_t, on_route_message_received) - 32usize];
};
pub type cef_media_observer_t = _cef_media_observer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_route_t {
    pub base: cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> cef_string_userfree_t,
    >,
    pub get_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> *mut _cef_media_source_t,
    >,
    pub get_sink: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_route_t) -> *mut _cef_media_sink_t,
    >,
    pub send_route_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_route_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ),
    >,
    pub terminate: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_media_route_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_media_route_t"][::std::mem::size_of::<_cef_media_route_t>() - 40usize];
    ["Alignment of _cef_media_route_t"][::std::mem::align_of::<_cef_media_route_t>() - 4usize];
    ["Offset of field: _cef_media_route_t::base"]
        [::std::mem::offset_of!(_cef_media_route_t, base) - 0usize];
    ["Offset of field: _cef_media_route_t::get_id"]
        [::std::mem::offset_of!(_cef_media_route_t, get_id) - 20usize];
    ["Offset of field: _cef_media_route_t::get_source"]
        [::std::mem::offset_of!(_cef_media_route_t, get_source) - 24usize];
    ["Offset of field: _cef_media_route_t::get_sink"]
        [::std::mem::offset_of!(_cef_media_route_t, get_sink) - 28usize];
    ["Offset of field: _cef_media_route_t::send_route_message"]
        [::std::mem::offset_of!(_cef_media_route_t, send_route_message) - 32usize];
    ["Offset of field: _cef_media_route_t::terminate"]
        [::std::mem::offset_of!(_cef_media_route_t, terminate) - 36usize];
};
pub type cef_media_route_t = _cef_media_route_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_route_create_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_media_route_create_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_route_create_callback_t,
            result: cef_media_route_create_result_t,
            error: *const cef_string_t,
            route: *mut _cef_media_route_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_media_route_create_callback_t"]
        [::std::mem::size_of::<_cef_media_route_create_callback_t>() - 24usize];
    ["Alignment of _cef_media_route_create_callback_t"]
        [::std::mem::align_of::<_cef_media_route_create_callback_t>() - 4usize];
    ["Offset of field: _cef_media_route_create_callback_t::base"]
        [::std::mem::offset_of!(_cef_media_route_create_callback_t, base) - 0usize];
    ["Offset of field: _cef_media_route_create_callback_t::on_media_route_create_finished"][::std::mem::offset_of!(
        _cef_media_route_create_callback_t,
        on_media_route_create_finished
    )
        - 20usize];
};
pub type cef_media_route_create_callback_t = _cef_media_route_create_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_sink_t {
    pub base: cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t,
    >,
    pub get_description: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_string_userfree_t,
    >,
    pub get_icon_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> cef_media_sink_icon_type_t,
    >,
    pub get_device_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_sink_t,
            callback: *mut _cef_media_sink_device_info_callback_t,
        ),
    >,
    pub is_cast_sink: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> ::std::os::raw::c_int,
    >,
    pub is_dial_sink: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_sink_t) -> ::std::os::raw::c_int,
    >,
    pub is_compatible_with: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_sink_t,
            source: *mut _cef_media_source_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_media_sink_t"][::std::mem::size_of::<_cef_media_sink_t>() - 52usize];
    ["Alignment of _cef_media_sink_t"][::std::mem::align_of::<_cef_media_sink_t>() - 4usize];
    ["Offset of field: _cef_media_sink_t::base"]
        [::std::mem::offset_of!(_cef_media_sink_t, base) - 0usize];
    ["Offset of field: _cef_media_sink_t::get_id"]
        [::std::mem::offset_of!(_cef_media_sink_t, get_id) - 20usize];
    ["Offset of field: _cef_media_sink_t::get_name"]
        [::std::mem::offset_of!(_cef_media_sink_t, get_name) - 24usize];
    ["Offset of field: _cef_media_sink_t::get_description"]
        [::std::mem::offset_of!(_cef_media_sink_t, get_description) - 28usize];
    ["Offset of field: _cef_media_sink_t::get_icon_type"]
        [::std::mem::offset_of!(_cef_media_sink_t, get_icon_type) - 32usize];
    ["Offset of field: _cef_media_sink_t::get_device_info"]
        [::std::mem::offset_of!(_cef_media_sink_t, get_device_info) - 36usize];
    ["Offset of field: _cef_media_sink_t::is_cast_sink"]
        [::std::mem::offset_of!(_cef_media_sink_t, is_cast_sink) - 40usize];
    ["Offset of field: _cef_media_sink_t::is_dial_sink"]
        [::std::mem::offset_of!(_cef_media_sink_t, is_dial_sink) - 44usize];
    ["Offset of field: _cef_media_sink_t::is_compatible_with"]
        [::std::mem::offset_of!(_cef_media_sink_t, is_compatible_with) - 48usize];
};
pub type cef_media_sink_t = _cef_media_sink_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_sink_device_info_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_media_sink_device_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_media_sink_device_info_callback_t,
            device_info: *const _cef_media_sink_device_info_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_media_sink_device_info_callback_t"]
        [::std::mem::size_of::<_cef_media_sink_device_info_callback_t>() - 24usize];
    ["Alignment of _cef_media_sink_device_info_callback_t"]
        [::std::mem::align_of::<_cef_media_sink_device_info_callback_t>() - 4usize];
    ["Offset of field: _cef_media_sink_device_info_callback_t::base"]
        [::std::mem::offset_of!(_cef_media_sink_device_info_callback_t, base) - 0usize];
    ["Offset of field: _cef_media_sink_device_info_callback_t::on_media_sink_device_info"][::std::mem::offset_of!(
        _cef_media_sink_device_info_callback_t,
        on_media_sink_device_info
    )
        - 20usize];
};
pub type cef_media_sink_device_info_callback_t = _cef_media_sink_device_info_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_media_source_t {
    pub base: cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> cef_string_userfree_t,
    >,
    pub is_cast_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> ::std::os::raw::c_int,
    >,
    pub is_dial_source: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_media_source_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_media_source_t"][::std::mem::size_of::<_cef_media_source_t>() - 32usize];
    ["Alignment of _cef_media_source_t"][::std::mem::align_of::<_cef_media_source_t>() - 4usize];
    ["Offset of field: _cef_media_source_t::base"]
        [::std::mem::offset_of!(_cef_media_source_t, base) - 0usize];
    ["Offset of field: _cef_media_source_t::get_id"]
        [::std::mem::offset_of!(_cef_media_source_t, get_id) - 20usize];
    ["Offset of field: _cef_media_source_t::is_cast_source"]
        [::std::mem::offset_of!(_cef_media_source_t, is_cast_source) - 24usize];
    ["Offset of field: _cef_media_source_t::is_dial_source"]
        [::std::mem::offset_of!(_cef_media_source_t, is_dial_source) - 28usize];
};
pub type cef_media_source_t = _cef_media_source_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_context_handler_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resolve_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_resolve_completed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resolve_callback_t,
            result: cef_errorcode_t,
            resolved_ips: cef_string_list_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_resolve_callback_t"][::std::mem::size_of::<_cef_resolve_callback_t>() - 24usize];
    ["Alignment of _cef_resolve_callback_t"]
        [::std::mem::align_of::<_cef_resolve_callback_t>() - 4usize];
    ["Offset of field: _cef_resolve_callback_t::base"]
        [::std::mem::offset_of!(_cef_resolve_callback_t, base) - 0usize];
    ["Offset of field: _cef_resolve_callback_t::on_resolve_completed"]
        [::std::mem::offset_of!(_cef_resolve_callback_t, on_resolve_completed) - 20usize];
};
pub type cef_resolve_callback_t = _cef_resolve_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_context_t {
    pub base: cef_base_ref_counted_t,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_sharing_with: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            other: *mut _cef_request_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_global: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int,
    >,
    pub get_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
        ) -> *mut _cef_request_context_handler_t,
    >,
    pub get_cache_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> cef_string_userfree_t,
    >,
    pub get_cookie_manager: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ) -> *mut _cef_cookie_manager_t,
    >,
    pub register_scheme_handler_factory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            scheme_name: *const cef_string_t,
            domain_name: *const cef_string_t,
            factory: *mut _cef_scheme_handler_factory_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clear_scheme_handler_factories: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_context_t) -> ::std::os::raw::c_int,
    >,
    pub has_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> *mut _cef_value_t,
    >,
    pub get_all_preferences: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            include_defaults: ::std::os::raw::c_int,
        ) -> *mut _cef_dictionary_value_t,
    >,
    pub can_set_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_preference: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            name: *const cef_string_t,
            value: *mut _cef_value_t,
            error: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub clear_certificate_exceptions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub clear_http_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub close_all_connections: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ),
    >,
    pub resolve_host: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            origin: *const cef_string_t,
            callback: *mut _cef_resolve_callback_t,
        ),
    >,
    pub load_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            root_directory: *const cef_string_t,
            manifest: *mut _cef_dictionary_value_t,
            handler: *mut _cef_extension_handler_t,
        ),
    >,
    pub did_load_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extensions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_ids: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            extension_id: *const cef_string_t,
        ) -> *mut _cef_extension_t,
    >,
    pub get_media_router: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_context_t,
            callback: *mut _cef_completion_callback_t,
        ) -> *mut _cef_media_router_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_request_context_t"][::std::mem::size_of::<_cef_request_context_t>() - 112usize];
    ["Alignment of _cef_request_context_t"]
        [::std::mem::align_of::<_cef_request_context_t>() - 4usize];
    ["Offset of field: _cef_request_context_t::base"]
        [::std::mem::offset_of!(_cef_request_context_t, base) - 0usize];
    ["Offset of field: _cef_request_context_t::is_same"]
        [::std::mem::offset_of!(_cef_request_context_t, is_same) - 20usize];
    ["Offset of field: _cef_request_context_t::is_sharing_with"]
        [::std::mem::offset_of!(_cef_request_context_t, is_sharing_with) - 24usize];
    ["Offset of field: _cef_request_context_t::is_global"]
        [::std::mem::offset_of!(_cef_request_context_t, is_global) - 28usize];
    ["Offset of field: _cef_request_context_t::get_handler"]
        [::std::mem::offset_of!(_cef_request_context_t, get_handler) - 32usize];
    ["Offset of field: _cef_request_context_t::get_cache_path"]
        [::std::mem::offset_of!(_cef_request_context_t, get_cache_path) - 36usize];
    ["Offset of field: _cef_request_context_t::get_cookie_manager"]
        [::std::mem::offset_of!(_cef_request_context_t, get_cookie_manager) - 40usize];
    ["Offset of field: _cef_request_context_t::register_scheme_handler_factory"]
        [::std::mem::offset_of!(_cef_request_context_t, register_scheme_handler_factory) - 44usize];
    ["Offset of field: _cef_request_context_t::clear_scheme_handler_factories"]
        [::std::mem::offset_of!(_cef_request_context_t, clear_scheme_handler_factories) - 48usize];
    ["Offset of field: _cef_request_context_t::has_preference"]
        [::std::mem::offset_of!(_cef_request_context_t, has_preference) - 52usize];
    ["Offset of field: _cef_request_context_t::get_preference"]
        [::std::mem::offset_of!(_cef_request_context_t, get_preference) - 56usize];
    ["Offset of field: _cef_request_context_t::get_all_preferences"]
        [::std::mem::offset_of!(_cef_request_context_t, get_all_preferences) - 60usize];
    ["Offset of field: _cef_request_context_t::can_set_preference"]
        [::std::mem::offset_of!(_cef_request_context_t, can_set_preference) - 64usize];
    ["Offset of field: _cef_request_context_t::set_preference"]
        [::std::mem::offset_of!(_cef_request_context_t, set_preference) - 68usize];
    ["Offset of field: _cef_request_context_t::clear_certificate_exceptions"]
        [::std::mem::offset_of!(_cef_request_context_t, clear_certificate_exceptions) - 72usize];
    ["Offset of field: _cef_request_context_t::clear_http_auth_credentials"]
        [::std::mem::offset_of!(_cef_request_context_t, clear_http_auth_credentials) - 76usize];
    ["Offset of field: _cef_request_context_t::close_all_connections"]
        [::std::mem::offset_of!(_cef_request_context_t, close_all_connections) - 80usize];
    ["Offset of field: _cef_request_context_t::resolve_host"]
        [::std::mem::offset_of!(_cef_request_context_t, resolve_host) - 84usize];
    ["Offset of field: _cef_request_context_t::load_extension"]
        [::std::mem::offset_of!(_cef_request_context_t, load_extension) - 88usize];
    ["Offset of field: _cef_request_context_t::did_load_extension"]
        [::std::mem::offset_of!(_cef_request_context_t, did_load_extension) - 92usize];
    ["Offset of field: _cef_request_context_t::has_extension"]
        [::std::mem::offset_of!(_cef_request_context_t, has_extension) - 96usize];
    ["Offset of field: _cef_request_context_t::get_extensions"]
        [::std::mem::offset_of!(_cef_request_context_t, get_extensions) - 100usize];
    ["Offset of field: _cef_request_context_t::get_extension"]
        [::std::mem::offset_of!(_cef_request_context_t, get_extension) - 104usize];
    ["Offset of field: _cef_request_context_t::get_media_router"]
        [::std::mem::offset_of!(_cef_request_context_t, get_media_router) - 108usize];
};
pub type cef_request_context_t = _cef_request_context_t;
unsafe extern "C" {
    pub fn cef_request_context_get_global_context() -> *mut cef_request_context_t;
}
unsafe extern "C" {
    pub fn cef_request_context_create_context(
        settings: *const _cef_request_context_settings_t,
        handler: *mut _cef_request_context_handler_t,
    ) -> *mut cef_request_context_t;
}
unsafe extern "C" {
    pub fn cef_create_context_shared(
        other: *mut cef_request_context_t,
        handler: *mut _cef_request_context_handler_t,
    ) -> *mut cef_request_context_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub get_host: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_browser_host_t,
    >,
    pub can_go_back: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub go_back: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub can_go_forward: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub go_forward: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub is_loading: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub reload: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub reload_ignore_cache:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub stop_load: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t)>,
    pub get_identifier: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            that: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_popup: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub has_document: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> ::std::os::raw::c_int,
    >,
    pub get_main_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t,
    >,
    pub get_focused_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t) -> *mut _cef_frame_t,
    >,
    pub get_frame_byident: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t, identifier: int64) -> *mut _cef_frame_t,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            name: *const cef_string_t,
        ) -> *mut _cef_frame_t,
    >,
    pub get_frame_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_t) -> usize>,
    pub get_frame_identifiers: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_t,
            identifiersCount: *mut usize,
            identifiers: *mut int64,
        ),
    >,
    pub get_frame_names: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_t, names: cef_string_list_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_browser_t"][::std::mem::size_of::<_cef_browser_t>() - 104usize];
    ["Alignment of _cef_browser_t"][::std::mem::align_of::<_cef_browser_t>() - 4usize];
    ["Offset of field: _cef_browser_t::base"]
        [::std::mem::offset_of!(_cef_browser_t, base) - 0usize];
    ["Offset of field: _cef_browser_t::is_valid"]
        [::std::mem::offset_of!(_cef_browser_t, is_valid) - 20usize];
    ["Offset of field: _cef_browser_t::get_host"]
        [::std::mem::offset_of!(_cef_browser_t, get_host) - 24usize];
    ["Offset of field: _cef_browser_t::can_go_back"]
        [::std::mem::offset_of!(_cef_browser_t, can_go_back) - 28usize];
    ["Offset of field: _cef_browser_t::go_back"]
        [::std::mem::offset_of!(_cef_browser_t, go_back) - 32usize];
    ["Offset of field: _cef_browser_t::can_go_forward"]
        [::std::mem::offset_of!(_cef_browser_t, can_go_forward) - 36usize];
    ["Offset of field: _cef_browser_t::go_forward"]
        [::std::mem::offset_of!(_cef_browser_t, go_forward) - 40usize];
    ["Offset of field: _cef_browser_t::is_loading"]
        [::std::mem::offset_of!(_cef_browser_t, is_loading) - 44usize];
    ["Offset of field: _cef_browser_t::reload"]
        [::std::mem::offset_of!(_cef_browser_t, reload) - 48usize];
    ["Offset of field: _cef_browser_t::reload_ignore_cache"]
        [::std::mem::offset_of!(_cef_browser_t, reload_ignore_cache) - 52usize];
    ["Offset of field: _cef_browser_t::stop_load"]
        [::std::mem::offset_of!(_cef_browser_t, stop_load) - 56usize];
    ["Offset of field: _cef_browser_t::get_identifier"]
        [::std::mem::offset_of!(_cef_browser_t, get_identifier) - 60usize];
    ["Offset of field: _cef_browser_t::is_same"]
        [::std::mem::offset_of!(_cef_browser_t, is_same) - 64usize];
    ["Offset of field: _cef_browser_t::is_popup"]
        [::std::mem::offset_of!(_cef_browser_t, is_popup) - 68usize];
    ["Offset of field: _cef_browser_t::has_document"]
        [::std::mem::offset_of!(_cef_browser_t, has_document) - 72usize];
    ["Offset of field: _cef_browser_t::get_main_frame"]
        [::std::mem::offset_of!(_cef_browser_t, get_main_frame) - 76usize];
    ["Offset of field: _cef_browser_t::get_focused_frame"]
        [::std::mem::offset_of!(_cef_browser_t, get_focused_frame) - 80usize];
    ["Offset of field: _cef_browser_t::get_frame_byident"]
        [::std::mem::offset_of!(_cef_browser_t, get_frame_byident) - 84usize];
    ["Offset of field: _cef_browser_t::get_frame"]
        [::std::mem::offset_of!(_cef_browser_t, get_frame) - 88usize];
    ["Offset of field: _cef_browser_t::get_frame_count"]
        [::std::mem::offset_of!(_cef_browser_t, get_frame_count) - 92usize];
    ["Offset of field: _cef_browser_t::get_frame_identifiers"]
        [::std::mem::offset_of!(_cef_browser_t, get_frame_identifiers) - 96usize];
    ["Offset of field: _cef_browser_t::get_frame_names"]
        [::std::mem::offset_of!(_cef_browser_t, get_frame_names) - 100usize];
};
pub type cef_browser_t = _cef_browser_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_run_file_dialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_file_dialog_dismissed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_run_file_dialog_callback_t,
            selected_accept_filter: ::std::os::raw::c_int,
            file_paths: cef_string_list_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_run_file_dialog_callback_t"]
        [::std::mem::size_of::<_cef_run_file_dialog_callback_t>() - 24usize];
    ["Alignment of _cef_run_file_dialog_callback_t"]
        [::std::mem::align_of::<_cef_run_file_dialog_callback_t>() - 4usize];
    ["Offset of field: _cef_run_file_dialog_callback_t::base"]
        [::std::mem::offset_of!(_cef_run_file_dialog_callback_t, base) - 0usize];
    ["Offset of field: _cef_run_file_dialog_callback_t::on_file_dialog_dismissed"][::std::mem::offset_of!(
        _cef_run_file_dialog_callback_t,
        on_file_dialog_dismissed
    ) - 20usize];
};
pub type cef_run_file_dialog_callback_t = _cef_run_file_dialog_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_navigation_entry_visitor_t {
    pub base: cef_base_ref_counted_t,
    pub visit: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_navigation_entry_visitor_t,
            entry: *mut _cef_navigation_entry_t,
            current: ::std::os::raw::c_int,
            index: ::std::os::raw::c_int,
            total: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_navigation_entry_visitor_t"]
        [::std::mem::size_of::<_cef_navigation_entry_visitor_t>() - 24usize];
    ["Alignment of _cef_navigation_entry_visitor_t"]
        [::std::mem::align_of::<_cef_navigation_entry_visitor_t>() - 4usize];
    ["Offset of field: _cef_navigation_entry_visitor_t::base"]
        [::std::mem::offset_of!(_cef_navigation_entry_visitor_t, base) - 0usize];
    ["Offset of field: _cef_navigation_entry_visitor_t::visit"]
        [::std::mem::offset_of!(_cef_navigation_entry_visitor_t, visit) - 20usize];
};
pub type cef_navigation_entry_visitor_t = _cef_navigation_entry_visitor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_pdf_print_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_pdf_print_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_pdf_print_callback_t,
            path: *const cef_string_t,
            ok: ::std::os::raw::c_int,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_pdf_print_callback_t"]
        [::std::mem::size_of::<_cef_pdf_print_callback_t>() - 24usize];
    ["Alignment of _cef_pdf_print_callback_t"]
        [::std::mem::align_of::<_cef_pdf_print_callback_t>() - 4usize];
    ["Offset of field: _cef_pdf_print_callback_t::base"]
        [::std::mem::offset_of!(_cef_pdf_print_callback_t, base) - 0usize];
    ["Offset of field: _cef_pdf_print_callback_t::on_pdf_print_finished"]
        [::std::mem::offset_of!(_cef_pdf_print_callback_t, on_pdf_print_finished) - 20usize];
};
pub type cef_pdf_print_callback_t = _cef_pdf_print_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_download_image_callback_t {
    pub base: cef_base_ref_counted_t,
    pub on_download_image_finished: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_image_callback_t,
            image_url: *const cef_string_t,
            http_status_code: ::std::os::raw::c_int,
            image: *mut _cef_image_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_download_image_callback_t"]
        [::std::mem::size_of::<_cef_download_image_callback_t>() - 24usize];
    ["Alignment of _cef_download_image_callback_t"]
        [::std::mem::align_of::<_cef_download_image_callback_t>() - 4usize];
    ["Offset of field: _cef_download_image_callback_t::base"]
        [::std::mem::offset_of!(_cef_download_image_callback_t, base) - 0usize];
    ["Offset of field: _cef_download_image_callback_t::on_download_image_finished"][::std::mem::offset_of!(
        _cef_download_image_callback_t,
        on_download_image_finished
    ) - 20usize];
};
pub type cef_download_image_callback_t = _cef_download_image_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_host_t {
    pub base: cef_base_ref_counted_t,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_browser_t,
    >,
    pub close_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, force_close: ::std::os::raw::c_int),
    >,
    pub try_close_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub set_focus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, focus: ::std::os::raw::c_int),
    >,
    pub get_window_handle: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_ulong,
    >,
    pub get_opener_window_handle: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_ulong,
    >,
    pub has_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub get_client: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_client_t,
    >,
    pub get_request_context: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_request_context_t,
    >,
    pub get_zoom_level:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> f64>,
    pub set_zoom_level: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, zoomLevel: f64),
    >,
    pub run_file_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            mode: cef_file_dialog_mode_t,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            selected_accept_filter: ::std::os::raw::c_int,
            callback: *mut _cef_run_file_dialog_callback_t,
        ),
    >,
    pub start_download: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, url: *const cef_string_t),
    >,
    pub download_image: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            image_url: *const cef_string_t,
            is_favicon: ::std::os::raw::c_int,
            max_image_size: uint32,
            bypass_cache: ::std::os::raw::c_int,
            callback: *mut _cef_download_image_callback_t,
        ),
    >,
    pub print: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub print_to_pdf: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            path: *const cef_string_t,
            settings: *const _cef_pdf_print_settings_t,
            callback: *mut _cef_pdf_print_callback_t,
        ),
    >,
    pub find: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            searchText: *const cef_string_t,
            forward: ::std::os::raw::c_int,
            matchCase: ::std::os::raw::c_int,
            findNext: ::std::os::raw::c_int,
        ),
    >,
    pub stop_finding: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            clearSelection: ::std::os::raw::c_int,
        ),
    >,
    pub show_dev_tools: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            windowInfo: *const _cef_window_info_t,
            client: *mut _cef_client_t,
            settings: *const _cef_browser_settings_t,
            inspect_element_at: *const cef_point_t,
        ),
    >,
    pub close_dev_tools:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub has_dev_tools: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub send_dev_tools_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            message: *const ::std::os::raw::c_void,
            message_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub execute_dev_tools_method: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            message_id: ::std::os::raw::c_int,
            method: *const cef_string_t,
            params: *mut _cef_dictionary_value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_dev_tools_message_observer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            observer: *mut _cef_dev_tools_message_observer_t,
        ) -> *mut _cef_registration_t,
    >,
    pub get_navigation_entries: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            visitor: *mut _cef_navigation_entry_visitor_t,
            current_only: ::std::os::raw::c_int,
        ),
    >,
    pub replace_misspelling: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t),
    >,
    pub add_word_to_dictionary: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, word: *const cef_string_t),
    >,
    pub is_window_rendering_disabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub was_resized: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub was_hidden: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, hidden: ::std::os::raw::c_int),
    >,
    pub notify_screen_info_changed:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub invalidate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, type_: cef_paint_element_type_t),
    >,
    pub send_external_begin_frame:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub send_key_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const _cef_key_event_t),
    >,
    pub send_mouse_click_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            type_: cef_mouse_button_type_t,
            mouseUp: ::std::os::raw::c_int,
            clickCount: ::std::os::raw::c_int,
        ),
    >,
    pub send_mouse_move_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            mouseLeave: ::std::os::raw::c_int,
        ),
    >,
    pub send_mouse_wheel_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            deltaX: ::std::os::raw::c_int,
            deltaY: ::std::os::raw::c_int,
        ),
    >,
    pub send_touch_event: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const _cef_touch_event_t),
    >,
    pub send_capture_lost_event:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub notify_move_or_resize_started:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub get_windowless_frame_rate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub set_windowless_frame_rate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, frame_rate: ::std::os::raw::c_int),
    >,
    pub ime_set_composition: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            underlinesCount: usize,
            underlines: *const cef_composition_underline_t,
            replacement_range: *const cef_range_t,
            selection_range: *const cef_range_t,
        ),
    >,
    pub ime_commit_text: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            text: *const cef_string_t,
            replacement_range: *const cef_range_t,
            relative_cursor_pos: ::std::os::raw::c_int,
        ),
    >,
    pub ime_finish_composing_text: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            keep_selection: ::std::os::raw::c_int,
        ),
    >,
    pub ime_cancel_composition:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub drag_target_drag_enter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            drag_data: *mut _cef_drag_data_t,
            event: *const _cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t,
        ),
    >,
    pub drag_target_drag_over: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            event: *const _cef_mouse_event_t,
            allowed_ops: cef_drag_operations_mask_t,
        ),
    >,
    pub drag_target_drag_leave:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub drag_target_drop: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, event: *const _cef_mouse_event_t),
    >,
    pub drag_source_ended_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            op: cef_drag_operations_mask_t,
        ),
    >,
    pub drag_source_system_drag_ended:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_host_t)>,
    pub get_visible_navigation_entry: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_navigation_entry_t,
    >,
    pub set_accessibility_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, accessibility_state: cef_state_t),
    >,
    pub set_auto_resize_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_host_t,
            enabled: ::std::os::raw::c_int,
            min_size: *const cef_size_t,
            max_size: *const cef_size_t,
        ),
    >,
    pub get_extension: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> *mut _cef_extension_t,
    >,
    pub is_background_host: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
    pub set_audio_muted: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t, mute: ::std::os::raw::c_int),
    >,
    pub is_audio_muted: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_host_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_browser_host_t"][::std::mem::size_of::<_cef_browser_host_t>() - 256usize];
    ["Alignment of _cef_browser_host_t"][::std::mem::align_of::<_cef_browser_host_t>() - 4usize];
    ["Offset of field: _cef_browser_host_t::base"]
        [::std::mem::offset_of!(_cef_browser_host_t, base) - 0usize];
    ["Offset of field: _cef_browser_host_t::get_browser"]
        [::std::mem::offset_of!(_cef_browser_host_t, get_browser) - 20usize];
    ["Offset of field: _cef_browser_host_t::close_browser"]
        [::std::mem::offset_of!(_cef_browser_host_t, close_browser) - 24usize];
    ["Offset of field: _cef_browser_host_t::try_close_browser"]
        [::std::mem::offset_of!(_cef_browser_host_t, try_close_browser) - 28usize];
    ["Offset of field: _cef_browser_host_t::set_focus"]
        [::std::mem::offset_of!(_cef_browser_host_t, set_focus) - 32usize];
    ["Offset of field: _cef_browser_host_t::get_window_handle"]
        [::std::mem::offset_of!(_cef_browser_host_t, get_window_handle) - 36usize];
    ["Offset of field: _cef_browser_host_t::get_opener_window_handle"]
        [::std::mem::offset_of!(_cef_browser_host_t, get_opener_window_handle) - 40usize];
    ["Offset of field: _cef_browser_host_t::has_view"]
        [::std::mem::offset_of!(_cef_browser_host_t, has_view) - 44usize];
    ["Offset of field: _cef_browser_host_t::get_client"]
        [::std::mem::offset_of!(_cef_browser_host_t, get_client) - 48usize];
    ["Offset of field: _cef_browser_host_t::get_request_context"]
        [::std::mem::offset_of!(_cef_browser_host_t, get_request_context) - 52usize];
    ["Offset of field: _cef_browser_host_t::get_zoom_level"]
        [::std::mem::offset_of!(_cef_browser_host_t, get_zoom_level) - 56usize];
    ["Offset of field: _cef_browser_host_t::set_zoom_level"]
        [::std::mem::offset_of!(_cef_browser_host_t, set_zoom_level) - 60usize];
    ["Offset of field: _cef_browser_host_t::run_file_dialog"]
        [::std::mem::offset_of!(_cef_browser_host_t, run_file_dialog) - 64usize];
    ["Offset of field: _cef_browser_host_t::start_download"]
        [::std::mem::offset_of!(_cef_browser_host_t, start_download) - 68usize];
    ["Offset of field: _cef_browser_host_t::download_image"]
        [::std::mem::offset_of!(_cef_browser_host_t, download_image) - 72usize];
    ["Offset of field: _cef_browser_host_t::print"]
        [::std::mem::offset_of!(_cef_browser_host_t, print) - 76usize];
    ["Offset of field: _cef_browser_host_t::print_to_pdf"]
        [::std::mem::offset_of!(_cef_browser_host_t, print_to_pdf) - 80usize];
    ["Offset of field: _cef_browser_host_t::find"]
        [::std::mem::offset_of!(_cef_browser_host_t, find) - 84usize];
    ["Offset of field: _cef_browser_host_t::stop_finding"]
        [::std::mem::offset_of!(_cef_browser_host_t, stop_finding) - 88usize];
    ["Offset of field: _cef_browser_host_t::show_dev_tools"]
        [::std::mem::offset_of!(_cef_browser_host_t, show_dev_tools) - 92usize];
    ["Offset of field: _cef_browser_host_t::close_dev_tools"]
        [::std::mem::offset_of!(_cef_browser_host_t, close_dev_tools) - 96usize];
    ["Offset of field: _cef_browser_host_t::has_dev_tools"]
        [::std::mem::offset_of!(_cef_browser_host_t, has_dev_tools) - 100usize];
    ["Offset of field: _cef_browser_host_t::send_dev_tools_message"]
        [::std::mem::offset_of!(_cef_browser_host_t, send_dev_tools_message) - 104usize];
    ["Offset of field: _cef_browser_host_t::execute_dev_tools_method"]
        [::std::mem::offset_of!(_cef_browser_host_t, execute_dev_tools_method) - 108usize];
    ["Offset of field: _cef_browser_host_t::add_dev_tools_message_observer"]
        [::std::mem::offset_of!(_cef_browser_host_t, add_dev_tools_message_observer) - 112usize];
    ["Offset of field: _cef_browser_host_t::get_navigation_entries"]
        [::std::mem::offset_of!(_cef_browser_host_t, get_navigation_entries) - 116usize];
    ["Offset of field: _cef_browser_host_t::replace_misspelling"]
        [::std::mem::offset_of!(_cef_browser_host_t, replace_misspelling) - 120usize];
    ["Offset of field: _cef_browser_host_t::add_word_to_dictionary"]
        [::std::mem::offset_of!(_cef_browser_host_t, add_word_to_dictionary) - 124usize];
    ["Offset of field: _cef_browser_host_t::is_window_rendering_disabled"]
        [::std::mem::offset_of!(_cef_browser_host_t, is_window_rendering_disabled) - 128usize];
    ["Offset of field: _cef_browser_host_t::was_resized"]
        [::std::mem::offset_of!(_cef_browser_host_t, was_resized) - 132usize];
    ["Offset of field: _cef_browser_host_t::was_hidden"]
        [::std::mem::offset_of!(_cef_browser_host_t, was_hidden) - 136usize];
    ["Offset of field: _cef_browser_host_t::notify_screen_info_changed"]
        [::std::mem::offset_of!(_cef_browser_host_t, notify_screen_info_changed) - 140usize];
    ["Offset of field: _cef_browser_host_t::invalidate"]
        [::std::mem::offset_of!(_cef_browser_host_t, invalidate) - 144usize];
    ["Offset of field: _cef_browser_host_t::send_external_begin_frame"]
        [::std::mem::offset_of!(_cef_browser_host_t, send_external_begin_frame) - 148usize];
    ["Offset of field: _cef_browser_host_t::send_key_event"]
        [::std::mem::offset_of!(_cef_browser_host_t, send_key_event) - 152usize];
    ["Offset of field: _cef_browser_host_t::send_mouse_click_event"]
        [::std::mem::offset_of!(_cef_browser_host_t, send_mouse_click_event) - 156usize];
    ["Offset of field: _cef_browser_host_t::send_mouse_move_event"]
        [::std::mem::offset_of!(_cef_browser_host_t, send_mouse_move_event) - 160usize];
    ["Offset of field: _cef_browser_host_t::send_mouse_wheel_event"]
        [::std::mem::offset_of!(_cef_browser_host_t, send_mouse_wheel_event) - 164usize];
    ["Offset of field: _cef_browser_host_t::send_touch_event"]
        [::std::mem::offset_of!(_cef_browser_host_t, send_touch_event) - 168usize];
    ["Offset of field: _cef_browser_host_t::send_capture_lost_event"]
        [::std::mem::offset_of!(_cef_browser_host_t, send_capture_lost_event) - 172usize];
    ["Offset of field: _cef_browser_host_t::notify_move_or_resize_started"]
        [::std::mem::offset_of!(_cef_browser_host_t, notify_move_or_resize_started) - 176usize];
    ["Offset of field: _cef_browser_host_t::get_windowless_frame_rate"]
        [::std::mem::offset_of!(_cef_browser_host_t, get_windowless_frame_rate) - 180usize];
    ["Offset of field: _cef_browser_host_t::set_windowless_frame_rate"]
        [::std::mem::offset_of!(_cef_browser_host_t, set_windowless_frame_rate) - 184usize];
    ["Offset of field: _cef_browser_host_t::ime_set_composition"]
        [::std::mem::offset_of!(_cef_browser_host_t, ime_set_composition) - 188usize];
    ["Offset of field: _cef_browser_host_t::ime_commit_text"]
        [::std::mem::offset_of!(_cef_browser_host_t, ime_commit_text) - 192usize];
    ["Offset of field: _cef_browser_host_t::ime_finish_composing_text"]
        [::std::mem::offset_of!(_cef_browser_host_t, ime_finish_composing_text) - 196usize];
    ["Offset of field: _cef_browser_host_t::ime_cancel_composition"]
        [::std::mem::offset_of!(_cef_browser_host_t, ime_cancel_composition) - 200usize];
    ["Offset of field: _cef_browser_host_t::drag_target_drag_enter"]
        [::std::mem::offset_of!(_cef_browser_host_t, drag_target_drag_enter) - 204usize];
    ["Offset of field: _cef_browser_host_t::drag_target_drag_over"]
        [::std::mem::offset_of!(_cef_browser_host_t, drag_target_drag_over) - 208usize];
    ["Offset of field: _cef_browser_host_t::drag_target_drag_leave"]
        [::std::mem::offset_of!(_cef_browser_host_t, drag_target_drag_leave) - 212usize];
    ["Offset of field: _cef_browser_host_t::drag_target_drop"]
        [::std::mem::offset_of!(_cef_browser_host_t, drag_target_drop) - 216usize];
    ["Offset of field: _cef_browser_host_t::drag_source_ended_at"]
        [::std::mem::offset_of!(_cef_browser_host_t, drag_source_ended_at) - 220usize];
    ["Offset of field: _cef_browser_host_t::drag_source_system_drag_ended"]
        [::std::mem::offset_of!(_cef_browser_host_t, drag_source_system_drag_ended) - 224usize];
    ["Offset of field: _cef_browser_host_t::get_visible_navigation_entry"]
        [::std::mem::offset_of!(_cef_browser_host_t, get_visible_navigation_entry) - 228usize];
    ["Offset of field: _cef_browser_host_t::set_accessibility_state"]
        [::std::mem::offset_of!(_cef_browser_host_t, set_accessibility_state) - 232usize];
    ["Offset of field: _cef_browser_host_t::set_auto_resize_enabled"]
        [::std::mem::offset_of!(_cef_browser_host_t, set_auto_resize_enabled) - 236usize];
    ["Offset of field: _cef_browser_host_t::get_extension"]
        [::std::mem::offset_of!(_cef_browser_host_t, get_extension) - 240usize];
    ["Offset of field: _cef_browser_host_t::is_background_host"]
        [::std::mem::offset_of!(_cef_browser_host_t, is_background_host) - 244usize];
    ["Offset of field: _cef_browser_host_t::set_audio_muted"]
        [::std::mem::offset_of!(_cef_browser_host_t, set_audio_muted) - 248usize];
    ["Offset of field: _cef_browser_host_t::is_audio_muted"]
        [::std::mem::offset_of!(_cef_browser_host_t, is_audio_muted) - 252usize];
};
pub type cef_browser_host_t = _cef_browser_host_t;
unsafe extern "C" {
    pub fn cef_browser_host_create_browser(
        windowInfo: *const cef_window_info_t,
        client: *mut _cef_client_t,
        url: *const cef_string_t,
        settings: *const _cef_browser_settings_t,
        extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_browser_host_create_browser_sync(
        windowInfo: *const cef_window_info_t,
        client: *mut _cef_client_t,
        url: *const cef_string_t,
        settings: *const _cef_browser_settings_t,
        extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t,
    ) -> *mut cef_browser_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_audio_handler_t {
    pub base: cef_base_ref_counted_t,
    pub get_audio_parameters: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            params: *mut cef_audio_parameters_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_audio_stream_started: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            params: *const cef_audio_parameters_t,
            channels: ::std::os::raw::c_int,
        ),
    >,
    pub on_audio_stream_packet: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            data: *mut *const f32,
            frames: ::std::os::raw::c_int,
            pts: int64,
        ),
    >,
    pub on_audio_stream_stopped: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_audio_handler_t, browser: *mut _cef_browser_t),
    >,
    pub on_audio_stream_error: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_audio_handler_t,
            browser: *mut _cef_browser_t,
            message: *const cef_string_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_audio_handler_t"][::std::mem::size_of::<_cef_audio_handler_t>() - 40usize];
    ["Alignment of _cef_audio_handler_t"][::std::mem::align_of::<_cef_audio_handler_t>() - 4usize];
    ["Offset of field: _cef_audio_handler_t::base"]
        [::std::mem::offset_of!(_cef_audio_handler_t, base) - 0usize];
    ["Offset of field: _cef_audio_handler_t::get_audio_parameters"]
        [::std::mem::offset_of!(_cef_audio_handler_t, get_audio_parameters) - 20usize];
    ["Offset of field: _cef_audio_handler_t::on_audio_stream_started"]
        [::std::mem::offset_of!(_cef_audio_handler_t, on_audio_stream_started) - 24usize];
    ["Offset of field: _cef_audio_handler_t::on_audio_stream_packet"]
        [::std::mem::offset_of!(_cef_audio_handler_t, on_audio_stream_packet) - 28usize];
    ["Offset of field: _cef_audio_handler_t::on_audio_stream_stopped"]
        [::std::mem::offset_of!(_cef_audio_handler_t, on_audio_stream_stopped) - 32usize];
    ["Offset of field: _cef_audio_handler_t::on_audio_stream_error"]
        [::std::mem::offset_of!(_cef_audio_handler_t, on_audio_stream_error) - 36usize];
};
pub type cef_audio_handler_t = _cef_audio_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_command_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_chrome_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_handler_t,
            browser: *mut _cef_browser_t,
            command_id: ::std::os::raw::c_int,
            disposition: cef_window_open_disposition_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_command_handler_t"][::std::mem::size_of::<_cef_command_handler_t>() - 24usize];
    ["Alignment of _cef_command_handler_t"]
        [::std::mem::align_of::<_cef_command_handler_t>() - 4usize];
    ["Offset of field: _cef_command_handler_t::base"]
        [::std::mem::offset_of!(_cef_command_handler_t, base) - 0usize];
    ["Offset of field: _cef_command_handler_t::on_chrome_command"]
        [::std::mem::offset_of!(_cef_command_handler_t, on_chrome_command) - 20usize];
};
pub type cef_command_handler_t = _cef_command_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_model_delegate_t {
    pub base: cef_base_ref_counted_t,
    pub execute_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t,
        ),
    >,
    pub mouse_outside_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            screen_point: *const cef_point_t,
        ),
    >,
    pub unhandled_open_submenu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            is_rtl: ::std::os::raw::c_int,
        ),
    >,
    pub unhandled_close_submenu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            is_rtl: ::std::os::raw::c_int,
        ),
    >,
    pub menu_will_show: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
        ),
    >,
    pub menu_closed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
        ),
    >,
    pub format_label: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_delegate_t,
            menu_model: *mut _cef_menu_model_t,
            label: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_menu_model_delegate_t"]
        [::std::mem::size_of::<_cef_menu_model_delegate_t>() - 48usize];
    ["Alignment of _cef_menu_model_delegate_t"]
        [::std::mem::align_of::<_cef_menu_model_delegate_t>() - 4usize];
    ["Offset of field: _cef_menu_model_delegate_t::base"]
        [::std::mem::offset_of!(_cef_menu_model_delegate_t, base) - 0usize];
    ["Offset of field: _cef_menu_model_delegate_t::execute_command"]
        [::std::mem::offset_of!(_cef_menu_model_delegate_t, execute_command) - 20usize];
    ["Offset of field: _cef_menu_model_delegate_t::mouse_outside_menu"]
        [::std::mem::offset_of!(_cef_menu_model_delegate_t, mouse_outside_menu) - 24usize];
    ["Offset of field: _cef_menu_model_delegate_t::unhandled_open_submenu"]
        [::std::mem::offset_of!(_cef_menu_model_delegate_t, unhandled_open_submenu) - 28usize];
    ["Offset of field: _cef_menu_model_delegate_t::unhandled_close_submenu"]
        [::std::mem::offset_of!(_cef_menu_model_delegate_t, unhandled_close_submenu) - 32usize];
    ["Offset of field: _cef_menu_model_delegate_t::menu_will_show"]
        [::std::mem::offset_of!(_cef_menu_model_delegate_t, menu_will_show) - 36usize];
    ["Offset of field: _cef_menu_model_delegate_t::menu_closed"]
        [::std::mem::offset_of!(_cef_menu_model_delegate_t, menu_closed) - 40usize];
    ["Offset of field: _cef_menu_model_delegate_t::format_label"]
        [::std::mem::offset_of!(_cef_menu_model_delegate_t, format_label) - 44usize];
};
pub type cef_menu_model_delegate_t = _cef_menu_model_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_model_t {
    pub base: cef_base_ref_counted_t,
    pub is_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub get_count: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub add_separator: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_menu_model_t) -> ::std::os::raw::c_int,
    >,
    pub add_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_check_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_radio_item: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> *mut _cef_menu_model_t,
    >,
    pub insert_separator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_check_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_radio_item_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub insert_sub_menu_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> *mut _cef_menu_model_t,
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_index_of: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_command_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_command_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_label: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> cef_string_userfree_t,
    >,
    pub get_label_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> cef_string_userfree_t,
    >,
    pub set_label: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_label_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            label: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> cef_menu_item_type_t,
    >,
    pub get_type_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> cef_menu_item_type_t,
    >,
    pub get_group_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_group_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_group_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_group_id_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            group_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_sub_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> *mut _cef_menu_model_t,
    >,
    pub get_sub_menu_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_menu_model_t,
    >,
    pub is_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_visible_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_visible: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            visible: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_visible_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            visible: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_enabled_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            enabled: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_enabled_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            enabled: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_checked: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_checked_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_checked: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            checked: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_checked_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            checked: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub remove_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_accelerator_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            key_code: *mut ::std::os::raw::c_int,
            shift_pressed: *mut ::std::os::raw::c_int,
            ctrl_pressed: *mut ::std::os::raw::c_int,
            alt_pressed: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_color_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: *mut cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_color_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            color_type: cef_menu_color_type_t,
            color: *mut cef_color_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_font_list: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            command_id: ::std::os::raw::c_int,
            font_list: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_font_list_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_model_t,
            index: ::std::os::raw::c_int,
            font_list: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_menu_model_t"][::std::mem::size_of::<_cef_menu_model_t>() - 244usize];
    ["Alignment of _cef_menu_model_t"][::std::mem::align_of::<_cef_menu_model_t>() - 4usize];
    ["Offset of field: _cef_menu_model_t::base"]
        [::std::mem::offset_of!(_cef_menu_model_t, base) - 0usize];
    ["Offset of field: _cef_menu_model_t::is_sub_menu"]
        [::std::mem::offset_of!(_cef_menu_model_t, is_sub_menu) - 20usize];
    ["Offset of field: _cef_menu_model_t::clear"]
        [::std::mem::offset_of!(_cef_menu_model_t, clear) - 24usize];
    ["Offset of field: _cef_menu_model_t::get_count"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_count) - 28usize];
    ["Offset of field: _cef_menu_model_t::add_separator"]
        [::std::mem::offset_of!(_cef_menu_model_t, add_separator) - 32usize];
    ["Offset of field: _cef_menu_model_t::add_item"]
        [::std::mem::offset_of!(_cef_menu_model_t, add_item) - 36usize];
    ["Offset of field: _cef_menu_model_t::add_check_item"]
        [::std::mem::offset_of!(_cef_menu_model_t, add_check_item) - 40usize];
    ["Offset of field: _cef_menu_model_t::add_radio_item"]
        [::std::mem::offset_of!(_cef_menu_model_t, add_radio_item) - 44usize];
    ["Offset of field: _cef_menu_model_t::add_sub_menu"]
        [::std::mem::offset_of!(_cef_menu_model_t, add_sub_menu) - 48usize];
    ["Offset of field: _cef_menu_model_t::insert_separator_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, insert_separator_at) - 52usize];
    ["Offset of field: _cef_menu_model_t::insert_item_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, insert_item_at) - 56usize];
    ["Offset of field: _cef_menu_model_t::insert_check_item_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, insert_check_item_at) - 60usize];
    ["Offset of field: _cef_menu_model_t::insert_radio_item_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, insert_radio_item_at) - 64usize];
    ["Offset of field: _cef_menu_model_t::insert_sub_menu_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, insert_sub_menu_at) - 68usize];
    ["Offset of field: _cef_menu_model_t::remove"]
        [::std::mem::offset_of!(_cef_menu_model_t, remove) - 72usize];
    ["Offset of field: _cef_menu_model_t::remove_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, remove_at) - 76usize];
    ["Offset of field: _cef_menu_model_t::get_index_of"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_index_of) - 80usize];
    ["Offset of field: _cef_menu_model_t::get_command_id_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_command_id_at) - 84usize];
    ["Offset of field: _cef_menu_model_t::set_command_id_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_command_id_at) - 88usize];
    ["Offset of field: _cef_menu_model_t::get_label"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_label) - 92usize];
    ["Offset of field: _cef_menu_model_t::get_label_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_label_at) - 96usize];
    ["Offset of field: _cef_menu_model_t::set_label"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_label) - 100usize];
    ["Offset of field: _cef_menu_model_t::set_label_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_label_at) - 104usize];
    ["Offset of field: _cef_menu_model_t::get_type"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_type) - 108usize];
    ["Offset of field: _cef_menu_model_t::get_type_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_type_at) - 112usize];
    ["Offset of field: _cef_menu_model_t::get_group_id"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_group_id) - 116usize];
    ["Offset of field: _cef_menu_model_t::get_group_id_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_group_id_at) - 120usize];
    ["Offset of field: _cef_menu_model_t::set_group_id"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_group_id) - 124usize];
    ["Offset of field: _cef_menu_model_t::set_group_id_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_group_id_at) - 128usize];
    ["Offset of field: _cef_menu_model_t::get_sub_menu"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_sub_menu) - 132usize];
    ["Offset of field: _cef_menu_model_t::get_sub_menu_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_sub_menu_at) - 136usize];
    ["Offset of field: _cef_menu_model_t::is_visible"]
        [::std::mem::offset_of!(_cef_menu_model_t, is_visible) - 140usize];
    ["Offset of field: _cef_menu_model_t::is_visible_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, is_visible_at) - 144usize];
    ["Offset of field: _cef_menu_model_t::set_visible"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_visible) - 148usize];
    ["Offset of field: _cef_menu_model_t::set_visible_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_visible_at) - 152usize];
    ["Offset of field: _cef_menu_model_t::is_enabled"]
        [::std::mem::offset_of!(_cef_menu_model_t, is_enabled) - 156usize];
    ["Offset of field: _cef_menu_model_t::is_enabled_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, is_enabled_at) - 160usize];
    ["Offset of field: _cef_menu_model_t::set_enabled"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_enabled) - 164usize];
    ["Offset of field: _cef_menu_model_t::set_enabled_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_enabled_at) - 168usize];
    ["Offset of field: _cef_menu_model_t::is_checked"]
        [::std::mem::offset_of!(_cef_menu_model_t, is_checked) - 172usize];
    ["Offset of field: _cef_menu_model_t::is_checked_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, is_checked_at) - 176usize];
    ["Offset of field: _cef_menu_model_t::set_checked"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_checked) - 180usize];
    ["Offset of field: _cef_menu_model_t::set_checked_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_checked_at) - 184usize];
    ["Offset of field: _cef_menu_model_t::has_accelerator"]
        [::std::mem::offset_of!(_cef_menu_model_t, has_accelerator) - 188usize];
    ["Offset of field: _cef_menu_model_t::has_accelerator_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, has_accelerator_at) - 192usize];
    ["Offset of field: _cef_menu_model_t::set_accelerator"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_accelerator) - 196usize];
    ["Offset of field: _cef_menu_model_t::set_accelerator_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_accelerator_at) - 200usize];
    ["Offset of field: _cef_menu_model_t::remove_accelerator"]
        [::std::mem::offset_of!(_cef_menu_model_t, remove_accelerator) - 204usize];
    ["Offset of field: _cef_menu_model_t::remove_accelerator_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, remove_accelerator_at) - 208usize];
    ["Offset of field: _cef_menu_model_t::get_accelerator"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_accelerator) - 212usize];
    ["Offset of field: _cef_menu_model_t::get_accelerator_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_accelerator_at) - 216usize];
    ["Offset of field: _cef_menu_model_t::set_color"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_color) - 220usize];
    ["Offset of field: _cef_menu_model_t::set_color_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_color_at) - 224usize];
    ["Offset of field: _cef_menu_model_t::get_color"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_color) - 228usize];
    ["Offset of field: _cef_menu_model_t::get_color_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, get_color_at) - 232usize];
    ["Offset of field: _cef_menu_model_t::set_font_list"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_font_list) - 236usize];
    ["Offset of field: _cef_menu_model_t::set_font_list_at"]
        [::std::mem::offset_of!(_cef_menu_model_t, set_font_list_at) - 240usize];
};
pub type cef_menu_model_t = _cef_menu_model_t;
unsafe extern "C" {
    pub fn cef_menu_model_create(
        delegate: *mut _cef_menu_model_delegate_t,
    ) -> *mut cef_menu_model_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_run_context_menu_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_run_context_menu_callback_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t,
        ),
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_run_context_menu_callback_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_run_context_menu_callback_t"]
        [::std::mem::size_of::<_cef_run_context_menu_callback_t>() - 28usize];
    ["Alignment of _cef_run_context_menu_callback_t"]
        [::std::mem::align_of::<_cef_run_context_menu_callback_t>() - 4usize];
    ["Offset of field: _cef_run_context_menu_callback_t::base"]
        [::std::mem::offset_of!(_cef_run_context_menu_callback_t, base) - 0usize];
    ["Offset of field: _cef_run_context_menu_callback_t::cont"]
        [::std::mem::offset_of!(_cef_run_context_menu_callback_t, cont) - 20usize];
    ["Offset of field: _cef_run_context_menu_callback_t::cancel"]
        [::std::mem::offset_of!(_cef_run_context_menu_callback_t, cancel) - 24usize];
};
pub type cef_run_context_menu_callback_t = _cef_run_context_menu_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_context_menu_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_context_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t,
        ),
    >,
    pub run_context_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            model: *mut _cef_menu_model_t,
            callback: *mut _cef_run_context_menu_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_context_menu_command: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            params: *mut _cef_context_menu_params_t,
            command_id: ::std::os::raw::c_int,
            event_flags: cef_event_flags_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_context_menu_dismissed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_context_menu_handler_t"]
        [::std::mem::size_of::<_cef_context_menu_handler_t>() - 36usize];
    ["Alignment of _cef_context_menu_handler_t"]
        [::std::mem::align_of::<_cef_context_menu_handler_t>() - 4usize];
    ["Offset of field: _cef_context_menu_handler_t::base"]
        [::std::mem::offset_of!(_cef_context_menu_handler_t, base) - 0usize];
    ["Offset of field: _cef_context_menu_handler_t::on_before_context_menu"]
        [::std::mem::offset_of!(_cef_context_menu_handler_t, on_before_context_menu) - 20usize];
    ["Offset of field: _cef_context_menu_handler_t::run_context_menu"]
        [::std::mem::offset_of!(_cef_context_menu_handler_t, run_context_menu) - 24usize];
    ["Offset of field: _cef_context_menu_handler_t::on_context_menu_command"]
        [::std::mem::offset_of!(_cef_context_menu_handler_t, on_context_menu_command) - 28usize];
    ["Offset of field: _cef_context_menu_handler_t::on_context_menu_dismissed"]
        [::std::mem::offset_of!(_cef_context_menu_handler_t, on_context_menu_dismissed) - 32usize];
};
pub type cef_context_menu_handler_t = _cef_context_menu_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_context_menu_params_t {
    pub base: cef_base_ref_counted_t,
    pub get_xcoord: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_ycoord: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_type_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_type_flags_t,
    >,
    pub get_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_unfiltered_link_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_source_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub has_image_contents: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_title_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_page_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_frame_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_frame_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_media_type: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_media_type_t,
    >,
    pub get_media_state_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_media_state_flags_t,
    >,
    pub get_selection_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_misspelled_word: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> cef_string_userfree_t,
    >,
    pub get_dictionary_suggestions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
            suggestions: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub is_editable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub is_spell_check_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
    pub get_edit_state_flags: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_context_menu_params_t,
        ) -> cef_context_menu_edit_state_flags_t,
    >,
    pub is_custom_menu: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_context_menu_params_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_context_menu_params_t"]
        [::std::mem::size_of::<_cef_context_menu_params_t>() - 100usize];
    ["Alignment of _cef_context_menu_params_t"]
        [::std::mem::align_of::<_cef_context_menu_params_t>() - 4usize];
    ["Offset of field: _cef_context_menu_params_t::base"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, base) - 0usize];
    ["Offset of field: _cef_context_menu_params_t::get_xcoord"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_xcoord) - 20usize];
    ["Offset of field: _cef_context_menu_params_t::get_ycoord"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_ycoord) - 24usize];
    ["Offset of field: _cef_context_menu_params_t::get_type_flags"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_type_flags) - 28usize];
    ["Offset of field: _cef_context_menu_params_t::get_link_url"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_link_url) - 32usize];
    ["Offset of field: _cef_context_menu_params_t::get_unfiltered_link_url"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_unfiltered_link_url) - 36usize];
    ["Offset of field: _cef_context_menu_params_t::get_source_url"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_source_url) - 40usize];
    ["Offset of field: _cef_context_menu_params_t::has_image_contents"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, has_image_contents) - 44usize];
    ["Offset of field: _cef_context_menu_params_t::get_title_text"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_title_text) - 48usize];
    ["Offset of field: _cef_context_menu_params_t::get_page_url"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_page_url) - 52usize];
    ["Offset of field: _cef_context_menu_params_t::get_frame_url"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_frame_url) - 56usize];
    ["Offset of field: _cef_context_menu_params_t::get_frame_charset"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_frame_charset) - 60usize];
    ["Offset of field: _cef_context_menu_params_t::get_media_type"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_media_type) - 64usize];
    ["Offset of field: _cef_context_menu_params_t::get_media_state_flags"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_media_state_flags) - 68usize];
    ["Offset of field: _cef_context_menu_params_t::get_selection_text"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_selection_text) - 72usize];
    ["Offset of field: _cef_context_menu_params_t::get_misspelled_word"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_misspelled_word) - 76usize];
    ["Offset of field: _cef_context_menu_params_t::get_dictionary_suggestions"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_dictionary_suggestions) - 80usize];
    ["Offset of field: _cef_context_menu_params_t::is_editable"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, is_editable) - 84usize];
    ["Offset of field: _cef_context_menu_params_t::is_spell_check_enabled"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, is_spell_check_enabled) - 88usize];
    ["Offset of field: _cef_context_menu_params_t::get_edit_state_flags"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, get_edit_state_flags) - 92usize];
    ["Offset of field: _cef_context_menu_params_t::is_custom_menu"]
        [::std::mem::offset_of!(_cef_context_menu_params_t, is_custom_menu) - 96usize];
};
pub type cef_context_menu_params_t = _cef_context_menu_params_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_file_dialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_file_dialog_callback_t,
            selected_accept_filter: ::std::os::raw::c_int,
            file_paths: cef_string_list_t,
        ),
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_file_dialog_callback_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_file_dialog_callback_t"]
        [::std::mem::size_of::<_cef_file_dialog_callback_t>() - 28usize];
    ["Alignment of _cef_file_dialog_callback_t"]
        [::std::mem::align_of::<_cef_file_dialog_callback_t>() - 4usize];
    ["Offset of field: _cef_file_dialog_callback_t::base"]
        [::std::mem::offset_of!(_cef_file_dialog_callback_t, base) - 0usize];
    ["Offset of field: _cef_file_dialog_callback_t::cont"]
        [::std::mem::offset_of!(_cef_file_dialog_callback_t, cont) - 20usize];
    ["Offset of field: _cef_file_dialog_callback_t::cancel"]
        [::std::mem::offset_of!(_cef_file_dialog_callback_t, cancel) - 24usize];
};
pub type cef_file_dialog_callback_t = _cef_file_dialog_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_dialog_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_file_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_dialog_handler_t,
            browser: *mut _cef_browser_t,
            mode: cef_file_dialog_mode_t,
            title: *const cef_string_t,
            default_file_path: *const cef_string_t,
            accept_filters: cef_string_list_t,
            selected_accept_filter: ::std::os::raw::c_int,
            callback: *mut _cef_file_dialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_dialog_handler_t"][::std::mem::size_of::<_cef_dialog_handler_t>() - 24usize];
    ["Alignment of _cef_dialog_handler_t"]
        [::std::mem::align_of::<_cef_dialog_handler_t>() - 4usize];
    ["Offset of field: _cef_dialog_handler_t::base"]
        [::std::mem::offset_of!(_cef_dialog_handler_t, base) - 0usize];
    ["Offset of field: _cef_dialog_handler_t::on_file_dialog"]
        [::std::mem::offset_of!(_cef_dialog_handler_t, on_file_dialog) - 20usize];
};
pub type cef_dialog_handler_t = _cef_dialog_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_display_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_address_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            url: *const cef_string_t,
        ),
    >,
    pub on_title_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            title: *const cef_string_t,
        ),
    >,
    pub on_favicon_urlchange: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            icon_urls: cef_string_list_t,
        ),
    >,
    pub on_fullscreen_mode_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            fullscreen: ::std::os::raw::c_int,
        ),
    >,
    pub on_tooltip: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            text: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_status_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            value: *const cef_string_t,
        ),
    >,
    pub on_console_message: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            level: cef_log_severity_t,
            message: *const cef_string_t,
            source: *const cef_string_t,
            line: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_auto_resize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            new_size: *const cef_size_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_loading_progress_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            progress: f64,
        ),
    >,
    pub on_cursor_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_display_handler_t,
            browser: *mut _cef_browser_t,
            cursor: ::std::os::raw::c_ulong,
            type_: cef_cursor_type_t,
            custom_cursor_info: *const _cef_cursor_info_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_display_handler_t"][::std::mem::size_of::<_cef_display_handler_t>() - 60usize];
    ["Alignment of _cef_display_handler_t"]
        [::std::mem::align_of::<_cef_display_handler_t>() - 4usize];
    ["Offset of field: _cef_display_handler_t::base"]
        [::std::mem::offset_of!(_cef_display_handler_t, base) - 0usize];
    ["Offset of field: _cef_display_handler_t::on_address_change"]
        [::std::mem::offset_of!(_cef_display_handler_t, on_address_change) - 20usize];
    ["Offset of field: _cef_display_handler_t::on_title_change"]
        [::std::mem::offset_of!(_cef_display_handler_t, on_title_change) - 24usize];
    ["Offset of field: _cef_display_handler_t::on_favicon_urlchange"]
        [::std::mem::offset_of!(_cef_display_handler_t, on_favicon_urlchange) - 28usize];
    ["Offset of field: _cef_display_handler_t::on_fullscreen_mode_change"]
        [::std::mem::offset_of!(_cef_display_handler_t, on_fullscreen_mode_change) - 32usize];
    ["Offset of field: _cef_display_handler_t::on_tooltip"]
        [::std::mem::offset_of!(_cef_display_handler_t, on_tooltip) - 36usize];
    ["Offset of field: _cef_display_handler_t::on_status_message"]
        [::std::mem::offset_of!(_cef_display_handler_t, on_status_message) - 40usize];
    ["Offset of field: _cef_display_handler_t::on_console_message"]
        [::std::mem::offset_of!(_cef_display_handler_t, on_console_message) - 44usize];
    ["Offset of field: _cef_display_handler_t::on_auto_resize"]
        [::std::mem::offset_of!(_cef_display_handler_t, on_auto_resize) - 48usize];
    ["Offset of field: _cef_display_handler_t::on_loading_progress_change"]
        [::std::mem::offset_of!(_cef_display_handler_t, on_loading_progress_change) - 52usize];
    ["Offset of field: _cef_display_handler_t::on_cursor_change"]
        [::std::mem::offset_of!(_cef_display_handler_t, on_cursor_change) - 56usize];
};
pub type cef_display_handler_t = _cef_display_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_download_item_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub is_in_progress: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub is_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub is_canceled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub get_current_speed:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> int64>,
    pub get_percent_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> ::std::os::raw::c_int,
    >,
    pub get_total_bytes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> int64>,
    pub get_received_bytes:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> int64>,
    pub get_start_time:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_time_t>,
    pub get_end_time:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_time_t>,
    pub get_full_path: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_id:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> uint32>,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_original_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_suggested_file_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_content_disposition: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
    pub get_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_download_item_t) -> cef_string_userfree_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_download_item_t"][::std::mem::size_of::<_cef_download_item_t>() - 88usize];
    ["Alignment of _cef_download_item_t"][::std::mem::align_of::<_cef_download_item_t>() - 4usize];
    ["Offset of field: _cef_download_item_t::base"]
        [::std::mem::offset_of!(_cef_download_item_t, base) - 0usize];
    ["Offset of field: _cef_download_item_t::is_valid"]
        [::std::mem::offset_of!(_cef_download_item_t, is_valid) - 20usize];
    ["Offset of field: _cef_download_item_t::is_in_progress"]
        [::std::mem::offset_of!(_cef_download_item_t, is_in_progress) - 24usize];
    ["Offset of field: _cef_download_item_t::is_complete"]
        [::std::mem::offset_of!(_cef_download_item_t, is_complete) - 28usize];
    ["Offset of field: _cef_download_item_t::is_canceled"]
        [::std::mem::offset_of!(_cef_download_item_t, is_canceled) - 32usize];
    ["Offset of field: _cef_download_item_t::get_current_speed"]
        [::std::mem::offset_of!(_cef_download_item_t, get_current_speed) - 36usize];
    ["Offset of field: _cef_download_item_t::get_percent_complete"]
        [::std::mem::offset_of!(_cef_download_item_t, get_percent_complete) - 40usize];
    ["Offset of field: _cef_download_item_t::get_total_bytes"]
        [::std::mem::offset_of!(_cef_download_item_t, get_total_bytes) - 44usize];
    ["Offset of field: _cef_download_item_t::get_received_bytes"]
        [::std::mem::offset_of!(_cef_download_item_t, get_received_bytes) - 48usize];
    ["Offset of field: _cef_download_item_t::get_start_time"]
        [::std::mem::offset_of!(_cef_download_item_t, get_start_time) - 52usize];
    ["Offset of field: _cef_download_item_t::get_end_time"]
        [::std::mem::offset_of!(_cef_download_item_t, get_end_time) - 56usize];
    ["Offset of field: _cef_download_item_t::get_full_path"]
        [::std::mem::offset_of!(_cef_download_item_t, get_full_path) - 60usize];
    ["Offset of field: _cef_download_item_t::get_id"]
        [::std::mem::offset_of!(_cef_download_item_t, get_id) - 64usize];
    ["Offset of field: _cef_download_item_t::get_url"]
        [::std::mem::offset_of!(_cef_download_item_t, get_url) - 68usize];
    ["Offset of field: _cef_download_item_t::get_original_url"]
        [::std::mem::offset_of!(_cef_download_item_t, get_original_url) - 72usize];
    ["Offset of field: _cef_download_item_t::get_suggested_file_name"]
        [::std::mem::offset_of!(_cef_download_item_t, get_suggested_file_name) - 76usize];
    ["Offset of field: _cef_download_item_t::get_content_disposition"]
        [::std::mem::offset_of!(_cef_download_item_t, get_content_disposition) - 80usize];
    ["Offset of field: _cef_download_item_t::get_mime_type"]
        [::std::mem::offset_of!(_cef_download_item_t, get_mime_type) - 84usize];
};
pub type cef_download_item_t = _cef_download_item_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_before_download_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_before_download_callback_t,
            download_path: *const cef_string_t,
            show_dialog: ::std::os::raw::c_int,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_before_download_callback_t"]
        [::std::mem::size_of::<_cef_before_download_callback_t>() - 24usize];
    ["Alignment of _cef_before_download_callback_t"]
        [::std::mem::align_of::<_cef_before_download_callback_t>() - 4usize];
    ["Offset of field: _cef_before_download_callback_t::base"]
        [::std::mem::offset_of!(_cef_before_download_callback_t, base) - 0usize];
    ["Offset of field: _cef_before_download_callback_t::cont"]
        [::std::mem::offset_of!(_cef_before_download_callback_t, cont) - 20usize];
};
pub type cef_before_download_callback_t = _cef_before_download_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_download_item_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>,
    pub pause:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>,
    pub resume:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_download_item_callback_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_download_item_callback_t"]
        [::std::mem::size_of::<_cef_download_item_callback_t>() - 32usize];
    ["Alignment of _cef_download_item_callback_t"]
        [::std::mem::align_of::<_cef_download_item_callback_t>() - 4usize];
    ["Offset of field: _cef_download_item_callback_t::base"]
        [::std::mem::offset_of!(_cef_download_item_callback_t, base) - 0usize];
    ["Offset of field: _cef_download_item_callback_t::cancel"]
        [::std::mem::offset_of!(_cef_download_item_callback_t, cancel) - 20usize];
    ["Offset of field: _cef_download_item_callback_t::pause"]
        [::std::mem::offset_of!(_cef_download_item_callback_t, pause) - 24usize];
    ["Offset of field: _cef_download_item_callback_t::resume"]
        [::std::mem::offset_of!(_cef_download_item_callback_t, resume) - 28usize];
};
pub type cef_download_item_callback_t = _cef_download_item_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_download_handler_t {
    pub base: cef_base_ref_counted_t,
    pub can_download: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            url: *const cef_string_t,
            request_method: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_download: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            suggested_name: *const cef_string_t,
            callback: *mut _cef_before_download_callback_t,
        ),
    >,
    pub on_download_updated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_download_handler_t,
            browser: *mut _cef_browser_t,
            download_item: *mut _cef_download_item_t,
            callback: *mut _cef_download_item_callback_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_download_handler_t"][::std::mem::size_of::<_cef_download_handler_t>() - 32usize];
    ["Alignment of _cef_download_handler_t"]
        [::std::mem::align_of::<_cef_download_handler_t>() - 4usize];
    ["Offset of field: _cef_download_handler_t::base"]
        [::std::mem::offset_of!(_cef_download_handler_t, base) - 0usize];
    ["Offset of field: _cef_download_handler_t::can_download"]
        [::std::mem::offset_of!(_cef_download_handler_t, can_download) - 20usize];
    ["Offset of field: _cef_download_handler_t::on_before_download"]
        [::std::mem::offset_of!(_cef_download_handler_t, on_before_download) - 24usize];
    ["Offset of field: _cef_download_handler_t::on_download_updated"]
        [::std::mem::offset_of!(_cef_download_handler_t, on_download_updated) - 28usize];
};
pub type cef_download_handler_t = _cef_download_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_drag_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_drag_enter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            dragData: *mut _cef_drag_data_t,
            mask: cef_drag_operations_mask_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_draggable_regions_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_drag_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            regionsCount: usize,
            regions: *const cef_draggable_region_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_drag_handler_t"][::std::mem::size_of::<_cef_drag_handler_t>() - 28usize];
    ["Alignment of _cef_drag_handler_t"][::std::mem::align_of::<_cef_drag_handler_t>() - 4usize];
    ["Offset of field: _cef_drag_handler_t::base"]
        [::std::mem::offset_of!(_cef_drag_handler_t, base) - 0usize];
    ["Offset of field: _cef_drag_handler_t::on_drag_enter"]
        [::std::mem::offset_of!(_cef_drag_handler_t, on_drag_enter) - 20usize];
    ["Offset of field: _cef_drag_handler_t::on_draggable_regions_changed"]
        [::std::mem::offset_of!(_cef_drag_handler_t, on_draggable_regions_changed) - 24usize];
};
pub type cef_drag_handler_t = _cef_drag_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_find_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_find_result: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_find_handler_t,
            browser: *mut _cef_browser_t,
            identifier: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            selectionRect: *const cef_rect_t,
            activeMatchOrdinal: ::std::os::raw::c_int,
            finalUpdate: ::std::os::raw::c_int,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_find_handler_t"][::std::mem::size_of::<_cef_find_handler_t>() - 24usize];
    ["Alignment of _cef_find_handler_t"][::std::mem::align_of::<_cef_find_handler_t>() - 4usize];
    ["Offset of field: _cef_find_handler_t::base"]
        [::std::mem::offset_of!(_cef_find_handler_t, base) - 0usize];
    ["Offset of field: _cef_find_handler_t::on_find_result"]
        [::std::mem::offset_of!(_cef_find_handler_t, on_find_result) - 20usize];
};
pub type cef_find_handler_t = _cef_find_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_focus_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_take_focus: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            next: ::std::os::raw::c_int,
        ),
    >,
    pub on_set_focus: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_focus_handler_t,
            browser: *mut _cef_browser_t,
            source: cef_focus_source_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_got_focus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_focus_handler_t, browser: *mut _cef_browser_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_focus_handler_t"][::std::mem::size_of::<_cef_focus_handler_t>() - 32usize];
    ["Alignment of _cef_focus_handler_t"][::std::mem::align_of::<_cef_focus_handler_t>() - 4usize];
    ["Offset of field: _cef_focus_handler_t::base"]
        [::std::mem::offset_of!(_cef_focus_handler_t, base) - 0usize];
    ["Offset of field: _cef_focus_handler_t::on_take_focus"]
        [::std::mem::offset_of!(_cef_focus_handler_t, on_take_focus) - 20usize];
    ["Offset of field: _cef_focus_handler_t::on_set_focus"]
        [::std::mem::offset_of!(_cef_focus_handler_t, on_set_focus) - 24usize];
    ["Offset of field: _cef_focus_handler_t::on_got_focus"]
        [::std::mem::offset_of!(_cef_focus_handler_t, on_got_focus) - 28usize];
};
pub type cef_focus_handler_t = _cef_focus_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_frame_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_frame_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
        ),
    >,
    pub on_frame_attached: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            reattached: ::std::os::raw::c_int,
        ),
    >,
    pub on_frame_detached: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
        ),
    >,
    pub on_main_frame_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_frame_handler_t,
            browser: *mut _cef_browser_t,
            old_frame: *mut _cef_frame_t,
            new_frame: *mut _cef_frame_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_frame_handler_t"][::std::mem::size_of::<_cef_frame_handler_t>() - 36usize];
    ["Alignment of _cef_frame_handler_t"][::std::mem::align_of::<_cef_frame_handler_t>() - 4usize];
    ["Offset of field: _cef_frame_handler_t::base"]
        [::std::mem::offset_of!(_cef_frame_handler_t, base) - 0usize];
    ["Offset of field: _cef_frame_handler_t::on_frame_created"]
        [::std::mem::offset_of!(_cef_frame_handler_t, on_frame_created) - 20usize];
    ["Offset of field: _cef_frame_handler_t::on_frame_attached"]
        [::std::mem::offset_of!(_cef_frame_handler_t, on_frame_attached) - 24usize];
    ["Offset of field: _cef_frame_handler_t::on_frame_detached"]
        [::std::mem::offset_of!(_cef_frame_handler_t, on_frame_detached) - 28usize];
    ["Offset of field: _cef_frame_handler_t::on_main_frame_changed"]
        [::std::mem::offset_of!(_cef_frame_handler_t, on_main_frame_changed) - 32usize];
};
pub type cef_frame_handler_t = _cef_frame_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_jsdialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_callback_t,
            success: ::std::os::raw::c_int,
            user_input: *const cef_string_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_jsdialog_callback_t"]
        [::std::mem::size_of::<_cef_jsdialog_callback_t>() - 24usize];
    ["Alignment of _cef_jsdialog_callback_t"]
        [::std::mem::align_of::<_cef_jsdialog_callback_t>() - 4usize];
    ["Offset of field: _cef_jsdialog_callback_t::base"]
        [::std::mem::offset_of!(_cef_jsdialog_callback_t, base) - 0usize];
    ["Offset of field: _cef_jsdialog_callback_t::cont"]
        [::std::mem::offset_of!(_cef_jsdialog_callback_t, cont) - 20usize];
};
pub type cef_jsdialog_callback_t = _cef_jsdialog_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_jsdialog_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_jsdialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            dialog_type: cef_jsdialog_type_t,
            message_text: *const cef_string_t,
            default_prompt_text: *const cef_string_t,
            callback: *mut _cef_jsdialog_callback_t,
            suppress_message: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_unload_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_jsdialog_handler_t,
            browser: *mut _cef_browser_t,
            message_text: *const cef_string_t,
            is_reload: ::std::os::raw::c_int,
            callback: *mut _cef_jsdialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_reset_dialog_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_jsdialog_handler_t, browser: *mut _cef_browser_t),
    >,
    pub on_dialog_closed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_jsdialog_handler_t, browser: *mut _cef_browser_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_jsdialog_handler_t"][::std::mem::size_of::<_cef_jsdialog_handler_t>() - 36usize];
    ["Alignment of _cef_jsdialog_handler_t"]
        [::std::mem::align_of::<_cef_jsdialog_handler_t>() - 4usize];
    ["Offset of field: _cef_jsdialog_handler_t::base"]
        [::std::mem::offset_of!(_cef_jsdialog_handler_t, base) - 0usize];
    ["Offset of field: _cef_jsdialog_handler_t::on_jsdialog"]
        [::std::mem::offset_of!(_cef_jsdialog_handler_t, on_jsdialog) - 20usize];
    ["Offset of field: _cef_jsdialog_handler_t::on_before_unload_dialog"]
        [::std::mem::offset_of!(_cef_jsdialog_handler_t, on_before_unload_dialog) - 24usize];
    ["Offset of field: _cef_jsdialog_handler_t::on_reset_dialog_state"]
        [::std::mem::offset_of!(_cef_jsdialog_handler_t, on_reset_dialog_state) - 28usize];
    ["Offset of field: _cef_jsdialog_handler_t::on_dialog_closed"]
        [::std::mem::offset_of!(_cef_jsdialog_handler_t, on_dialog_closed) - 32usize];
};
pub type cef_jsdialog_handler_t = _cef_jsdialog_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_keyboard_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_pre_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const _cef_key_event_t,
            os_event: *mut XEvent,
            is_keyboard_shortcut: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_keyboard_handler_t,
            browser: *mut _cef_browser_t,
            event: *const _cef_key_event_t,
            os_event: *mut XEvent,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_keyboard_handler_t"][::std::mem::size_of::<_cef_keyboard_handler_t>() - 28usize];
    ["Alignment of _cef_keyboard_handler_t"]
        [::std::mem::align_of::<_cef_keyboard_handler_t>() - 4usize];
    ["Offset of field: _cef_keyboard_handler_t::base"]
        [::std::mem::offset_of!(_cef_keyboard_handler_t, base) - 0usize];
    ["Offset of field: _cef_keyboard_handler_t::on_pre_key_event"]
        [::std::mem::offset_of!(_cef_keyboard_handler_t, on_pre_key_event) - 20usize];
    ["Offset of field: _cef_keyboard_handler_t::on_key_event"]
        [::std::mem::offset_of!(_cef_keyboard_handler_t, on_key_event) - 24usize];
};
pub type cef_keyboard_handler_t = _cef_keyboard_handler_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cef_life_span_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_popup: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_frame_name: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t,
            user_gesture: ::std::os::raw::c_int,
            popupFeatures: *const _cef_popup_features_t,
            windowInfo: *mut _cef_window_info_t,
            client: *mut *mut _cef_client_t,
            settings: *mut _cef_browser_settings_t,
            extra_info: *mut *mut _cef_dictionary_value_t,
            no_javascript_access: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_after_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_life_span_handler_t, browser: *mut _cef_browser_t),
    >,
    pub do_close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_life_span_handler_t,
            browser: *mut _cef_browser_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_before_close: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_life_span_handler_t, browser: *mut _cef_browser_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_life_span_handler_t"]
        [::std::mem::size_of::<_cef_life_span_handler_t>() - 36usize];
    ["Alignment of _cef_life_span_handler_t"]
        [::std::mem::align_of::<_cef_life_span_handler_t>() - 4usize];
    ["Offset of field: _cef_life_span_handler_t::base"]
        [::std::mem::offset_of!(_cef_life_span_handler_t, base) - 0usize];
    ["Offset of field: _cef_life_span_handler_t::on_before_popup"]
        [::std::mem::offset_of!(_cef_life_span_handler_t, on_before_popup) - 20usize];
    ["Offset of field: _cef_life_span_handler_t::on_after_created"]
        [::std::mem::offset_of!(_cef_life_span_handler_t, on_after_created) - 24usize];
    ["Offset of field: _cef_life_span_handler_t::do_close"]
        [::std::mem::offset_of!(_cef_life_span_handler_t, do_close) - 28usize];
    ["Offset of field: _cef_life_span_handler_t::on_before_close"]
        [::std::mem::offset_of!(_cef_life_span_handler_t, on_before_close) - 32usize];
};
pub type cef_life_span_handler_t = _cef_life_span_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_load_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_loading_state_change: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            isLoading: ::std::os::raw::c_int,
            canGoBack: ::std::os::raw::c_int,
            canGoForward: ::std::os::raw::c_int,
        ),
    >,
    pub on_load_start: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            transition_type: cef_transition_type_t,
        ),
    >,
    pub on_load_end: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            httpStatusCode: ::std::os::raw::c_int,
        ),
    >,
    pub on_load_error: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_load_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            errorCode: cef_errorcode_t,
            errorText: *const cef_string_t,
            failedUrl: *const cef_string_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_load_handler_t"][::std::mem::size_of::<_cef_load_handler_t>() - 36usize];
    ["Alignment of _cef_load_handler_t"][::std::mem::align_of::<_cef_load_handler_t>() - 4usize];
    ["Offset of field: _cef_load_handler_t::base"]
        [::std::mem::offset_of!(_cef_load_handler_t, base) - 0usize];
    ["Offset of field: _cef_load_handler_t::on_loading_state_change"]
        [::std::mem::offset_of!(_cef_load_handler_t, on_loading_state_change) - 20usize];
    ["Offset of field: _cef_load_handler_t::on_load_start"]
        [::std::mem::offset_of!(_cef_load_handler_t, on_load_start) - 24usize];
    ["Offset of field: _cef_load_handler_t::on_load_end"]
        [::std::mem::offset_of!(_cef_load_handler_t, on_load_end) - 28usize];
    ["Offset of field: _cef_load_handler_t::on_load_error"]
        [::std::mem::offset_of!(_cef_load_handler_t, on_load_error) - 32usize];
};
pub type cef_load_handler_t = _cef_load_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_print_settings_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_orientation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, landscape: ::std::os::raw::c_int),
    >,
    pub is_landscape: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_printer_printable_area: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            physical_size_device_units: *const cef_size_t,
            printable_area_device_units: *const cef_rect_t,
            landscape_needs_flip: ::std::os::raw::c_int,
        ),
    >,
    pub set_device_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, name: *const cef_string_t),
    >,
    pub get_device_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_string_userfree_t,
    >,
    pub set_dpi: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, dpi: ::std::os::raw::c_int),
    >,
    pub get_dpi: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_page_ranges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: usize,
            ranges: *const cef_range_t,
        ),
    >,
    pub get_page_ranges_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> usize>,
    pub get_page_ranges: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            rangesCount: *mut usize,
            ranges: *mut cef_range_t,
        ),
    >,
    pub set_selection_only: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_settings_t,
            selection_only: ::std::os::raw::c_int,
        ),
    >,
    pub is_selection_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_collate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, collate: ::std::os::raw::c_int),
    >,
    pub will_collate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_color_model: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, model: cef_color_model_t),
    >,
    pub get_color_model: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_color_model_t,
    >,
    pub set_copies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, copies: ::std::os::raw::c_int),
    >,
    pub get_copies: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> ::std::os::raw::c_int,
    >,
    pub set_duplex_mode: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t, mode: cef_duplex_mode_t),
    >,
    pub get_duplex_mode: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_settings_t) -> cef_duplex_mode_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_print_settings_t"][::std::mem::size_of::<_cef_print_settings_t>() - 108usize];
    ["Alignment of _cef_print_settings_t"]
        [::std::mem::align_of::<_cef_print_settings_t>() - 4usize];
    ["Offset of field: _cef_print_settings_t::base"]
        [::std::mem::offset_of!(_cef_print_settings_t, base) - 0usize];
    ["Offset of field: _cef_print_settings_t::is_valid"]
        [::std::mem::offset_of!(_cef_print_settings_t, is_valid) - 20usize];
    ["Offset of field: _cef_print_settings_t::is_read_only"]
        [::std::mem::offset_of!(_cef_print_settings_t, is_read_only) - 24usize];
    ["Offset of field: _cef_print_settings_t::set_orientation"]
        [::std::mem::offset_of!(_cef_print_settings_t, set_orientation) - 28usize];
    ["Offset of field: _cef_print_settings_t::is_landscape"]
        [::std::mem::offset_of!(_cef_print_settings_t, is_landscape) - 32usize];
    ["Offset of field: _cef_print_settings_t::set_printer_printable_area"]
        [::std::mem::offset_of!(_cef_print_settings_t, set_printer_printable_area) - 36usize];
    ["Offset of field: _cef_print_settings_t::set_device_name"]
        [::std::mem::offset_of!(_cef_print_settings_t, set_device_name) - 40usize];
    ["Offset of field: _cef_print_settings_t::get_device_name"]
        [::std::mem::offset_of!(_cef_print_settings_t, get_device_name) - 44usize];
    ["Offset of field: _cef_print_settings_t::set_dpi"]
        [::std::mem::offset_of!(_cef_print_settings_t, set_dpi) - 48usize];
    ["Offset of field: _cef_print_settings_t::get_dpi"]
        [::std::mem::offset_of!(_cef_print_settings_t, get_dpi) - 52usize];
    ["Offset of field: _cef_print_settings_t::set_page_ranges"]
        [::std::mem::offset_of!(_cef_print_settings_t, set_page_ranges) - 56usize];
    ["Offset of field: _cef_print_settings_t::get_page_ranges_count"]
        [::std::mem::offset_of!(_cef_print_settings_t, get_page_ranges_count) - 60usize];
    ["Offset of field: _cef_print_settings_t::get_page_ranges"]
        [::std::mem::offset_of!(_cef_print_settings_t, get_page_ranges) - 64usize];
    ["Offset of field: _cef_print_settings_t::set_selection_only"]
        [::std::mem::offset_of!(_cef_print_settings_t, set_selection_only) - 68usize];
    ["Offset of field: _cef_print_settings_t::is_selection_only"]
        [::std::mem::offset_of!(_cef_print_settings_t, is_selection_only) - 72usize];
    ["Offset of field: _cef_print_settings_t::set_collate"]
        [::std::mem::offset_of!(_cef_print_settings_t, set_collate) - 76usize];
    ["Offset of field: _cef_print_settings_t::will_collate"]
        [::std::mem::offset_of!(_cef_print_settings_t, will_collate) - 80usize];
    ["Offset of field: _cef_print_settings_t::set_color_model"]
        [::std::mem::offset_of!(_cef_print_settings_t, set_color_model) - 84usize];
    ["Offset of field: _cef_print_settings_t::get_color_model"]
        [::std::mem::offset_of!(_cef_print_settings_t, get_color_model) - 88usize];
    ["Offset of field: _cef_print_settings_t::set_copies"]
        [::std::mem::offset_of!(_cef_print_settings_t, set_copies) - 92usize];
    ["Offset of field: _cef_print_settings_t::get_copies"]
        [::std::mem::offset_of!(_cef_print_settings_t, get_copies) - 96usize];
    ["Offset of field: _cef_print_settings_t::set_duplex_mode"]
        [::std::mem::offset_of!(_cef_print_settings_t, set_duplex_mode) - 100usize];
    ["Offset of field: _cef_print_settings_t::get_duplex_mode"]
        [::std::mem::offset_of!(_cef_print_settings_t, get_duplex_mode) - 104usize];
};
pub type cef_print_settings_t = _cef_print_settings_t;
unsafe extern "C" {
    pub fn cef_print_settings_create() -> *mut cef_print_settings_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_print_dialog_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_dialog_callback_t,
            settings: *mut _cef_print_settings_t,
        ),
    >,
    pub cancel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_dialog_callback_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_print_dialog_callback_t"]
        [::std::mem::size_of::<_cef_print_dialog_callback_t>() - 28usize];
    ["Alignment of _cef_print_dialog_callback_t"]
        [::std::mem::align_of::<_cef_print_dialog_callback_t>() - 4usize];
    ["Offset of field: _cef_print_dialog_callback_t::base"]
        [::std::mem::offset_of!(_cef_print_dialog_callback_t, base) - 0usize];
    ["Offset of field: _cef_print_dialog_callback_t::cont"]
        [::std::mem::offset_of!(_cef_print_dialog_callback_t, cont) - 20usize];
    ["Offset of field: _cef_print_dialog_callback_t::cancel"]
        [::std::mem::offset_of!(_cef_print_dialog_callback_t, cancel) - 24usize];
};
pub type cef_print_dialog_callback_t = _cef_print_dialog_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_print_job_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_print_job_callback_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_print_job_callback_t"]
        [::std::mem::size_of::<_cef_print_job_callback_t>() - 24usize];
    ["Alignment of _cef_print_job_callback_t"]
        [::std::mem::align_of::<_cef_print_job_callback_t>() - 4usize];
    ["Offset of field: _cef_print_job_callback_t::base"]
        [::std::mem::offset_of!(_cef_print_job_callback_t, base) - 0usize];
    ["Offset of field: _cef_print_job_callback_t::cont"]
        [::std::mem::offset_of!(_cef_print_job_callback_t, cont) - 20usize];
};
pub type cef_print_job_callback_t = _cef_print_job_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_print_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_print_start: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t),
    >,
    pub on_print_settings: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            settings: *mut _cef_print_settings_t,
            get_defaults: ::std::os::raw::c_int,
        ),
    >,
    pub on_print_dialog: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            has_selection: ::std::os::raw::c_int,
            callback: *mut _cef_print_dialog_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_print_job: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            document_name: *const cef_string_t,
            pdf_file_path: *const cef_string_t,
            callback: *mut _cef_print_job_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_print_reset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_print_handler_t, browser: *mut _cef_browser_t),
    >,
    pub get_pdf_paper_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_print_handler_t,
            browser: *mut _cef_browser_t,
            device_units_per_inch: ::std::os::raw::c_int,
        ) -> cef_size_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_print_handler_t"][::std::mem::size_of::<_cef_print_handler_t>() - 44usize];
    ["Alignment of _cef_print_handler_t"][::std::mem::align_of::<_cef_print_handler_t>() - 4usize];
    ["Offset of field: _cef_print_handler_t::base"]
        [::std::mem::offset_of!(_cef_print_handler_t, base) - 0usize];
    ["Offset of field: _cef_print_handler_t::on_print_start"]
        [::std::mem::offset_of!(_cef_print_handler_t, on_print_start) - 20usize];
    ["Offset of field: _cef_print_handler_t::on_print_settings"]
        [::std::mem::offset_of!(_cef_print_handler_t, on_print_settings) - 24usize];
    ["Offset of field: _cef_print_handler_t::on_print_dialog"]
        [::std::mem::offset_of!(_cef_print_handler_t, on_print_dialog) - 28usize];
    ["Offset of field: _cef_print_handler_t::on_print_job"]
        [::std::mem::offset_of!(_cef_print_handler_t, on_print_job) - 32usize];
    ["Offset of field: _cef_print_handler_t::on_print_reset"]
        [::std::mem::offset_of!(_cef_print_handler_t, on_print_reset) - 36usize];
    ["Offset of field: _cef_print_handler_t::get_pdf_paper_size"]
        [::std::mem::offset_of!(_cef_print_handler_t, get_pdf_paper_size) - 40usize];
};
pub type cef_print_handler_t = _cef_print_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_accessibility_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_accessibility_tree_change: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_accessibility_handler_t, value: *mut _cef_value_t),
    >,
    pub on_accessibility_location_change: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_accessibility_handler_t, value: *mut _cef_value_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_accessibility_handler_t"]
        [::std::mem::size_of::<_cef_accessibility_handler_t>() - 28usize];
    ["Alignment of _cef_accessibility_handler_t"]
        [::std::mem::align_of::<_cef_accessibility_handler_t>() - 4usize];
    ["Offset of field: _cef_accessibility_handler_t::base"]
        [::std::mem::offset_of!(_cef_accessibility_handler_t, base) - 0usize];
    ["Offset of field: _cef_accessibility_handler_t::on_accessibility_tree_change"][::std::mem::offset_of!(
        _cef_accessibility_handler_t,
        on_accessibility_tree_change
    ) - 20usize];
    ["Offset of field: _cef_accessibility_handler_t::on_accessibility_location_change"][::std::mem::offset_of!(
        _cef_accessibility_handler_t,
        on_accessibility_location_change
    )
        - 24usize];
};
pub type cef_accessibility_handler_t = _cef_accessibility_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_render_handler_t {
    pub base: cef_base_ref_counted_t,
    pub get_accessibility_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
        ) -> *mut _cef_accessibility_handler_t,
    >,
    pub get_root_screen_rect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_view_rect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *mut cef_rect_t,
        ),
    >,
    pub get_screen_point: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            viewX: ::std::os::raw::c_int,
            viewY: ::std::os::raw::c_int,
            screenX: *mut ::std::os::raw::c_int,
            screenY: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_screen_info: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            screen_info: *mut _cef_screen_info_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_popup_show: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            show: ::std::os::raw::c_int,
        ),
    >,
    pub on_popup_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            rect: *const cef_rect_t,
        ),
    >,
    pub on_paint: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            buffer: *const ::std::os::raw::c_void,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    pub on_accelerated_paint: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            type_: cef_paint_element_type_t,
            dirtyRectsCount: usize,
            dirtyRects: *const cef_rect_t,
            shared_handle: *mut ::std::os::raw::c_void,
        ),
    >,
    pub start_dragging: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            drag_data: *mut _cef_drag_data_t,
            allowed_ops: cef_drag_operations_mask_t,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub update_drag_cursor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            operation: cef_drag_operations_mask_t,
        ),
    >,
    pub on_scroll_offset_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            x: f64,
            y: f64,
        ),
    >,
    pub on_ime_composition_range_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_range: *const cef_range_t,
            character_boundsCount: usize,
            character_bounds: *const cef_rect_t,
        ),
    >,
    pub on_text_selection_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            selected_text: *const cef_string_t,
            selected_range: *const cef_range_t,
        ),
    >,
    pub on_virtual_keyboard_requested: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_handler_t,
            browser: *mut _cef_browser_t,
            input_mode: cef_text_input_mode_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_render_handler_t"][::std::mem::size_of::<_cef_render_handler_t>() - 80usize];
    ["Alignment of _cef_render_handler_t"]
        [::std::mem::align_of::<_cef_render_handler_t>() - 4usize];
    ["Offset of field: _cef_render_handler_t::base"]
        [::std::mem::offset_of!(_cef_render_handler_t, base) - 0usize];
    ["Offset of field: _cef_render_handler_t::get_accessibility_handler"]
        [::std::mem::offset_of!(_cef_render_handler_t, get_accessibility_handler) - 20usize];
    ["Offset of field: _cef_render_handler_t::get_root_screen_rect"]
        [::std::mem::offset_of!(_cef_render_handler_t, get_root_screen_rect) - 24usize];
    ["Offset of field: _cef_render_handler_t::get_view_rect"]
        [::std::mem::offset_of!(_cef_render_handler_t, get_view_rect) - 28usize];
    ["Offset of field: _cef_render_handler_t::get_screen_point"]
        [::std::mem::offset_of!(_cef_render_handler_t, get_screen_point) - 32usize];
    ["Offset of field: _cef_render_handler_t::get_screen_info"]
        [::std::mem::offset_of!(_cef_render_handler_t, get_screen_info) - 36usize];
    ["Offset of field: _cef_render_handler_t::on_popup_show"]
        [::std::mem::offset_of!(_cef_render_handler_t, on_popup_show) - 40usize];
    ["Offset of field: _cef_render_handler_t::on_popup_size"]
        [::std::mem::offset_of!(_cef_render_handler_t, on_popup_size) - 44usize];
    ["Offset of field: _cef_render_handler_t::on_paint"]
        [::std::mem::offset_of!(_cef_render_handler_t, on_paint) - 48usize];
    ["Offset of field: _cef_render_handler_t::on_accelerated_paint"]
        [::std::mem::offset_of!(_cef_render_handler_t, on_accelerated_paint) - 52usize];
    ["Offset of field: _cef_render_handler_t::start_dragging"]
        [::std::mem::offset_of!(_cef_render_handler_t, start_dragging) - 56usize];
    ["Offset of field: _cef_render_handler_t::update_drag_cursor"]
        [::std::mem::offset_of!(_cef_render_handler_t, update_drag_cursor) - 60usize];
    ["Offset of field: _cef_render_handler_t::on_scroll_offset_changed"]
        [::std::mem::offset_of!(_cef_render_handler_t, on_scroll_offset_changed) - 64usize];
    ["Offset of field: _cef_render_handler_t::on_ime_composition_range_changed"]
        [::std::mem::offset_of!(_cef_render_handler_t, on_ime_composition_range_changed) - 68usize];
    ["Offset of field: _cef_render_handler_t::on_text_selection_changed"]
        [::std::mem::offset_of!(_cef_render_handler_t, on_text_selection_changed) - 72usize];
    ["Offset of field: _cef_render_handler_t::on_virtual_keyboard_requested"]
        [::std::mem::offset_of!(_cef_render_handler_t, on_virtual_keyboard_requested) - 76usize];
};
pub type cef_render_handler_t = _cef_render_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_auth_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_auth_callback_t,
            username: *const cef_string_t,
            password: *const cef_string_t,
        ),
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_auth_callback_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_auth_callback_t"][::std::mem::size_of::<_cef_auth_callback_t>() - 28usize];
    ["Alignment of _cef_auth_callback_t"][::std::mem::align_of::<_cef_auth_callback_t>() - 4usize];
    ["Offset of field: _cef_auth_callback_t::base"]
        [::std::mem::offset_of!(_cef_auth_callback_t, base) - 0usize];
    ["Offset of field: _cef_auth_callback_t::cont"]
        [::std::mem::offset_of!(_cef_auth_callback_t, cont) - 20usize];
    ["Offset of field: _cef_auth_callback_t::cancel"]
        [::std::mem::offset_of!(_cef_auth_callback_t, cancel) - 24usize];
};
pub type cef_auth_callback_t = _cef_auth_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_response_t {
    pub base: cef_base_ref_counted_t,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int,
    >,
    pub get_error:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_errorcode_t>,
    pub set_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, error: cef_errorcode_t),
    >,
    pub get_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> ::std::os::raw::c_int,
    >,
    pub set_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, status: ::std::os::raw::c_int),
    >,
    pub get_status_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_status_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, statusText: *const cef_string_t),
    >,
    pub get_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_mime_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, mimeType: *const cef_string_t),
    >,
    pub get_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_charset: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, charset: *const cef_string_t),
    >,
    pub get_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub set_header_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
            overwrite: ::std::os::raw::c_int,
        ),
    >,
    pub get_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t),
    >,
    pub set_header_map: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, headerMap: cef_string_multimap_t),
    >,
    pub get_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t) -> cef_string_userfree_t,
    >,
    pub set_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_t, url: *const cef_string_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_response_t"][::std::mem::size_of::<_cef_response_t>() - 88usize];
    ["Alignment of _cef_response_t"][::std::mem::align_of::<_cef_response_t>() - 4usize];
    ["Offset of field: _cef_response_t::base"]
        [::std::mem::offset_of!(_cef_response_t, base) - 0usize];
    ["Offset of field: _cef_response_t::is_read_only"]
        [::std::mem::offset_of!(_cef_response_t, is_read_only) - 20usize];
    ["Offset of field: _cef_response_t::get_error"]
        [::std::mem::offset_of!(_cef_response_t, get_error) - 24usize];
    ["Offset of field: _cef_response_t::set_error"]
        [::std::mem::offset_of!(_cef_response_t, set_error) - 28usize];
    ["Offset of field: _cef_response_t::get_status"]
        [::std::mem::offset_of!(_cef_response_t, get_status) - 32usize];
    ["Offset of field: _cef_response_t::set_status"]
        [::std::mem::offset_of!(_cef_response_t, set_status) - 36usize];
    ["Offset of field: _cef_response_t::get_status_text"]
        [::std::mem::offset_of!(_cef_response_t, get_status_text) - 40usize];
    ["Offset of field: _cef_response_t::set_status_text"]
        [::std::mem::offset_of!(_cef_response_t, set_status_text) - 44usize];
    ["Offset of field: _cef_response_t::get_mime_type"]
        [::std::mem::offset_of!(_cef_response_t, get_mime_type) - 48usize];
    ["Offset of field: _cef_response_t::set_mime_type"]
        [::std::mem::offset_of!(_cef_response_t, set_mime_type) - 52usize];
    ["Offset of field: _cef_response_t::get_charset"]
        [::std::mem::offset_of!(_cef_response_t, get_charset) - 56usize];
    ["Offset of field: _cef_response_t::set_charset"]
        [::std::mem::offset_of!(_cef_response_t, set_charset) - 60usize];
    ["Offset of field: _cef_response_t::get_header_by_name"]
        [::std::mem::offset_of!(_cef_response_t, get_header_by_name) - 64usize];
    ["Offset of field: _cef_response_t::set_header_by_name"]
        [::std::mem::offset_of!(_cef_response_t, set_header_by_name) - 68usize];
    ["Offset of field: _cef_response_t::get_header_map"]
        [::std::mem::offset_of!(_cef_response_t, get_header_map) - 72usize];
    ["Offset of field: _cef_response_t::set_header_map"]
        [::std::mem::offset_of!(_cef_response_t, set_header_map) - 76usize];
    ["Offset of field: _cef_response_t::get_url"]
        [::std::mem::offset_of!(_cef_response_t, get_url) - 80usize];
    ["Offset of field: _cef_response_t::set_url"]
        [::std::mem::offset_of!(_cef_response_t, set_url) - 84usize];
};
pub type cef_response_t = _cef_response_t;
unsafe extern "C" {
    pub fn cef_response_create() -> *mut cef_response_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_skip_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_resource_skip_callback_t, bytes_skipped: int64),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_resource_skip_callback_t"]
        [::std::mem::size_of::<_cef_resource_skip_callback_t>() - 24usize];
    ["Alignment of _cef_resource_skip_callback_t"]
        [::std::mem::align_of::<_cef_resource_skip_callback_t>() - 4usize];
    ["Offset of field: _cef_resource_skip_callback_t::base"]
        [::std::mem::offset_of!(_cef_resource_skip_callback_t, base) - 0usize];
    ["Offset of field: _cef_resource_skip_callback_t::cont"]
        [::std::mem::offset_of!(_cef_resource_skip_callback_t, cont) - 20usize];
};
pub type cef_resource_skip_callback_t = _cef_resource_skip_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_read_callback_t {
    pub base: cef_base_ref_counted_t,
    pub cont: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_read_callback_t,
            bytes_read: ::std::os::raw::c_int,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_resource_read_callback_t"]
        [::std::mem::size_of::<_cef_resource_read_callback_t>() - 24usize];
    ["Alignment of _cef_resource_read_callback_t"]
        [::std::mem::align_of::<_cef_resource_read_callback_t>() - 4usize];
    ["Offset of field: _cef_resource_read_callback_t::base"]
        [::std::mem::offset_of!(_cef_resource_read_callback_t, base) - 0usize];
    ["Offset of field: _cef_resource_read_callback_t::cont"]
        [::std::mem::offset_of!(_cef_resource_read_callback_t, cont) - 20usize];
};
pub type cef_resource_read_callback_t = _cef_resource_read_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_handler_t {
    pub base: cef_base_ref_counted_t,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            handle_request: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub process_request: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_response_headers: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            response: *mut _cef_response_t,
            response_length: *mut int64,
            redirectUrl: *mut cef_string_t,
        ),
    >,
    pub skip: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            bytes_to_skip: int64,
            bytes_skipped: *mut int64,
            callback: *mut _cef_resource_skip_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_resource_read_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub read_response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_handler_t,
            data_out: *mut ::std::os::raw::c_void,
            bytes_to_read: ::std::os::raw::c_int,
            bytes_read: *mut ::std::os::raw::c_int,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_resource_handler_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_resource_handler_t"][::std::mem::size_of::<_cef_resource_handler_t>() - 48usize];
    ["Alignment of _cef_resource_handler_t"]
        [::std::mem::align_of::<_cef_resource_handler_t>() - 4usize];
    ["Offset of field: _cef_resource_handler_t::base"]
        [::std::mem::offset_of!(_cef_resource_handler_t, base) - 0usize];
    ["Offset of field: _cef_resource_handler_t::open"]
        [::std::mem::offset_of!(_cef_resource_handler_t, open) - 20usize];
    ["Offset of field: _cef_resource_handler_t::process_request"]
        [::std::mem::offset_of!(_cef_resource_handler_t, process_request) - 24usize];
    ["Offset of field: _cef_resource_handler_t::get_response_headers"]
        [::std::mem::offset_of!(_cef_resource_handler_t, get_response_headers) - 28usize];
    ["Offset of field: _cef_resource_handler_t::skip"]
        [::std::mem::offset_of!(_cef_resource_handler_t, skip) - 32usize];
    ["Offset of field: _cef_resource_handler_t::read"]
        [::std::mem::offset_of!(_cef_resource_handler_t, read) - 36usize];
    ["Offset of field: _cef_resource_handler_t::read_response"]
        [::std::mem::offset_of!(_cef_resource_handler_t, read_response) - 40usize];
    ["Offset of field: _cef_resource_handler_t::cancel"]
        [::std::mem::offset_of!(_cef_resource_handler_t, cancel) - 44usize];
};
pub type cef_resource_handler_t = _cef_resource_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_response_filter_t {
    pub base: cef_base_ref_counted_t,
    pub init_filter: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_response_filter_t) -> ::std::os::raw::c_int,
    >,
    pub filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_response_filter_t,
            data_in: *mut ::std::os::raw::c_void,
            data_in_size: usize,
            data_in_read: *mut usize,
            data_out: *mut ::std::os::raw::c_void,
            data_out_size: usize,
            data_out_written: *mut usize,
        ) -> cef_response_filter_status_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_response_filter_t"][::std::mem::size_of::<_cef_response_filter_t>() - 28usize];
    ["Alignment of _cef_response_filter_t"]
        [::std::mem::align_of::<_cef_response_filter_t>() - 4usize];
    ["Offset of field: _cef_response_filter_t::base"]
        [::std::mem::offset_of!(_cef_response_filter_t, base) - 0usize];
    ["Offset of field: _cef_response_filter_t::init_filter"]
        [::std::mem::offset_of!(_cef_response_filter_t, init_filter) - 20usize];
    ["Offset of field: _cef_response_filter_t::filter"]
        [::std::mem::offset_of!(_cef_response_filter_t, filter) - 24usize];
};
pub type cef_response_filter_t = _cef_response_filter_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_request_handler_t {
    pub base: cef_base_ref_counted_t,
    pub get_cookie_access_filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_cookie_access_filter_t,
    >,
    pub on_before_resource_load: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            callback: *mut _cef_callback_t,
        ) -> cef_return_value_t,
    >,
    pub get_resource_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_resource_handler_t,
    >,
    pub on_resource_redirect: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            new_url: *mut cef_string_t,
        ),
    >,
    pub on_resource_response: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_resource_response_filter: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
        ) -> *mut _cef_response_filter_t,
    >,
    pub on_resource_load_complete: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            status: cef_urlrequest_status_t,
            received_content_length: int64,
        ),
    >,
    pub on_protocol_execution: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            allow_os_execution: *mut ::std::os::raw::c_int,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_resource_request_handler_t"]
        [::std::mem::size_of::<_cef_resource_request_handler_t>() - 52usize];
    ["Alignment of _cef_resource_request_handler_t"]
        [::std::mem::align_of::<_cef_resource_request_handler_t>() - 4usize];
    ["Offset of field: _cef_resource_request_handler_t::base"]
        [::std::mem::offset_of!(_cef_resource_request_handler_t, base) - 0usize];
    ["Offset of field: _cef_resource_request_handler_t::get_cookie_access_filter"][::std::mem::offset_of!(
        _cef_resource_request_handler_t,
        get_cookie_access_filter
    ) - 20usize];
    ["Offset of field: _cef_resource_request_handler_t::on_before_resource_load"][::std::mem::offset_of!(
        _cef_resource_request_handler_t,
        on_before_resource_load
    ) - 24usize];
    ["Offset of field: _cef_resource_request_handler_t::get_resource_handler"]
        [::std::mem::offset_of!(_cef_resource_request_handler_t, get_resource_handler) - 28usize];
    ["Offset of field: _cef_resource_request_handler_t::on_resource_redirect"]
        [::std::mem::offset_of!(_cef_resource_request_handler_t, on_resource_redirect) - 32usize];
    ["Offset of field: _cef_resource_request_handler_t::on_resource_response"]
        [::std::mem::offset_of!(_cef_resource_request_handler_t, on_resource_response) - 36usize];
    ["Offset of field: _cef_resource_request_handler_t::get_resource_response_filter"][::std::mem::offset_of!(
        _cef_resource_request_handler_t,
        get_resource_response_filter
    ) - 40usize];
    ["Offset of field: _cef_resource_request_handler_t::on_resource_load_complete"][::std::mem::offset_of!(
        _cef_resource_request_handler_t,
        on_resource_load_complete
    ) - 44usize];
    ["Offset of field: _cef_resource_request_handler_t::on_protocol_execution"]
        [::std::mem::offset_of!(_cef_resource_request_handler_t, on_protocol_execution) - 48usize];
};
pub type cef_resource_request_handler_t = _cef_resource_request_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_cookie_access_filter_t {
    pub base: cef_base_ref_counted_t,
    pub can_send_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            cookie: *const _cef_cookie_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub can_save_cookie: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_cookie_access_filter_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            response: *mut _cef_response_t,
            cookie: *const _cef_cookie_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_cookie_access_filter_t"]
        [::std::mem::size_of::<_cef_cookie_access_filter_t>() - 28usize];
    ["Alignment of _cef_cookie_access_filter_t"]
        [::std::mem::align_of::<_cef_cookie_access_filter_t>() - 4usize];
    ["Offset of field: _cef_cookie_access_filter_t::base"]
        [::std::mem::offset_of!(_cef_cookie_access_filter_t, base) - 0usize];
    ["Offset of field: _cef_cookie_access_filter_t::can_send_cookie"]
        [::std::mem::offset_of!(_cef_cookie_access_filter_t, can_send_cookie) - 20usize];
    ["Offset of field: _cef_cookie_access_filter_t::can_save_cookie"]
        [::std::mem::offset_of!(_cef_cookie_access_filter_t, can_save_cookie) - 24usize];
};
pub type cef_cookie_access_filter_t = _cef_cookie_access_filter_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_sslinfo_t {
    pub base: cef_base_ref_counted_t,
    pub get_cert_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslinfo_t) -> cef_cert_status_t,
    >,
    pub get_x509certificate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_sslinfo_t) -> *mut _cef_x509certificate_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_sslinfo_t"][::std::mem::size_of::<_cef_sslinfo_t>() - 28usize];
    ["Alignment of _cef_sslinfo_t"][::std::mem::align_of::<_cef_sslinfo_t>() - 4usize];
    ["Offset of field: _cef_sslinfo_t::base"]
        [::std::mem::offset_of!(_cef_sslinfo_t, base) - 0usize];
    ["Offset of field: _cef_sslinfo_t::get_cert_status"]
        [::std::mem::offset_of!(_cef_sslinfo_t, get_cert_status) - 20usize];
    ["Offset of field: _cef_sslinfo_t::get_x509certificate"]
        [::std::mem::offset_of!(_cef_sslinfo_t, get_x509certificate) - 24usize];
};
pub type cef_sslinfo_t = _cef_sslinfo_t;
unsafe extern "C" {
    pub fn cef_is_cert_status_error(status: cef_cert_status_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_select_client_certificate_callback_t {
    pub base: cef_base_ref_counted_t,
    pub select: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_select_client_certificate_callback_t,
            cert: *mut _cef_x509certificate_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_select_client_certificate_callback_t"]
        [::std::mem::size_of::<_cef_select_client_certificate_callback_t>() - 24usize];
    ["Alignment of _cef_select_client_certificate_callback_t"]
        [::std::mem::align_of::<_cef_select_client_certificate_callback_t>() - 4usize];
    ["Offset of field: _cef_select_client_certificate_callback_t::base"]
        [::std::mem::offset_of!(_cef_select_client_certificate_callback_t, base) - 0usize];
    ["Offset of field: _cef_select_client_certificate_callback_t::select"]
        [::std::mem::offset_of!(_cef_select_client_certificate_callback_t, select) - 20usize];
};
pub type cef_select_client_certificate_callback_t = _cef_select_client_certificate_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_request_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_browse: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            user_gesture: ::std::os::raw::c_int,
            is_redirect: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_open_urlfrom_tab: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            target_url: *const cef_string_t,
            target_disposition: cef_window_open_disposition_t,
            user_gesture: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_resource_request_handler: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            request: *mut _cef_request_t,
            is_navigation: ::std::os::raw::c_int,
            is_download: ::std::os::raw::c_int,
            request_initiator: *const cef_string_t,
            disable_default_handling: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_resource_request_handler_t,
    >,
    pub get_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            realm: *const cef_string_t,
            scheme: *const cef_string_t,
            callback: *mut _cef_auth_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_quota_request: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            origin_url: *const cef_string_t,
            new_size: int64,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_certificate_error: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            cert_error: cef_errorcode_t,
            request_url: *const cef_string_t,
            ssl_info: *mut _cef_sslinfo_t,
            callback: *mut _cef_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_select_client_certificate: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            certificatesCount: usize,
            certificates: *const *mut _cef_x509certificate_t,
            callback: *mut _cef_select_client_certificate_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_render_view_ready: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_handler_t, browser: *mut _cef_browser_t),
    >,
    pub on_render_process_terminated: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_request_handler_t,
            browser: *mut _cef_browser_t,
            status: cef_termination_status_t,
        ),
    >,
    pub on_document_available_in_main_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_request_handler_t, browser: *mut _cef_browser_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_request_handler_t"][::std::mem::size_of::<_cef_request_handler_t>() - 60usize];
    ["Alignment of _cef_request_handler_t"]
        [::std::mem::align_of::<_cef_request_handler_t>() - 4usize];
    ["Offset of field: _cef_request_handler_t::base"]
        [::std::mem::offset_of!(_cef_request_handler_t, base) - 0usize];
    ["Offset of field: _cef_request_handler_t::on_before_browse"]
        [::std::mem::offset_of!(_cef_request_handler_t, on_before_browse) - 20usize];
    ["Offset of field: _cef_request_handler_t::on_open_urlfrom_tab"]
        [::std::mem::offset_of!(_cef_request_handler_t, on_open_urlfrom_tab) - 24usize];
    ["Offset of field: _cef_request_handler_t::get_resource_request_handler"]
        [::std::mem::offset_of!(_cef_request_handler_t, get_resource_request_handler) - 28usize];
    ["Offset of field: _cef_request_handler_t::get_auth_credentials"]
        [::std::mem::offset_of!(_cef_request_handler_t, get_auth_credentials) - 32usize];
    ["Offset of field: _cef_request_handler_t::on_quota_request"]
        [::std::mem::offset_of!(_cef_request_handler_t, on_quota_request) - 36usize];
    ["Offset of field: _cef_request_handler_t::on_certificate_error"]
        [::std::mem::offset_of!(_cef_request_handler_t, on_certificate_error) - 40usize];
    ["Offset of field: _cef_request_handler_t::on_select_client_certificate"]
        [::std::mem::offset_of!(_cef_request_handler_t, on_select_client_certificate) - 44usize];
    ["Offset of field: _cef_request_handler_t::on_render_view_ready"]
        [::std::mem::offset_of!(_cef_request_handler_t, on_render_view_ready) - 48usize];
    ["Offset of field: _cef_request_handler_t::on_render_process_terminated"]
        [::std::mem::offset_of!(_cef_request_handler_t, on_render_process_terminated) - 52usize];
    ["Offset of field: _cef_request_handler_t::on_document_available_in_main_frame"][::std::mem::offset_of!(
        _cef_request_handler_t,
        on_document_available_in_main_frame
    ) - 56usize];
};
pub type cef_request_handler_t = _cef_request_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_client_t {
    pub base: cef_base_ref_counted_t,
    pub get_audio_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_audio_handler_t,
    >,
    pub get_command_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_command_handler_t,
    >,
    pub get_context_menu_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_context_menu_handler_t,
    >,
    pub get_dialog_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_dialog_handler_t,
    >,
    pub get_display_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_display_handler_t,
    >,
    pub get_download_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_download_handler_t,
    >,
    pub get_drag_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_drag_handler_t,
    >,
    pub get_find_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_find_handler_t,
    >,
    pub get_focus_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_focus_handler_t,
    >,
    pub get_frame_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_frame_handler_t,
    >,
    pub get_jsdialog_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_jsdialog_handler_t,
    >,
    pub get_keyboard_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_keyboard_handler_t,
    >,
    pub get_life_span_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_life_span_handler_t,
    >,
    pub get_load_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_load_handler_t,
    >,
    pub get_print_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_print_handler_t,
    >,
    pub get_render_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_render_handler_t,
    >,
    pub get_request_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_client_t) -> *mut _cef_request_handler_t,
    >,
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_client_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t,
            message: *mut _cef_process_message_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_client_t"][::std::mem::size_of::<_cef_client_t>() - 92usize];
    ["Alignment of _cef_client_t"][::std::mem::align_of::<_cef_client_t>() - 4usize];
    ["Offset of field: _cef_client_t::base"][::std::mem::offset_of!(_cef_client_t, base) - 0usize];
    ["Offset of field: _cef_client_t::get_audio_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_audio_handler) - 20usize];
    ["Offset of field: _cef_client_t::get_command_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_command_handler) - 24usize];
    ["Offset of field: _cef_client_t::get_context_menu_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_context_menu_handler) - 28usize];
    ["Offset of field: _cef_client_t::get_dialog_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_dialog_handler) - 32usize];
    ["Offset of field: _cef_client_t::get_display_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_display_handler) - 36usize];
    ["Offset of field: _cef_client_t::get_download_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_download_handler) - 40usize];
    ["Offset of field: _cef_client_t::get_drag_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_drag_handler) - 44usize];
    ["Offset of field: _cef_client_t::get_find_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_find_handler) - 48usize];
    ["Offset of field: _cef_client_t::get_focus_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_focus_handler) - 52usize];
    ["Offset of field: _cef_client_t::get_frame_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_frame_handler) - 56usize];
    ["Offset of field: _cef_client_t::get_jsdialog_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_jsdialog_handler) - 60usize];
    ["Offset of field: _cef_client_t::get_keyboard_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_keyboard_handler) - 64usize];
    ["Offset of field: _cef_client_t::get_life_span_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_life_span_handler) - 68usize];
    ["Offset of field: _cef_client_t::get_load_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_load_handler) - 72usize];
    ["Offset of field: _cef_client_t::get_print_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_print_handler) - 76usize];
    ["Offset of field: _cef_client_t::get_render_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_render_handler) - 80usize];
    ["Offset of field: _cef_client_t::get_request_handler"]
        [::std::mem::offset_of!(_cef_client_t, get_request_handler) - 84usize];
    ["Offset of field: _cef_client_t::on_process_message_received"]
        [::std::mem::offset_of!(_cef_client_t, on_process_message_received) - 88usize];
};
pub type cef_client_t = _cef_client_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_command_line_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> *mut _cef_command_line_t,
    >,
    pub init_from_argv: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
        ),
    >,
    pub init_from_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, command_line: *const cef_string_t),
    >,
    pub reset: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_command_line_t)>,
    pub get_argv: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, argv: cef_string_list_t),
    >,
    pub get_command_line_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t,
    >,
    pub get_program: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> cef_string_userfree_t,
    >,
    pub set_program: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, program: *const cef_string_t),
    >,
    pub has_switches: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub has_switch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_switch_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
        ) -> cef_string_userfree_t,
    >,
    pub get_switches: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, switches: cef_string_map_t),
    >,
    pub append_switch: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, name: *const cef_string_t),
    >,
    pub append_switch_with_value: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_command_line_t,
            name: *const cef_string_t,
            value: *const cef_string_t,
        ),
    >,
    pub has_arguments: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t) -> ::std::os::raw::c_int,
    >,
    pub get_arguments: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, arguments: cef_string_list_t),
    >,
    pub append_argument: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, argument: *const cef_string_t),
    >,
    pub prepend_wrapper: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_command_line_t, wrapper: *const cef_string_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_command_line_t"][::std::mem::size_of::<_cef_command_line_t>() - 100usize];
    ["Alignment of _cef_command_line_t"][::std::mem::align_of::<_cef_command_line_t>() - 4usize];
    ["Offset of field: _cef_command_line_t::base"]
        [::std::mem::offset_of!(_cef_command_line_t, base) - 0usize];
    ["Offset of field: _cef_command_line_t::is_valid"]
        [::std::mem::offset_of!(_cef_command_line_t, is_valid) - 20usize];
    ["Offset of field: _cef_command_line_t::is_read_only"]
        [::std::mem::offset_of!(_cef_command_line_t, is_read_only) - 24usize];
    ["Offset of field: _cef_command_line_t::copy"]
        [::std::mem::offset_of!(_cef_command_line_t, copy) - 28usize];
    ["Offset of field: _cef_command_line_t::init_from_argv"]
        [::std::mem::offset_of!(_cef_command_line_t, init_from_argv) - 32usize];
    ["Offset of field: _cef_command_line_t::init_from_string"]
        [::std::mem::offset_of!(_cef_command_line_t, init_from_string) - 36usize];
    ["Offset of field: _cef_command_line_t::reset"]
        [::std::mem::offset_of!(_cef_command_line_t, reset) - 40usize];
    ["Offset of field: _cef_command_line_t::get_argv"]
        [::std::mem::offset_of!(_cef_command_line_t, get_argv) - 44usize];
    ["Offset of field: _cef_command_line_t::get_command_line_string"]
        [::std::mem::offset_of!(_cef_command_line_t, get_command_line_string) - 48usize];
    ["Offset of field: _cef_command_line_t::get_program"]
        [::std::mem::offset_of!(_cef_command_line_t, get_program) - 52usize];
    ["Offset of field: _cef_command_line_t::set_program"]
        [::std::mem::offset_of!(_cef_command_line_t, set_program) - 56usize];
    ["Offset of field: _cef_command_line_t::has_switches"]
        [::std::mem::offset_of!(_cef_command_line_t, has_switches) - 60usize];
    ["Offset of field: _cef_command_line_t::has_switch"]
        [::std::mem::offset_of!(_cef_command_line_t, has_switch) - 64usize];
    ["Offset of field: _cef_command_line_t::get_switch_value"]
        [::std::mem::offset_of!(_cef_command_line_t, get_switch_value) - 68usize];
    ["Offset of field: _cef_command_line_t::get_switches"]
        [::std::mem::offset_of!(_cef_command_line_t, get_switches) - 72usize];
    ["Offset of field: _cef_command_line_t::append_switch"]
        [::std::mem::offset_of!(_cef_command_line_t, append_switch) - 76usize];
    ["Offset of field: _cef_command_line_t::append_switch_with_value"]
        [::std::mem::offset_of!(_cef_command_line_t, append_switch_with_value) - 80usize];
    ["Offset of field: _cef_command_line_t::has_arguments"]
        [::std::mem::offset_of!(_cef_command_line_t, has_arguments) - 84usize];
    ["Offset of field: _cef_command_line_t::get_arguments"]
        [::std::mem::offset_of!(_cef_command_line_t, get_arguments) - 88usize];
    ["Offset of field: _cef_command_line_t::append_argument"]
        [::std::mem::offset_of!(_cef_command_line_t, append_argument) - 92usize];
    ["Offset of field: _cef_command_line_t::prepend_wrapper"]
        [::std::mem::offset_of!(_cef_command_line_t, prepend_wrapper) - 96usize];
};
pub type cef_command_line_t = _cef_command_line_t;
unsafe extern "C" {
    pub fn cef_command_line_create() -> *mut cef_command_line_t;
}
unsafe extern "C" {
    pub fn cef_command_line_get_global() -> *mut cef_command_line_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_process_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_context_initialized:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_browser_process_handler_t)>,
    pub on_before_child_process_launch: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_process_handler_t,
            command_line: *mut _cef_command_line_t,
        ),
    >,
    pub on_schedule_message_pump_work: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_process_handler_t, delay_ms: int64),
    >,
    pub get_default_client: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_process_handler_t) -> *mut _cef_client_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_browser_process_handler_t"]
        [::std::mem::size_of::<_cef_browser_process_handler_t>() - 36usize];
    ["Alignment of _cef_browser_process_handler_t"]
        [::std::mem::align_of::<_cef_browser_process_handler_t>() - 4usize];
    ["Offset of field: _cef_browser_process_handler_t::base"]
        [::std::mem::offset_of!(_cef_browser_process_handler_t, base) - 0usize];
    ["Offset of field: _cef_browser_process_handler_t::on_context_initialized"]
        [::std::mem::offset_of!(_cef_browser_process_handler_t, on_context_initialized) - 20usize];
    ["Offset of field: _cef_browser_process_handler_t::on_before_child_process_launch"][::std::mem::offset_of!(
        _cef_browser_process_handler_t,
        on_before_child_process_launch
    )
        - 24usize];
    ["Offset of field: _cef_browser_process_handler_t::on_schedule_message_pump_work"][::std::mem::offset_of!(
        _cef_browser_process_handler_t,
        on_schedule_message_pump_work
    ) - 28usize];
    ["Offset of field: _cef_browser_process_handler_t::get_default_client"]
        [::std::mem::offset_of!(_cef_browser_process_handler_t, get_default_client) - 32usize];
};
pub type cef_browser_process_handler_t = _cef_browser_process_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_task_t {
    pub base: cef_base_ref_counted_t,
    pub execute: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_task_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_task_t"][::std::mem::size_of::<_cef_task_t>() - 24usize];
    ["Alignment of _cef_task_t"][::std::mem::align_of::<_cef_task_t>() - 4usize];
    ["Offset of field: _cef_task_t::base"][::std::mem::offset_of!(_cef_task_t, base) - 0usize];
    ["Offset of field: _cef_task_t::execute"]
        [::std::mem::offset_of!(_cef_task_t, execute) - 20usize];
};
pub type cef_task_t = _cef_task_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_task_runner_t {
    pub base: cef_base_ref_counted_t,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            that: *mut _cef_task_runner_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub belongs_to_current_thread: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_task_runner_t) -> ::std::os::raw::c_int,
    >,
    pub belongs_to_thread: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            threadId: cef_thread_id_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub post_task: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub post_delayed_task: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_task_runner_t,
            task: *mut _cef_task_t,
            delay_ms: int64,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_task_runner_t"][::std::mem::size_of::<_cef_task_runner_t>() - 40usize];
    ["Alignment of _cef_task_runner_t"][::std::mem::align_of::<_cef_task_runner_t>() - 4usize];
    ["Offset of field: _cef_task_runner_t::base"]
        [::std::mem::offset_of!(_cef_task_runner_t, base) - 0usize];
    ["Offset of field: _cef_task_runner_t::is_same"]
        [::std::mem::offset_of!(_cef_task_runner_t, is_same) - 20usize];
    ["Offset of field: _cef_task_runner_t::belongs_to_current_thread"]
        [::std::mem::offset_of!(_cef_task_runner_t, belongs_to_current_thread) - 24usize];
    ["Offset of field: _cef_task_runner_t::belongs_to_thread"]
        [::std::mem::offset_of!(_cef_task_runner_t, belongs_to_thread) - 28usize];
    ["Offset of field: _cef_task_runner_t::post_task"]
        [::std::mem::offset_of!(_cef_task_runner_t, post_task) - 32usize];
    ["Offset of field: _cef_task_runner_t::post_delayed_task"]
        [::std::mem::offset_of!(_cef_task_runner_t, post_delayed_task) - 36usize];
};
pub type cef_task_runner_t = _cef_task_runner_t;
unsafe extern "C" {
    pub fn cef_task_runner_get_for_current_thread() -> *mut cef_task_runner_t;
}
unsafe extern "C" {
    pub fn cef_task_runner_get_for_thread(threadId: cef_thread_id_t) -> *mut cef_task_runner_t;
}
unsafe extern "C" {
    pub fn cef_currently_on(threadId: cef_thread_id_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_post_task(threadId: cef_thread_id_t, task: *mut cef_task_t)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_post_delayed_task(
        threadId: cef_thread_id_t,
        task: *mut cef_task_t,
        delay_ms: int64,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8context_t {
    pub base: cef_base_ref_counted_t,
    pub get_task_runner: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_task_runner_t,
    >,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_browser_t,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_frame_t,
    >,
    pub get_global: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> *mut _cef_v8value_t,
    >,
    pub enter: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    pub exit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8context_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8context_t,
            that: *mut _cef_v8context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub eval: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8context_t,
            code: *const cef_string_t,
            script_url: *const cef_string_t,
            start_line: ::std::os::raw::c_int,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut *mut _cef_v8exception_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_v8context_t"][::std::mem::size_of::<_cef_v8context_t>() - 56usize];
    ["Alignment of _cef_v8context_t"][::std::mem::align_of::<_cef_v8context_t>() - 4usize];
    ["Offset of field: _cef_v8context_t::base"]
        [::std::mem::offset_of!(_cef_v8context_t, base) - 0usize];
    ["Offset of field: _cef_v8context_t::get_task_runner"]
        [::std::mem::offset_of!(_cef_v8context_t, get_task_runner) - 20usize];
    ["Offset of field: _cef_v8context_t::is_valid"]
        [::std::mem::offset_of!(_cef_v8context_t, is_valid) - 24usize];
    ["Offset of field: _cef_v8context_t::get_browser"]
        [::std::mem::offset_of!(_cef_v8context_t, get_browser) - 28usize];
    ["Offset of field: _cef_v8context_t::get_frame"]
        [::std::mem::offset_of!(_cef_v8context_t, get_frame) - 32usize];
    ["Offset of field: _cef_v8context_t::get_global"]
        [::std::mem::offset_of!(_cef_v8context_t, get_global) - 36usize];
    ["Offset of field: _cef_v8context_t::enter"]
        [::std::mem::offset_of!(_cef_v8context_t, enter) - 40usize];
    ["Offset of field: _cef_v8context_t::exit"]
        [::std::mem::offset_of!(_cef_v8context_t, exit) - 44usize];
    ["Offset of field: _cef_v8context_t::is_same"]
        [::std::mem::offset_of!(_cef_v8context_t, is_same) - 48usize];
    ["Offset of field: _cef_v8context_t::eval"]
        [::std::mem::offset_of!(_cef_v8context_t, eval) - 52usize];
};
pub type cef_v8context_t = _cef_v8context_t;
unsafe extern "C" {
    pub fn cef_v8context_get_current_context() -> *mut cef_v8context_t;
}
unsafe extern "C" {
    pub fn cef_v8context_get_entered_context() -> *mut cef_v8context_t;
}
unsafe extern "C" {
    pub fn cef_v8context_in_context() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8handler_t {
    pub base: cef_base_ref_counted_t,
    pub execute: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8handler_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_v8handler_t"][::std::mem::size_of::<_cef_v8handler_t>() - 24usize];
    ["Alignment of _cef_v8handler_t"][::std::mem::align_of::<_cef_v8handler_t>() - 4usize];
    ["Offset of field: _cef_v8handler_t::base"]
        [::std::mem::offset_of!(_cef_v8handler_t, base) - 0usize];
    ["Offset of field: _cef_v8handler_t::execute"]
        [::std::mem::offset_of!(_cef_v8handler_t, execute) - 20usize];
};
pub type cef_v8handler_t = _cef_v8handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8accessor_t {
    pub base: cef_base_ref_counted_t,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8accessor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_v8accessor_t"][::std::mem::size_of::<_cef_v8accessor_t>() - 28usize];
    ["Alignment of _cef_v8accessor_t"][::std::mem::align_of::<_cef_v8accessor_t>() - 4usize];
    ["Offset of field: _cef_v8accessor_t::base"]
        [::std::mem::offset_of!(_cef_v8accessor_t, base) - 0usize];
    ["Offset of field: _cef_v8accessor_t::get"]
        [::std::mem::offset_of!(_cef_v8accessor_t, get) - 20usize];
    ["Offset of field: _cef_v8accessor_t::set"]
        [::std::mem::offset_of!(_cef_v8accessor_t, set) - 24usize];
};
pub type cef_v8accessor_t = _cef_v8accessor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8interceptor_t {
    pub base: cef_base_ref_counted_t,
    pub get_byname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            retval: *mut *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_byname: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            name: *const cef_string_t,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8interceptor_t,
            index: ::std::os::raw::c_int,
            object: *mut _cef_v8value_t,
            value: *mut _cef_v8value_t,
            exception: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_v8interceptor_t"][::std::mem::size_of::<_cef_v8interceptor_t>() - 36usize];
    ["Alignment of _cef_v8interceptor_t"][::std::mem::align_of::<_cef_v8interceptor_t>() - 4usize];
    ["Offset of field: _cef_v8interceptor_t::base"]
        [::std::mem::offset_of!(_cef_v8interceptor_t, base) - 0usize];
    ["Offset of field: _cef_v8interceptor_t::get_byname"]
        [::std::mem::offset_of!(_cef_v8interceptor_t, get_byname) - 20usize];
    ["Offset of field: _cef_v8interceptor_t::get_byindex"]
        [::std::mem::offset_of!(_cef_v8interceptor_t, get_byindex) - 24usize];
    ["Offset of field: _cef_v8interceptor_t::set_byname"]
        [::std::mem::offset_of!(_cef_v8interceptor_t, set_byname) - 28usize];
    ["Offset of field: _cef_v8interceptor_t::set_byindex"]
        [::std::mem::offset_of!(_cef_v8interceptor_t, set_byindex) - 32usize];
};
pub type cef_v8interceptor_t = _cef_v8interceptor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8exception_t {
    pub base: cef_base_ref_counted_t,
    pub get_message: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    pub get_source_line: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    pub get_script_resource_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> cef_string_userfree_t,
    >,
    pub get_line_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_start_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_end_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_start_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
    pub get_end_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8exception_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_v8exception_t"][::std::mem::size_of::<_cef_v8exception_t>() - 52usize];
    ["Alignment of _cef_v8exception_t"][::std::mem::align_of::<_cef_v8exception_t>() - 4usize];
    ["Offset of field: _cef_v8exception_t::base"]
        [::std::mem::offset_of!(_cef_v8exception_t, base) - 0usize];
    ["Offset of field: _cef_v8exception_t::get_message"]
        [::std::mem::offset_of!(_cef_v8exception_t, get_message) - 20usize];
    ["Offset of field: _cef_v8exception_t::get_source_line"]
        [::std::mem::offset_of!(_cef_v8exception_t, get_source_line) - 24usize];
    ["Offset of field: _cef_v8exception_t::get_script_resource_name"]
        [::std::mem::offset_of!(_cef_v8exception_t, get_script_resource_name) - 28usize];
    ["Offset of field: _cef_v8exception_t::get_line_number"]
        [::std::mem::offset_of!(_cef_v8exception_t, get_line_number) - 32usize];
    ["Offset of field: _cef_v8exception_t::get_start_position"]
        [::std::mem::offset_of!(_cef_v8exception_t, get_start_position) - 36usize];
    ["Offset of field: _cef_v8exception_t::get_end_position"]
        [::std::mem::offset_of!(_cef_v8exception_t, get_end_position) - 40usize];
    ["Offset of field: _cef_v8exception_t::get_start_column"]
        [::std::mem::offset_of!(_cef_v8exception_t, get_start_column) - 44usize];
    ["Offset of field: _cef_v8exception_t::get_end_column"]
        [::std::mem::offset_of!(_cef_v8exception_t, get_end_column) - 48usize];
};
pub type cef_v8exception_t = _cef_v8exception_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8array_buffer_release_callback_t {
    pub base: cef_base_ref_counted_t,
    pub release_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8array_buffer_release_callback_t,
            buffer: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_v8array_buffer_release_callback_t"]
        [::std::mem::size_of::<_cef_v8array_buffer_release_callback_t>() - 24usize];
    ["Alignment of _cef_v8array_buffer_release_callback_t"]
        [::std::mem::align_of::<_cef_v8array_buffer_release_callback_t>() - 4usize];
    ["Offset of field: _cef_v8array_buffer_release_callback_t::base"]
        [::std::mem::offset_of!(_cef_v8array_buffer_release_callback_t, base) - 0usize];
    ["Offset of field: _cef_v8array_buffer_release_callback_t::release_buffer"]
        [::std::mem::offset_of!(_cef_v8array_buffer_release_callback_t, release_buffer) - 20usize];
};
pub type cef_v8array_buffer_release_callback_t = _cef_v8array_buffer_release_callback_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8value_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_undefined: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_null: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_bool: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_int: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_uint: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_double: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_date: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_object: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_array: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_array_buffer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_function: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            that: *mut _cef_v8value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_bool_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_int_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> int32>,
    pub get_uint_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> uint32>,
    pub get_double_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> f64>,
    pub get_date_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_time_t>,
    pub get_string_value: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t,
    >,
    pub is_user_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub has_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8exception_t,
    >,
    pub clear_exception: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub will_rethrow_exceptions: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub set_rethrow_exceptions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            rethrow: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub has_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub delete_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
        ) -> *mut _cef_v8value_t,
    >,
    pub get_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_v8value_t,
    >,
    pub set_value_bykey: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            value: *mut _cef_v8value_t,
            attribute: cef_v8_propertyattribute_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_value_byindex: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            index: ::std::os::raw::c_int,
            value: *mut _cef_v8value_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_value_byaccessor: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            key: *const cef_string_t,
            settings: cef_v8_accesscontrol_t,
            attribute: cef_v8_propertyattribute_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_keys: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            keys: cef_string_list_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub set_user_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            user_data: *mut _cef_base_ref_counted_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_user_data: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_base_ref_counted_t,
    >,
    pub get_externally_allocated_memory: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub adjust_externally_allocated_memory: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            change_in_bytes: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_array_length: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_array_buffer_release_callback: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
        ) -> *mut _cef_v8array_buffer_release_callback_t,
    >,
    pub neuter_array_buffer: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> ::std::os::raw::c_int,
    >,
    pub get_function_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> cef_string_userfree_t,
    >,
    pub get_function_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8value_t) -> *mut _cef_v8handler_t,
    >,
    pub execute_function: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
        ) -> *mut _cef_v8value_t,
    >,
    pub execute_function_with_context: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8value_t,
            context: *mut _cef_v8context_t,
            object: *mut _cef_v8value_t,
            argumentsCount: usize,
            arguments: *const *mut _cef_v8value_t,
        ) -> *mut _cef_v8value_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_v8value_t"][::std::mem::size_of::<_cef_v8value_t>() - 208usize];
    ["Alignment of _cef_v8value_t"][::std::mem::align_of::<_cef_v8value_t>() - 4usize];
    ["Offset of field: _cef_v8value_t::base"]
        [::std::mem::offset_of!(_cef_v8value_t, base) - 0usize];
    ["Offset of field: _cef_v8value_t::is_valid"]
        [::std::mem::offset_of!(_cef_v8value_t, is_valid) - 20usize];
    ["Offset of field: _cef_v8value_t::is_undefined"]
        [::std::mem::offset_of!(_cef_v8value_t, is_undefined) - 24usize];
    ["Offset of field: _cef_v8value_t::is_null"]
        [::std::mem::offset_of!(_cef_v8value_t, is_null) - 28usize];
    ["Offset of field: _cef_v8value_t::is_bool"]
        [::std::mem::offset_of!(_cef_v8value_t, is_bool) - 32usize];
    ["Offset of field: _cef_v8value_t::is_int"]
        [::std::mem::offset_of!(_cef_v8value_t, is_int) - 36usize];
    ["Offset of field: _cef_v8value_t::is_uint"]
        [::std::mem::offset_of!(_cef_v8value_t, is_uint) - 40usize];
    ["Offset of field: _cef_v8value_t::is_double"]
        [::std::mem::offset_of!(_cef_v8value_t, is_double) - 44usize];
    ["Offset of field: _cef_v8value_t::is_date"]
        [::std::mem::offset_of!(_cef_v8value_t, is_date) - 48usize];
    ["Offset of field: _cef_v8value_t::is_string"]
        [::std::mem::offset_of!(_cef_v8value_t, is_string) - 52usize];
    ["Offset of field: _cef_v8value_t::is_object"]
        [::std::mem::offset_of!(_cef_v8value_t, is_object) - 56usize];
    ["Offset of field: _cef_v8value_t::is_array"]
        [::std::mem::offset_of!(_cef_v8value_t, is_array) - 60usize];
    ["Offset of field: _cef_v8value_t::is_array_buffer"]
        [::std::mem::offset_of!(_cef_v8value_t, is_array_buffer) - 64usize];
    ["Offset of field: _cef_v8value_t::is_function"]
        [::std::mem::offset_of!(_cef_v8value_t, is_function) - 68usize];
    ["Offset of field: _cef_v8value_t::is_same"]
        [::std::mem::offset_of!(_cef_v8value_t, is_same) - 72usize];
    ["Offset of field: _cef_v8value_t::get_bool_value"]
        [::std::mem::offset_of!(_cef_v8value_t, get_bool_value) - 76usize];
    ["Offset of field: _cef_v8value_t::get_int_value"]
        [::std::mem::offset_of!(_cef_v8value_t, get_int_value) - 80usize];
    ["Offset of field: _cef_v8value_t::get_uint_value"]
        [::std::mem::offset_of!(_cef_v8value_t, get_uint_value) - 84usize];
    ["Offset of field: _cef_v8value_t::get_double_value"]
        [::std::mem::offset_of!(_cef_v8value_t, get_double_value) - 88usize];
    ["Offset of field: _cef_v8value_t::get_date_value"]
        [::std::mem::offset_of!(_cef_v8value_t, get_date_value) - 92usize];
    ["Offset of field: _cef_v8value_t::get_string_value"]
        [::std::mem::offset_of!(_cef_v8value_t, get_string_value) - 96usize];
    ["Offset of field: _cef_v8value_t::is_user_created"]
        [::std::mem::offset_of!(_cef_v8value_t, is_user_created) - 100usize];
    ["Offset of field: _cef_v8value_t::has_exception"]
        [::std::mem::offset_of!(_cef_v8value_t, has_exception) - 104usize];
    ["Offset of field: _cef_v8value_t::get_exception"]
        [::std::mem::offset_of!(_cef_v8value_t, get_exception) - 108usize];
    ["Offset of field: _cef_v8value_t::clear_exception"]
        [::std::mem::offset_of!(_cef_v8value_t, clear_exception) - 112usize];
    ["Offset of field: _cef_v8value_t::will_rethrow_exceptions"]
        [::std::mem::offset_of!(_cef_v8value_t, will_rethrow_exceptions) - 116usize];
    ["Offset of field: _cef_v8value_t::set_rethrow_exceptions"]
        [::std::mem::offset_of!(_cef_v8value_t, set_rethrow_exceptions) - 120usize];
    ["Offset of field: _cef_v8value_t::has_value_bykey"]
        [::std::mem::offset_of!(_cef_v8value_t, has_value_bykey) - 124usize];
    ["Offset of field: _cef_v8value_t::has_value_byindex"]
        [::std::mem::offset_of!(_cef_v8value_t, has_value_byindex) - 128usize];
    ["Offset of field: _cef_v8value_t::delete_value_bykey"]
        [::std::mem::offset_of!(_cef_v8value_t, delete_value_bykey) - 132usize];
    ["Offset of field: _cef_v8value_t::delete_value_byindex"]
        [::std::mem::offset_of!(_cef_v8value_t, delete_value_byindex) - 136usize];
    ["Offset of field: _cef_v8value_t::get_value_bykey"]
        [::std::mem::offset_of!(_cef_v8value_t, get_value_bykey) - 140usize];
    ["Offset of field: _cef_v8value_t::get_value_byindex"]
        [::std::mem::offset_of!(_cef_v8value_t, get_value_byindex) - 144usize];
    ["Offset of field: _cef_v8value_t::set_value_bykey"]
        [::std::mem::offset_of!(_cef_v8value_t, set_value_bykey) - 148usize];
    ["Offset of field: _cef_v8value_t::set_value_byindex"]
        [::std::mem::offset_of!(_cef_v8value_t, set_value_byindex) - 152usize];
    ["Offset of field: _cef_v8value_t::set_value_byaccessor"]
        [::std::mem::offset_of!(_cef_v8value_t, set_value_byaccessor) - 156usize];
    ["Offset of field: _cef_v8value_t::get_keys"]
        [::std::mem::offset_of!(_cef_v8value_t, get_keys) - 160usize];
    ["Offset of field: _cef_v8value_t::set_user_data"]
        [::std::mem::offset_of!(_cef_v8value_t, set_user_data) - 164usize];
    ["Offset of field: _cef_v8value_t::get_user_data"]
        [::std::mem::offset_of!(_cef_v8value_t, get_user_data) - 168usize];
    ["Offset of field: _cef_v8value_t::get_externally_allocated_memory"]
        [::std::mem::offset_of!(_cef_v8value_t, get_externally_allocated_memory) - 172usize];
    ["Offset of field: _cef_v8value_t::adjust_externally_allocated_memory"]
        [::std::mem::offset_of!(_cef_v8value_t, adjust_externally_allocated_memory) - 176usize];
    ["Offset of field: _cef_v8value_t::get_array_length"]
        [::std::mem::offset_of!(_cef_v8value_t, get_array_length) - 180usize];
    ["Offset of field: _cef_v8value_t::get_array_buffer_release_callback"]
        [::std::mem::offset_of!(_cef_v8value_t, get_array_buffer_release_callback) - 184usize];
    ["Offset of field: _cef_v8value_t::neuter_array_buffer"]
        [::std::mem::offset_of!(_cef_v8value_t, neuter_array_buffer) - 188usize];
    ["Offset of field: _cef_v8value_t::get_function_name"]
        [::std::mem::offset_of!(_cef_v8value_t, get_function_name) - 192usize];
    ["Offset of field: _cef_v8value_t::get_function_handler"]
        [::std::mem::offset_of!(_cef_v8value_t, get_function_handler) - 196usize];
    ["Offset of field: _cef_v8value_t::execute_function"]
        [::std::mem::offset_of!(_cef_v8value_t, execute_function) - 200usize];
    ["Offset of field: _cef_v8value_t::execute_function_with_context"]
        [::std::mem::offset_of!(_cef_v8value_t, execute_function_with_context) - 204usize];
};
pub type cef_v8value_t = _cef_v8value_t;
unsafe extern "C" {
    pub fn cef_v8value_create_undefined() -> *mut cef_v8value_t;
}
unsafe extern "C" {
    pub fn cef_v8value_create_null() -> *mut cef_v8value_t;
}
unsafe extern "C" {
    pub fn cef_v8value_create_bool(value: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
unsafe extern "C" {
    pub fn cef_v8value_create_int(value: int32) -> *mut cef_v8value_t;
}
unsafe extern "C" {
    pub fn cef_v8value_create_uint(value: uint32) -> *mut cef_v8value_t;
}
unsafe extern "C" {
    pub fn cef_v8value_create_double(value: f64) -> *mut cef_v8value_t;
}
unsafe extern "C" {
    pub fn cef_v8value_create_date(date: *const cef_time_t) -> *mut cef_v8value_t;
}
unsafe extern "C" {
    pub fn cef_v8value_create_string(value: *const cef_string_t) -> *mut cef_v8value_t;
}
unsafe extern "C" {
    pub fn cef_v8value_create_object(
        accessor: *mut cef_v8accessor_t,
        interceptor: *mut cef_v8interceptor_t,
    ) -> *mut cef_v8value_t;
}
unsafe extern "C" {
    pub fn cef_v8value_create_array(length: ::std::os::raw::c_int) -> *mut cef_v8value_t;
}
unsafe extern "C" {
    pub fn cef_v8value_create_array_buffer(
        buffer: *mut ::std::os::raw::c_void,
        length: usize,
        release_callback: *mut cef_v8array_buffer_release_callback_t,
    ) -> *mut cef_v8value_t;
}
unsafe extern "C" {
    pub fn cef_v8value_create_function(
        name: *const cef_string_t,
        handler: *mut cef_v8handler_t,
    ) -> *mut cef_v8value_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8stack_trace_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int,
    >,
    pub get_frame_count: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_trace_t) -> ::std::os::raw::c_int,
    >,
    pub get_frame: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_v8stack_trace_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_v8stack_frame_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_v8stack_trace_t"][::std::mem::size_of::<_cef_v8stack_trace_t>() - 32usize];
    ["Alignment of _cef_v8stack_trace_t"][::std::mem::align_of::<_cef_v8stack_trace_t>() - 4usize];
    ["Offset of field: _cef_v8stack_trace_t::base"]
        [::std::mem::offset_of!(_cef_v8stack_trace_t, base) - 0usize];
    ["Offset of field: _cef_v8stack_trace_t::is_valid"]
        [::std::mem::offset_of!(_cef_v8stack_trace_t, is_valid) - 20usize];
    ["Offset of field: _cef_v8stack_trace_t::get_frame_count"]
        [::std::mem::offset_of!(_cef_v8stack_trace_t, get_frame_count) - 24usize];
    ["Offset of field: _cef_v8stack_trace_t::get_frame"]
        [::std::mem::offset_of!(_cef_v8stack_trace_t, get_frame) - 28usize];
};
pub type cef_v8stack_trace_t = _cef_v8stack_trace_t;
unsafe extern "C" {
    pub fn cef_v8stack_trace_get_current(
        frame_limit: ::std::os::raw::c_int,
    ) -> *mut cef_v8stack_trace_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_v8stack_frame_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub get_script_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    pub get_script_name_or_source_url: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    pub get_function_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> cef_string_userfree_t,
    >,
    pub get_line_number: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub get_column: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub is_eval: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
    pub is_constructor: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_v8stack_frame_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_v8stack_frame_t"][::std::mem::size_of::<_cef_v8stack_frame_t>() - 52usize];
    ["Alignment of _cef_v8stack_frame_t"][::std::mem::align_of::<_cef_v8stack_frame_t>() - 4usize];
    ["Offset of field: _cef_v8stack_frame_t::base"]
        [::std::mem::offset_of!(_cef_v8stack_frame_t, base) - 0usize];
    ["Offset of field: _cef_v8stack_frame_t::is_valid"]
        [::std::mem::offset_of!(_cef_v8stack_frame_t, is_valid) - 20usize];
    ["Offset of field: _cef_v8stack_frame_t::get_script_name"]
        [::std::mem::offset_of!(_cef_v8stack_frame_t, get_script_name) - 24usize];
    ["Offset of field: _cef_v8stack_frame_t::get_script_name_or_source_url"]
        [::std::mem::offset_of!(_cef_v8stack_frame_t, get_script_name_or_source_url) - 28usize];
    ["Offset of field: _cef_v8stack_frame_t::get_function_name"]
        [::std::mem::offset_of!(_cef_v8stack_frame_t, get_function_name) - 32usize];
    ["Offset of field: _cef_v8stack_frame_t::get_line_number"]
        [::std::mem::offset_of!(_cef_v8stack_frame_t, get_line_number) - 36usize];
    ["Offset of field: _cef_v8stack_frame_t::get_column"]
        [::std::mem::offset_of!(_cef_v8stack_frame_t, get_column) - 40usize];
    ["Offset of field: _cef_v8stack_frame_t::is_eval"]
        [::std::mem::offset_of!(_cef_v8stack_frame_t, is_eval) - 44usize];
    ["Offset of field: _cef_v8stack_frame_t::is_constructor"]
        [::std::mem::offset_of!(_cef_v8stack_frame_t, is_constructor) - 48usize];
};
pub type cef_v8stack_frame_t = _cef_v8stack_frame_t;
unsafe extern "C" {
    pub fn cef_register_extension(
        extension_name: *const cef_string_t,
        javascript_code: *const cef_string_t,
        handler: *mut cef_v8handler_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_render_process_handler_t {
    pub base: cef_base_ref_counted_t,
    pub on_web_kit_initialized:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_render_process_handler_t)>,
    pub on_browser_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            extra_info: *mut _cef_dictionary_value_t,
        ),
    >,
    pub on_browser_destroyed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    pub get_load_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_render_process_handler_t) -> *mut _cef_load_handler_t,
    >,
    pub on_context_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
        ),
    >,
    pub on_context_released: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
        ),
    >,
    pub on_uncaught_exception: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            context: *mut _cef_v8context_t,
            exception: *mut _cef_v8exception_t,
            stackTrace: *mut _cef_v8stack_trace_t,
        ),
    >,
    pub on_focused_node_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            node: *mut _cef_domnode_t,
        ),
    >,
    pub on_process_message_received: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_render_process_handler_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            source_process: cef_process_id_t,
            message: *mut _cef_process_message_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_render_process_handler_t"]
        [::std::mem::size_of::<_cef_render_process_handler_t>() - 56usize];
    ["Alignment of _cef_render_process_handler_t"]
        [::std::mem::align_of::<_cef_render_process_handler_t>() - 4usize];
    ["Offset of field: _cef_render_process_handler_t::base"]
        [::std::mem::offset_of!(_cef_render_process_handler_t, base) - 0usize];
    ["Offset of field: _cef_render_process_handler_t::on_web_kit_initialized"]
        [::std::mem::offset_of!(_cef_render_process_handler_t, on_web_kit_initialized) - 20usize];
    ["Offset of field: _cef_render_process_handler_t::on_browser_created"]
        [::std::mem::offset_of!(_cef_render_process_handler_t, on_browser_created) - 24usize];
    ["Offset of field: _cef_render_process_handler_t::on_browser_destroyed"]
        [::std::mem::offset_of!(_cef_render_process_handler_t, on_browser_destroyed) - 28usize];
    ["Offset of field: _cef_render_process_handler_t::get_load_handler"]
        [::std::mem::offset_of!(_cef_render_process_handler_t, get_load_handler) - 32usize];
    ["Offset of field: _cef_render_process_handler_t::on_context_created"]
        [::std::mem::offset_of!(_cef_render_process_handler_t, on_context_created) - 36usize];
    ["Offset of field: _cef_render_process_handler_t::on_context_released"]
        [::std::mem::offset_of!(_cef_render_process_handler_t, on_context_released) - 40usize];
    ["Offset of field: _cef_render_process_handler_t::on_uncaught_exception"]
        [::std::mem::offset_of!(_cef_render_process_handler_t, on_uncaught_exception) - 44usize];
    ["Offset of field: _cef_render_process_handler_t::on_focused_node_changed"]
        [::std::mem::offset_of!(_cef_render_process_handler_t, on_focused_node_changed) - 48usize];
    ["Offset of field: _cef_render_process_handler_t::on_process_message_received"][::std::mem::offset_of!(
        _cef_render_process_handler_t,
        on_process_message_received
    ) - 52usize];
};
pub type cef_render_process_handler_t = _cef_render_process_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_resource_bundle_handler_t {
    pub base: cef_base_ref_counted_t,
    pub get_localized_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            string_id: ::std::os::raw::c_int,
            string: *mut cef_string_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_data_resource: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_data_resource_for_scale: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_resource_bundle_handler_t,
            resource_id: ::std::os::raw::c_int,
            scale_factor: cef_scale_factor_t,
            data: *mut *mut ::std::os::raw::c_void,
            data_size: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_resource_bundle_handler_t"]
        [::std::mem::size_of::<_cef_resource_bundle_handler_t>() - 32usize];
    ["Alignment of _cef_resource_bundle_handler_t"]
        [::std::mem::align_of::<_cef_resource_bundle_handler_t>() - 4usize];
    ["Offset of field: _cef_resource_bundle_handler_t::base"]
        [::std::mem::offset_of!(_cef_resource_bundle_handler_t, base) - 0usize];
    ["Offset of field: _cef_resource_bundle_handler_t::get_localized_string"]
        [::std::mem::offset_of!(_cef_resource_bundle_handler_t, get_localized_string) - 20usize];
    ["Offset of field: _cef_resource_bundle_handler_t::get_data_resource"]
        [::std::mem::offset_of!(_cef_resource_bundle_handler_t, get_data_resource) - 24usize];
    ["Offset of field: _cef_resource_bundle_handler_t::get_data_resource_for_scale"][::std::mem::offset_of!(
        _cef_resource_bundle_handler_t,
        get_data_resource_for_scale
    ) - 28usize];
};
pub type cef_resource_bundle_handler_t = _cef_resource_bundle_handler_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_scheme_registrar_t {
    pub base: cef_base_scoped_t,
    pub add_custom_scheme: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_scheme_registrar_t,
            scheme_name: *const cef_string_t,
            options: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_scheme_registrar_t"][::std::mem::size_of::<_cef_scheme_registrar_t>() - 12usize];
    ["Alignment of _cef_scheme_registrar_t"]
        [::std::mem::align_of::<_cef_scheme_registrar_t>() - 4usize];
    ["Offset of field: _cef_scheme_registrar_t::base"]
        [::std::mem::offset_of!(_cef_scheme_registrar_t, base) - 0usize];
    ["Offset of field: _cef_scheme_registrar_t::add_custom_scheme"]
        [::std::mem::offset_of!(_cef_scheme_registrar_t, add_custom_scheme) - 8usize];
};
pub type cef_scheme_registrar_t = _cef_scheme_registrar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_scheme_handler_factory_t {
    pub base: cef_base_ref_counted_t,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_scheme_handler_factory_t,
            browser: *mut _cef_browser_t,
            frame: *mut _cef_frame_t,
            scheme_name: *const cef_string_t,
            request: *mut _cef_request_t,
        ) -> *mut _cef_resource_handler_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_scheme_handler_factory_t"]
        [::std::mem::size_of::<_cef_scheme_handler_factory_t>() - 24usize];
    ["Alignment of _cef_scheme_handler_factory_t"]
        [::std::mem::align_of::<_cef_scheme_handler_factory_t>() - 4usize];
    ["Offset of field: _cef_scheme_handler_factory_t::base"]
        [::std::mem::offset_of!(_cef_scheme_handler_factory_t, base) - 0usize];
    ["Offset of field: _cef_scheme_handler_factory_t::create"]
        [::std::mem::offset_of!(_cef_scheme_handler_factory_t, create) - 20usize];
};
pub type cef_scheme_handler_factory_t = _cef_scheme_handler_factory_t;
unsafe extern "C" {
    pub fn cef_register_scheme_handler_factory(
        scheme_name: *const cef_string_t,
        domain_name: *const cef_string_t,
        factory: *mut cef_scheme_handler_factory_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_clear_scheme_handler_factories() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_app_t {
    pub base: cef_base_ref_counted_t,
    pub on_before_command_line_processing: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_app_t,
            process_type: *const cef_string_t,
            command_line: *mut _cef_command_line_t,
        ),
    >,
    pub on_register_custom_schemes: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t, registrar: *mut _cef_scheme_registrar_t),
    >,
    pub get_resource_bundle_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_resource_bundle_handler_t,
    >,
    pub get_browser_process_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_browser_process_handler_t,
    >,
    pub get_render_process_handler: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_app_t) -> *mut _cef_render_process_handler_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_app_t"][::std::mem::size_of::<_cef_app_t>() - 40usize];
    ["Alignment of _cef_app_t"][::std::mem::align_of::<_cef_app_t>() - 4usize];
    ["Offset of field: _cef_app_t::base"][::std::mem::offset_of!(_cef_app_t, base) - 0usize];
    ["Offset of field: _cef_app_t::on_before_command_line_processing"]
        [::std::mem::offset_of!(_cef_app_t, on_before_command_line_processing) - 20usize];
    ["Offset of field: _cef_app_t::on_register_custom_schemes"]
        [::std::mem::offset_of!(_cef_app_t, on_register_custom_schemes) - 24usize];
    ["Offset of field: _cef_app_t::get_resource_bundle_handler"]
        [::std::mem::offset_of!(_cef_app_t, get_resource_bundle_handler) - 28usize];
    ["Offset of field: _cef_app_t::get_browser_process_handler"]
        [::std::mem::offset_of!(_cef_app_t, get_browser_process_handler) - 32usize];
    ["Offset of field: _cef_app_t::get_render_process_handler"]
        [::std::mem::offset_of!(_cef_app_t, get_render_process_handler) - 36usize];
};
pub type cef_app_t = _cef_app_t;
unsafe extern "C" {
    pub fn cef_execute_process(
        args: *const _cef_main_args_t,
        application: *mut cef_app_t,
        windows_sandbox_info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_initialize(
        args: *const _cef_main_args_t,
        settings: *const _cef_settings_t,
        application: *mut cef_app_t,
        windows_sandbox_info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn cef_shutdown();
}
unsafe extern "C" {
    pub fn cef_do_message_loop_work();
}
unsafe extern "C" {
    pub fn cef_run_message_loop();
}
unsafe extern "C" {
    pub fn cef_quit_message_loop();
}
unsafe extern "C" {
    pub fn cef_set_osmodal_loop(osModalLoop: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn cef_enable_highdpi_support();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_urlrequest_t {
    pub base: cef_base_ref_counted_t,
    pub get_request: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_request_t,
    >,
    pub get_client: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_urlrequest_client_t,
    >,
    pub get_request_status: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> cef_urlrequest_status_t,
    >,
    pub get_request_error: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> cef_errorcode_t,
    >,
    pub get_response: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> *mut _cef_response_t,
    >,
    pub response_was_cached: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_t) -> ::std::os::raw::c_int,
    >,
    pub cancel: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_urlrequest_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_urlrequest_t"][::std::mem::size_of::<_cef_urlrequest_t>() - 48usize];
    ["Alignment of _cef_urlrequest_t"][::std::mem::align_of::<_cef_urlrequest_t>() - 4usize];
    ["Offset of field: _cef_urlrequest_t::base"]
        [::std::mem::offset_of!(_cef_urlrequest_t, base) - 0usize];
    ["Offset of field: _cef_urlrequest_t::get_request"]
        [::std::mem::offset_of!(_cef_urlrequest_t, get_request) - 20usize];
    ["Offset of field: _cef_urlrequest_t::get_client"]
        [::std::mem::offset_of!(_cef_urlrequest_t, get_client) - 24usize];
    ["Offset of field: _cef_urlrequest_t::get_request_status"]
        [::std::mem::offset_of!(_cef_urlrequest_t, get_request_status) - 28usize];
    ["Offset of field: _cef_urlrequest_t::get_request_error"]
        [::std::mem::offset_of!(_cef_urlrequest_t, get_request_error) - 32usize];
    ["Offset of field: _cef_urlrequest_t::get_response"]
        [::std::mem::offset_of!(_cef_urlrequest_t, get_response) - 36usize];
    ["Offset of field: _cef_urlrequest_t::response_was_cached"]
        [::std::mem::offset_of!(_cef_urlrequest_t, response_was_cached) - 40usize];
    ["Offset of field: _cef_urlrequest_t::cancel"]
        [::std::mem::offset_of!(_cef_urlrequest_t, cancel) - 44usize];
};
pub type cef_urlrequest_t = _cef_urlrequest_t;
unsafe extern "C" {
    pub fn cef_urlrequest_create(
        request: *mut _cef_request_t,
        client: *mut _cef_urlrequest_client_t,
        request_context: *mut _cef_request_context_t,
    ) -> *mut cef_urlrequest_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_urlrequest_client_t {
    pub base: cef_base_ref_counted_t,
    pub on_request_complete: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_urlrequest_client_t, request: *mut _cef_urlrequest_t),
    >,
    pub on_upload_progress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            current: int64,
            total: int64,
        ),
    >,
    pub on_download_progress: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            current: int64,
            total: int64,
        ),
    >,
    pub on_download_data: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            request: *mut _cef_urlrequest_t,
            data: *const ::std::os::raw::c_void,
            data_length: usize,
        ),
    >,
    pub get_auth_credentials: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_urlrequest_client_t,
            isProxy: ::std::os::raw::c_int,
            host: *const cef_string_t,
            port: ::std::os::raw::c_int,
            realm: *const cef_string_t,
            scheme: *const cef_string_t,
            callback: *mut _cef_auth_callback_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_urlrequest_client_t"]
        [::std::mem::size_of::<_cef_urlrequest_client_t>() - 40usize];
    ["Alignment of _cef_urlrequest_client_t"]
        [::std::mem::align_of::<_cef_urlrequest_client_t>() - 4usize];
    ["Offset of field: _cef_urlrequest_client_t::base"]
        [::std::mem::offset_of!(_cef_urlrequest_client_t, base) - 0usize];
    ["Offset of field: _cef_urlrequest_client_t::on_request_complete"]
        [::std::mem::offset_of!(_cef_urlrequest_client_t, on_request_complete) - 20usize];
    ["Offset of field: _cef_urlrequest_client_t::on_upload_progress"]
        [::std::mem::offset_of!(_cef_urlrequest_client_t, on_upload_progress) - 24usize];
    ["Offset of field: _cef_urlrequest_client_t::on_download_progress"]
        [::std::mem::offset_of!(_cef_urlrequest_client_t, on_download_progress) - 28usize];
    ["Offset of field: _cef_urlrequest_client_t::on_download_data"]
        [::std::mem::offset_of!(_cef_urlrequest_client_t, on_download_data) - 32usize];
    ["Offset of field: _cef_urlrequest_client_t::get_auth_credentials"]
        [::std::mem::offset_of!(_cef_urlrequest_client_t, get_auth_credentials) - 36usize];
};
pub type cef_urlrequest_client_t = _cef_urlrequest_client_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_layout_t {
    pub base: cef_base_ref_counted_t,
    pub as_box_layout: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_layout_t) -> *mut _cef_box_layout_t,
    >,
    pub as_fill_layout: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_layout_t) -> *mut _cef_fill_layout_t,
    >,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_layout_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_layout_t"][::std::mem::size_of::<_cef_layout_t>() - 32usize];
    ["Alignment of _cef_layout_t"][::std::mem::align_of::<_cef_layout_t>() - 4usize];
    ["Offset of field: _cef_layout_t::base"][::std::mem::offset_of!(_cef_layout_t, base) - 0usize];
    ["Offset of field: _cef_layout_t::as_box_layout"]
        [::std::mem::offset_of!(_cef_layout_t, as_box_layout) - 20usize];
    ["Offset of field: _cef_layout_t::as_fill_layout"]
        [::std::mem::offset_of!(_cef_layout_t, as_fill_layout) - 24usize];
    ["Offset of field: _cef_layout_t::is_valid"]
        [::std::mem::offset_of!(_cef_layout_t, is_valid) - 28usize];
};
pub type cef_layout_t = _cef_layout_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_box_layout_t {
    pub base: cef_layout_t,
    pub set_flex_for_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_box_layout_t,
            view: *mut _cef_view_t,
            flex: ::std::os::raw::c_int,
        ),
    >,
    pub clear_flex_for_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_box_layout_t, view: *mut _cef_view_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_box_layout_t"][::std::mem::size_of::<_cef_box_layout_t>() - 40usize];
    ["Alignment of _cef_box_layout_t"][::std::mem::align_of::<_cef_box_layout_t>() - 4usize];
    ["Offset of field: _cef_box_layout_t::base"]
        [::std::mem::offset_of!(_cef_box_layout_t, base) - 0usize];
    ["Offset of field: _cef_box_layout_t::set_flex_for_view"]
        [::std::mem::offset_of!(_cef_box_layout_t, set_flex_for_view) - 32usize];
    ["Offset of field: _cef_box_layout_t::clear_flex_for_view"]
        [::std::mem::offset_of!(_cef_box_layout_t, clear_flex_for_view) - 36usize];
};
pub type cef_box_layout_t = _cef_box_layout_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_fill_layout_t {
    pub base: cef_layout_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_fill_layout_t"][::std::mem::size_of::<_cef_fill_layout_t>() - 32usize];
    ["Alignment of _cef_fill_layout_t"][::std::mem::align_of::<_cef_fill_layout_t>() - 4usize];
    ["Offset of field: _cef_fill_layout_t::base"]
        [::std::mem::offset_of!(_cef_fill_layout_t, base) - 0usize];
};
pub type cef_fill_layout_t = _cef_fill_layout_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_view_delegate_t {
    pub base: cef_base_ref_counted_t,
    pub get_preferred_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
        ) -> cef_size_t,
    >,
    pub get_minimum_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
        ) -> cef_size_t,
    >,
    pub get_maximum_size: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
        ) -> cef_size_t,
    >,
    pub get_height_for_width: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            width: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_parent_view_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            added: ::std::os::raw::c_int,
            parent: *mut _cef_view_t,
        ),
    >,
    pub on_child_view_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            added: ::std::os::raw::c_int,
            child: *mut _cef_view_t,
        ),
    >,
    pub on_window_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            added: ::std::os::raw::c_int,
        ),
    >,
    pub on_layout_changed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_delegate_t,
            view: *mut _cef_view_t,
            new_bounds: *const cef_rect_t,
        ),
    >,
    pub on_focus: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_delegate_t, view: *mut _cef_view_t),
    >,
    pub on_blur: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_delegate_t, view: *mut _cef_view_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_view_delegate_t"][::std::mem::size_of::<_cef_view_delegate_t>() - 60usize];
    ["Alignment of _cef_view_delegate_t"][::std::mem::align_of::<_cef_view_delegate_t>() - 4usize];
    ["Offset of field: _cef_view_delegate_t::base"]
        [::std::mem::offset_of!(_cef_view_delegate_t, base) - 0usize];
    ["Offset of field: _cef_view_delegate_t::get_preferred_size"]
        [::std::mem::offset_of!(_cef_view_delegate_t, get_preferred_size) - 20usize];
    ["Offset of field: _cef_view_delegate_t::get_minimum_size"]
        [::std::mem::offset_of!(_cef_view_delegate_t, get_minimum_size) - 24usize];
    ["Offset of field: _cef_view_delegate_t::get_maximum_size"]
        [::std::mem::offset_of!(_cef_view_delegate_t, get_maximum_size) - 28usize];
    ["Offset of field: _cef_view_delegate_t::get_height_for_width"]
        [::std::mem::offset_of!(_cef_view_delegate_t, get_height_for_width) - 32usize];
    ["Offset of field: _cef_view_delegate_t::on_parent_view_changed"]
        [::std::mem::offset_of!(_cef_view_delegate_t, on_parent_view_changed) - 36usize];
    ["Offset of field: _cef_view_delegate_t::on_child_view_changed"]
        [::std::mem::offset_of!(_cef_view_delegate_t, on_child_view_changed) - 40usize];
    ["Offset of field: _cef_view_delegate_t::on_window_changed"]
        [::std::mem::offset_of!(_cef_view_delegate_t, on_window_changed) - 44usize];
    ["Offset of field: _cef_view_delegate_t::on_layout_changed"]
        [::std::mem::offset_of!(_cef_view_delegate_t, on_layout_changed) - 48usize];
    ["Offset of field: _cef_view_delegate_t::on_focus"]
        [::std::mem::offset_of!(_cef_view_delegate_t, on_focus) - 52usize];
    ["Offset of field: _cef_view_delegate_t::on_blur"]
        [::std::mem::offset_of!(_cef_view_delegate_t, on_blur) - 56usize];
};
pub type cef_view_delegate_t = _cef_view_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_view_t {
    pub base: cef_base_ref_counted_t,
    pub as_browser_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_browser_view_t,
    >,
    pub as_button:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_button_t>,
    pub as_panel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_panel_t>,
    pub as_scroll_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_scroll_view_t,
    >,
    pub as_textfield: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_textfield_t,
    >,
    pub get_type_string: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_string_userfree_t,
    >,
    pub to_string: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            include_children: ::std::os::raw::c_int,
        ) -> cef_string_userfree_t,
    >,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int,
    >,
    pub is_attached: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            that: *mut _cef_view_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_delegate: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_view_delegate_t,
    >,
    pub get_window:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_window_t>,
    pub get_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int,
    >,
    pub set_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, id: ::std::os::raw::c_int),
    >,
    pub get_group_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int,
    >,
    pub set_group_id: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, group_id: ::std::os::raw::c_int),
    >,
    pub get_parent_view:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> *mut _cef_view_t>,
    pub get_view_for_id: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            id: ::std::os::raw::c_int,
        ) -> *mut _cef_view_t,
    >,
    pub set_bounds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, bounds: *const cef_rect_t),
    >,
    pub get_bounds:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_rect_t>,
    pub get_bounds_in_screen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_rect_t>,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, size: *const cef_size_t),
    >,
    pub get_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_size_t>,
    pub set_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, position: *const cef_point_t),
    >,
    pub get_position:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_point_t>,
    pub set_insets: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, insets: *const cef_insets_t),
    >,
    pub get_insets:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_insets_t>,
    pub get_preferred_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_size_t>,
    pub size_to_preferred_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t)>,
    pub get_minimum_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_size_t>,
    pub get_maximum_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_size_t>,
    pub get_height_for_width: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            width: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub invalidate_layout: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t)>,
    pub set_visible: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, visible: ::std::os::raw::c_int),
    >,
    pub is_visible: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int,
    >,
    pub is_drawn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int,
    >,
    pub set_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, enabled: ::std::os::raw::c_int),
    >,
    pub is_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int,
    >,
    pub set_focusable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t, focusable: ::std::os::raw::c_int),
    >,
    pub is_focusable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int,
    >,
    pub is_accessibility_focusable: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_view_t) -> ::std::os::raw::c_int,
    >,
    pub request_focus: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t)>,
    pub set_background_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t, color: cef_color_t)>,
    pub get_background_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_view_t) -> cef_color_t>,
    pub convert_point_to_screen: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            point: *mut cef_point_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub convert_point_from_screen: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            point: *mut cef_point_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub convert_point_to_window: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            point: *mut cef_point_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub convert_point_from_window: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            point: *mut cef_point_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub convert_point_to_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            view: *mut _cef_view_t,
            point: *mut cef_point_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub convert_point_from_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_view_t,
            view: *mut _cef_view_t,
            point: *mut cef_point_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_view_t"][::std::mem::size_of::<_cef_view_t>() - 220usize];
    ["Alignment of _cef_view_t"][::std::mem::align_of::<_cef_view_t>() - 4usize];
    ["Offset of field: _cef_view_t::base"][::std::mem::offset_of!(_cef_view_t, base) - 0usize];
    ["Offset of field: _cef_view_t::as_browser_view"]
        [::std::mem::offset_of!(_cef_view_t, as_browser_view) - 20usize];
    ["Offset of field: _cef_view_t::as_button"]
        [::std::mem::offset_of!(_cef_view_t, as_button) - 24usize];
    ["Offset of field: _cef_view_t::as_panel"]
        [::std::mem::offset_of!(_cef_view_t, as_panel) - 28usize];
    ["Offset of field: _cef_view_t::as_scroll_view"]
        [::std::mem::offset_of!(_cef_view_t, as_scroll_view) - 32usize];
    ["Offset of field: _cef_view_t::as_textfield"]
        [::std::mem::offset_of!(_cef_view_t, as_textfield) - 36usize];
    ["Offset of field: _cef_view_t::get_type_string"]
        [::std::mem::offset_of!(_cef_view_t, get_type_string) - 40usize];
    ["Offset of field: _cef_view_t::to_string"]
        [::std::mem::offset_of!(_cef_view_t, to_string) - 44usize];
    ["Offset of field: _cef_view_t::is_valid"]
        [::std::mem::offset_of!(_cef_view_t, is_valid) - 48usize];
    ["Offset of field: _cef_view_t::is_attached"]
        [::std::mem::offset_of!(_cef_view_t, is_attached) - 52usize];
    ["Offset of field: _cef_view_t::is_same"]
        [::std::mem::offset_of!(_cef_view_t, is_same) - 56usize];
    ["Offset of field: _cef_view_t::get_delegate"]
        [::std::mem::offset_of!(_cef_view_t, get_delegate) - 60usize];
    ["Offset of field: _cef_view_t::get_window"]
        [::std::mem::offset_of!(_cef_view_t, get_window) - 64usize];
    ["Offset of field: _cef_view_t::get_id"][::std::mem::offset_of!(_cef_view_t, get_id) - 68usize];
    ["Offset of field: _cef_view_t::set_id"][::std::mem::offset_of!(_cef_view_t, set_id) - 72usize];
    ["Offset of field: _cef_view_t::get_group_id"]
        [::std::mem::offset_of!(_cef_view_t, get_group_id) - 76usize];
    ["Offset of field: _cef_view_t::set_group_id"]
        [::std::mem::offset_of!(_cef_view_t, set_group_id) - 80usize];
    ["Offset of field: _cef_view_t::get_parent_view"]
        [::std::mem::offset_of!(_cef_view_t, get_parent_view) - 84usize];
    ["Offset of field: _cef_view_t::get_view_for_id"]
        [::std::mem::offset_of!(_cef_view_t, get_view_for_id) - 88usize];
    ["Offset of field: _cef_view_t::set_bounds"]
        [::std::mem::offset_of!(_cef_view_t, set_bounds) - 92usize];
    ["Offset of field: _cef_view_t::get_bounds"]
        [::std::mem::offset_of!(_cef_view_t, get_bounds) - 96usize];
    ["Offset of field: _cef_view_t::get_bounds_in_screen"]
        [::std::mem::offset_of!(_cef_view_t, get_bounds_in_screen) - 100usize];
    ["Offset of field: _cef_view_t::set_size"]
        [::std::mem::offset_of!(_cef_view_t, set_size) - 104usize];
    ["Offset of field: _cef_view_t::get_size"]
        [::std::mem::offset_of!(_cef_view_t, get_size) - 108usize];
    ["Offset of field: _cef_view_t::set_position"]
        [::std::mem::offset_of!(_cef_view_t, set_position) - 112usize];
    ["Offset of field: _cef_view_t::get_position"]
        [::std::mem::offset_of!(_cef_view_t, get_position) - 116usize];
    ["Offset of field: _cef_view_t::set_insets"]
        [::std::mem::offset_of!(_cef_view_t, set_insets) - 120usize];
    ["Offset of field: _cef_view_t::get_insets"]
        [::std::mem::offset_of!(_cef_view_t, get_insets) - 124usize];
    ["Offset of field: _cef_view_t::get_preferred_size"]
        [::std::mem::offset_of!(_cef_view_t, get_preferred_size) - 128usize];
    ["Offset of field: _cef_view_t::size_to_preferred_size"]
        [::std::mem::offset_of!(_cef_view_t, size_to_preferred_size) - 132usize];
    ["Offset of field: _cef_view_t::get_minimum_size"]
        [::std::mem::offset_of!(_cef_view_t, get_minimum_size) - 136usize];
    ["Offset of field: _cef_view_t::get_maximum_size"]
        [::std::mem::offset_of!(_cef_view_t, get_maximum_size) - 140usize];
    ["Offset of field: _cef_view_t::get_height_for_width"]
        [::std::mem::offset_of!(_cef_view_t, get_height_for_width) - 144usize];
    ["Offset of field: _cef_view_t::invalidate_layout"]
        [::std::mem::offset_of!(_cef_view_t, invalidate_layout) - 148usize];
    ["Offset of field: _cef_view_t::set_visible"]
        [::std::mem::offset_of!(_cef_view_t, set_visible) - 152usize];
    ["Offset of field: _cef_view_t::is_visible"]
        [::std::mem::offset_of!(_cef_view_t, is_visible) - 156usize];
    ["Offset of field: _cef_view_t::is_drawn"]
        [::std::mem::offset_of!(_cef_view_t, is_drawn) - 160usize];
    ["Offset of field: _cef_view_t::set_enabled"]
        [::std::mem::offset_of!(_cef_view_t, set_enabled) - 164usize];
    ["Offset of field: _cef_view_t::is_enabled"]
        [::std::mem::offset_of!(_cef_view_t, is_enabled) - 168usize];
    ["Offset of field: _cef_view_t::set_focusable"]
        [::std::mem::offset_of!(_cef_view_t, set_focusable) - 172usize];
    ["Offset of field: _cef_view_t::is_focusable"]
        [::std::mem::offset_of!(_cef_view_t, is_focusable) - 176usize];
    ["Offset of field: _cef_view_t::is_accessibility_focusable"]
        [::std::mem::offset_of!(_cef_view_t, is_accessibility_focusable) - 180usize];
    ["Offset of field: _cef_view_t::request_focus"]
        [::std::mem::offset_of!(_cef_view_t, request_focus) - 184usize];
    ["Offset of field: _cef_view_t::set_background_color"]
        [::std::mem::offset_of!(_cef_view_t, set_background_color) - 188usize];
    ["Offset of field: _cef_view_t::get_background_color"]
        [::std::mem::offset_of!(_cef_view_t, get_background_color) - 192usize];
    ["Offset of field: _cef_view_t::convert_point_to_screen"]
        [::std::mem::offset_of!(_cef_view_t, convert_point_to_screen) - 196usize];
    ["Offset of field: _cef_view_t::convert_point_from_screen"]
        [::std::mem::offset_of!(_cef_view_t, convert_point_from_screen) - 200usize];
    ["Offset of field: _cef_view_t::convert_point_to_window"]
        [::std::mem::offset_of!(_cef_view_t, convert_point_to_window) - 204usize];
    ["Offset of field: _cef_view_t::convert_point_from_window"]
        [::std::mem::offset_of!(_cef_view_t, convert_point_from_window) - 208usize];
    ["Offset of field: _cef_view_t::convert_point_to_view"]
        [::std::mem::offset_of!(_cef_view_t, convert_point_to_view) - 212usize];
    ["Offset of field: _cef_view_t::convert_point_from_view"]
        [::std::mem::offset_of!(_cef_view_t, convert_point_from_view) - 216usize];
};
pub type cef_view_t = _cef_view_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_button_t {
    pub base: cef_view_t,
    pub as_label_button: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t) -> *mut _cef_label_button_t,
    >,
    pub set_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t, state: cef_button_state_t),
    >,
    pub get_state: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t) -> cef_button_state_t,
    >,
    pub set_ink_drop_enabled: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t, enabled: ::std::os::raw::c_int),
    >,
    pub set_tooltip_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t, tooltip_text: *const cef_string_t),
    >,
    pub set_accessible_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_t, name: *const cef_string_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_button_t"][::std::mem::size_of::<_cef_button_t>() - 244usize];
    ["Alignment of _cef_button_t"][::std::mem::align_of::<_cef_button_t>() - 4usize];
    ["Offset of field: _cef_button_t::base"][::std::mem::offset_of!(_cef_button_t, base) - 0usize];
    ["Offset of field: _cef_button_t::as_label_button"]
        [::std::mem::offset_of!(_cef_button_t, as_label_button) - 220usize];
    ["Offset of field: _cef_button_t::set_state"]
        [::std::mem::offset_of!(_cef_button_t, set_state) - 224usize];
    ["Offset of field: _cef_button_t::get_state"]
        [::std::mem::offset_of!(_cef_button_t, get_state) - 228usize];
    ["Offset of field: _cef_button_t::set_ink_drop_enabled"]
        [::std::mem::offset_of!(_cef_button_t, set_ink_drop_enabled) - 232usize];
    ["Offset of field: _cef_button_t::set_tooltip_text"]
        [::std::mem::offset_of!(_cef_button_t, set_tooltip_text) - 236usize];
    ["Offset of field: _cef_button_t::set_accessible_name"]
        [::std::mem::offset_of!(_cef_button_t, set_accessible_name) - 240usize];
};
pub type cef_button_t = _cef_button_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_button_delegate_t {
    pub base: cef_view_delegate_t,
    pub on_button_pressed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_delegate_t, button: *mut _cef_button_t),
    >,
    pub on_button_state_changed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_button_delegate_t, button: *mut _cef_button_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_button_delegate_t"][::std::mem::size_of::<_cef_button_delegate_t>() - 68usize];
    ["Alignment of _cef_button_delegate_t"]
        [::std::mem::align_of::<_cef_button_delegate_t>() - 4usize];
    ["Offset of field: _cef_button_delegate_t::base"]
        [::std::mem::offset_of!(_cef_button_delegate_t, base) - 0usize];
    ["Offset of field: _cef_button_delegate_t::on_button_pressed"]
        [::std::mem::offset_of!(_cef_button_delegate_t, on_button_pressed) - 60usize];
    ["Offset of field: _cef_button_delegate_t::on_button_state_changed"]
        [::std::mem::offset_of!(_cef_button_delegate_t, on_button_state_changed) - 64usize];
};
pub type cef_button_delegate_t = _cef_button_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_label_button_t {
    pub base: cef_button_t,
    pub as_menu_button: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t) -> *mut _cef_menu_button_t,
    >,
    pub set_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, text: *const cef_string_t),
    >,
    pub get_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t) -> cef_string_userfree_t,
    >,
    pub set_image: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_label_button_t,
            button_state: cef_button_state_t,
            image: *mut _cef_image_t,
        ),
    >,
    pub get_image: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_label_button_t,
            button_state: cef_button_state_t,
        ) -> *mut _cef_image_t,
    >,
    pub set_text_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_label_button_t,
            for_state: cef_button_state_t,
            color: cef_color_t,
        ),
    >,
    pub set_enabled_text_colors: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, color: cef_color_t),
    >,
    pub set_font_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, font_list: *const cef_string_t),
    >,
    pub set_horizontal_alignment: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_label_button_t,
            alignment: cef_horizontal_alignment_t,
        ),
    >,
    pub set_minimum_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, size: *const cef_size_t),
    >,
    pub set_maximum_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_label_button_t, size: *const cef_size_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_label_button_t"][::std::mem::size_of::<_cef_label_button_t>() - 288usize];
    ["Alignment of _cef_label_button_t"][::std::mem::align_of::<_cef_label_button_t>() - 4usize];
    ["Offset of field: _cef_label_button_t::base"]
        [::std::mem::offset_of!(_cef_label_button_t, base) - 0usize];
    ["Offset of field: _cef_label_button_t::as_menu_button"]
        [::std::mem::offset_of!(_cef_label_button_t, as_menu_button) - 244usize];
    ["Offset of field: _cef_label_button_t::set_text"]
        [::std::mem::offset_of!(_cef_label_button_t, set_text) - 248usize];
    ["Offset of field: _cef_label_button_t::get_text"]
        [::std::mem::offset_of!(_cef_label_button_t, get_text) - 252usize];
    ["Offset of field: _cef_label_button_t::set_image"]
        [::std::mem::offset_of!(_cef_label_button_t, set_image) - 256usize];
    ["Offset of field: _cef_label_button_t::get_image"]
        [::std::mem::offset_of!(_cef_label_button_t, get_image) - 260usize];
    ["Offset of field: _cef_label_button_t::set_text_color"]
        [::std::mem::offset_of!(_cef_label_button_t, set_text_color) - 264usize];
    ["Offset of field: _cef_label_button_t::set_enabled_text_colors"]
        [::std::mem::offset_of!(_cef_label_button_t, set_enabled_text_colors) - 268usize];
    ["Offset of field: _cef_label_button_t::set_font_list"]
        [::std::mem::offset_of!(_cef_label_button_t, set_font_list) - 272usize];
    ["Offset of field: _cef_label_button_t::set_horizontal_alignment"]
        [::std::mem::offset_of!(_cef_label_button_t, set_horizontal_alignment) - 276usize];
    ["Offset of field: _cef_label_button_t::set_minimum_size"]
        [::std::mem::offset_of!(_cef_label_button_t, set_minimum_size) - 280usize];
    ["Offset of field: _cef_label_button_t::set_maximum_size"]
        [::std::mem::offset_of!(_cef_label_button_t, set_maximum_size) - 284usize];
};
pub type cef_label_button_t = _cef_label_button_t;
unsafe extern "C" {
    pub fn cef_label_button_create(
        delegate: *mut _cef_button_delegate_t,
        text: *const cef_string_t,
    ) -> *mut cef_label_button_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_button_pressed_lock_t {
    pub base: cef_base_ref_counted_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_menu_button_pressed_lock_t"]
        [::std::mem::size_of::<_cef_menu_button_pressed_lock_t>() - 20usize];
    ["Alignment of _cef_menu_button_pressed_lock_t"]
        [::std::mem::align_of::<_cef_menu_button_pressed_lock_t>() - 4usize];
    ["Offset of field: _cef_menu_button_pressed_lock_t::base"]
        [::std::mem::offset_of!(_cef_menu_button_pressed_lock_t, base) - 0usize];
};
pub type cef_menu_button_pressed_lock_t = _cef_menu_button_pressed_lock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_button_delegate_t {
    pub base: cef_button_delegate_t,
    pub on_menu_button_pressed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_button_delegate_t,
            menu_button: *mut _cef_menu_button_t,
            screen_point: *const cef_point_t,
            button_pressed_lock: *mut _cef_menu_button_pressed_lock_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_menu_button_delegate_t"]
        [::std::mem::size_of::<_cef_menu_button_delegate_t>() - 72usize];
    ["Alignment of _cef_menu_button_delegate_t"]
        [::std::mem::align_of::<_cef_menu_button_delegate_t>() - 4usize];
    ["Offset of field: _cef_menu_button_delegate_t::base"]
        [::std::mem::offset_of!(_cef_menu_button_delegate_t, base) - 0usize];
    ["Offset of field: _cef_menu_button_delegate_t::on_menu_button_pressed"]
        [::std::mem::offset_of!(_cef_menu_button_delegate_t, on_menu_button_pressed) - 68usize];
};
pub type cef_menu_button_delegate_t = _cef_menu_button_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_menu_button_t {
    pub base: cef_label_button_t,
    pub show_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_menu_button_t,
            menu_model: *mut _cef_menu_model_t,
            screen_point: *const cef_point_t,
            anchor_position: cef_menu_anchor_position_t,
        ),
    >,
    pub trigger_menu: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_menu_button_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_menu_button_t"][::std::mem::size_of::<_cef_menu_button_t>() - 296usize];
    ["Alignment of _cef_menu_button_t"][::std::mem::align_of::<_cef_menu_button_t>() - 4usize];
    ["Offset of field: _cef_menu_button_t::base"]
        [::std::mem::offset_of!(_cef_menu_button_t, base) - 0usize];
    ["Offset of field: _cef_menu_button_t::show_menu"]
        [::std::mem::offset_of!(_cef_menu_button_t, show_menu) - 288usize];
    ["Offset of field: _cef_menu_button_t::trigger_menu"]
        [::std::mem::offset_of!(_cef_menu_button_t, trigger_menu) - 292usize];
};
pub type cef_menu_button_t = _cef_menu_button_t;
unsafe extern "C" {
    pub fn cef_menu_button_create(
        delegate: *mut _cef_menu_button_delegate_t,
        text: *const cef_string_t,
    ) -> *mut cef_menu_button_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_textfield_delegate_t {
    pub base: cef_view_delegate_t,
    pub on_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_delegate_t,
            textfield: *mut _cef_textfield_t,
            event: *const _cef_key_event_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_after_user_action: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_delegate_t,
            textfield: *mut _cef_textfield_t,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_textfield_delegate_t"]
        [::std::mem::size_of::<_cef_textfield_delegate_t>() - 68usize];
    ["Alignment of _cef_textfield_delegate_t"]
        [::std::mem::align_of::<_cef_textfield_delegate_t>() - 4usize];
    ["Offset of field: _cef_textfield_delegate_t::base"]
        [::std::mem::offset_of!(_cef_textfield_delegate_t, base) - 0usize];
    ["Offset of field: _cef_textfield_delegate_t::on_key_event"]
        [::std::mem::offset_of!(_cef_textfield_delegate_t, on_key_event) - 60usize];
    ["Offset of field: _cef_textfield_delegate_t::on_after_user_action"]
        [::std::mem::offset_of!(_cef_textfield_delegate_t, on_after_user_action) - 64usize];
};
pub type cef_textfield_delegate_t = _cef_textfield_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_textfield_t {
    pub base: cef_view_t,
    pub set_password_input: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, password_input: ::std::os::raw::c_int),
    >,
    pub is_password_input: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> ::std::os::raw::c_int,
    >,
    pub set_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, read_only: ::std::os::raw::c_int),
    >,
    pub is_read_only: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> ::std::os::raw::c_int,
    >,
    pub get_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_string_userfree_t,
    >,
    pub set_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, text: *const cef_string_t),
    >,
    pub append_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, text: *const cef_string_t),
    >,
    pub insert_or_replace_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, text: *const cef_string_t),
    >,
    pub has_selection: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> ::std::os::raw::c_int,
    >,
    pub get_selected_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_string_userfree_t,
    >,
    pub select_all: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, reversed: ::std::os::raw::c_int),
    >,
    pub clear_selection: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t)>,
    pub get_selected_range:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_range_t>,
    pub select_range: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, range: *const cef_range_t),
    >,
    pub get_cursor_position:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> usize>,
    pub set_text_color: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, color: cef_color_t),
    >,
    pub get_text_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_color_t>,
    pub set_selection_text_color: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, color: cef_color_t),
    >,
    pub get_selection_text_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_color_t>,
    pub set_selection_background_color: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, color: cef_color_t),
    >,
    pub get_selection_background_color:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_color_t>,
    pub set_font_list: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, font_list: *const cef_string_t),
    >,
    pub apply_text_color: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_t,
            color: cef_color_t,
            range: *const cef_range_t,
        ),
    >,
    pub apply_text_style: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_t,
            style: cef_text_style_t,
            add: ::std::os::raw::c_int,
            range: *const cef_range_t,
        ),
    >,
    pub is_command_enabled: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_textfield_t,
            command_id: cef_text_field_commands_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub execute_command: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, command_id: cef_text_field_commands_t),
    >,
    pub clear_edit_history:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_textfield_t)>,
    pub set_placeholder_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, text: *const cef_string_t),
    >,
    pub get_placeholder_text: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t) -> cef_string_userfree_t,
    >,
    pub set_placeholder_text_color: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, color: cef_color_t),
    >,
    pub set_accessible_name: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_textfield_t, name: *const cef_string_t),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_textfield_t"][::std::mem::size_of::<_cef_textfield_t>() - 344usize];
    ["Alignment of _cef_textfield_t"][::std::mem::align_of::<_cef_textfield_t>() - 4usize];
    ["Offset of field: _cef_textfield_t::base"]
        [::std::mem::offset_of!(_cef_textfield_t, base) - 0usize];
    ["Offset of field: _cef_textfield_t::set_password_input"]
        [::std::mem::offset_of!(_cef_textfield_t, set_password_input) - 220usize];
    ["Offset of field: _cef_textfield_t::is_password_input"]
        [::std::mem::offset_of!(_cef_textfield_t, is_password_input) - 224usize];
    ["Offset of field: _cef_textfield_t::set_read_only"]
        [::std::mem::offset_of!(_cef_textfield_t, set_read_only) - 228usize];
    ["Offset of field: _cef_textfield_t::is_read_only"]
        [::std::mem::offset_of!(_cef_textfield_t, is_read_only) - 232usize];
    ["Offset of field: _cef_textfield_t::get_text"]
        [::std::mem::offset_of!(_cef_textfield_t, get_text) - 236usize];
    ["Offset of field: _cef_textfield_t::set_text"]
        [::std::mem::offset_of!(_cef_textfield_t, set_text) - 240usize];
    ["Offset of field: _cef_textfield_t::append_text"]
        [::std::mem::offset_of!(_cef_textfield_t, append_text) - 244usize];
    ["Offset of field: _cef_textfield_t::insert_or_replace_text"]
        [::std::mem::offset_of!(_cef_textfield_t, insert_or_replace_text) - 248usize];
    ["Offset of field: _cef_textfield_t::has_selection"]
        [::std::mem::offset_of!(_cef_textfield_t, has_selection) - 252usize];
    ["Offset of field: _cef_textfield_t::get_selected_text"]
        [::std::mem::offset_of!(_cef_textfield_t, get_selected_text) - 256usize];
    ["Offset of field: _cef_textfield_t::select_all"]
        [::std::mem::offset_of!(_cef_textfield_t, select_all) - 260usize];
    ["Offset of field: _cef_textfield_t::clear_selection"]
        [::std::mem::offset_of!(_cef_textfield_t, clear_selection) - 264usize];
    ["Offset of field: _cef_textfield_t::get_selected_range"]
        [::std::mem::offset_of!(_cef_textfield_t, get_selected_range) - 268usize];
    ["Offset of field: _cef_textfield_t::select_range"]
        [::std::mem::offset_of!(_cef_textfield_t, select_range) - 272usize];
    ["Offset of field: _cef_textfield_t::get_cursor_position"]
        [::std::mem::offset_of!(_cef_textfield_t, get_cursor_position) - 276usize];
    ["Offset of field: _cef_textfield_t::set_text_color"]
        [::std::mem::offset_of!(_cef_textfield_t, set_text_color) - 280usize];
    ["Offset of field: _cef_textfield_t::get_text_color"]
        [::std::mem::offset_of!(_cef_textfield_t, get_text_color) - 284usize];
    ["Offset of field: _cef_textfield_t::set_selection_text_color"]
        [::std::mem::offset_of!(_cef_textfield_t, set_selection_text_color) - 288usize];
    ["Offset of field: _cef_textfield_t::get_selection_text_color"]
        [::std::mem::offset_of!(_cef_textfield_t, get_selection_text_color) - 292usize];
    ["Offset of field: _cef_textfield_t::set_selection_background_color"]
        [::std::mem::offset_of!(_cef_textfield_t, set_selection_background_color) - 296usize];
    ["Offset of field: _cef_textfield_t::get_selection_background_color"]
        [::std::mem::offset_of!(_cef_textfield_t, get_selection_background_color) - 300usize];
    ["Offset of field: _cef_textfield_t::set_font_list"]
        [::std::mem::offset_of!(_cef_textfield_t, set_font_list) - 304usize];
    ["Offset of field: _cef_textfield_t::apply_text_color"]
        [::std::mem::offset_of!(_cef_textfield_t, apply_text_color) - 308usize];
    ["Offset of field: _cef_textfield_t::apply_text_style"]
        [::std::mem::offset_of!(_cef_textfield_t, apply_text_style) - 312usize];
    ["Offset of field: _cef_textfield_t::is_command_enabled"]
        [::std::mem::offset_of!(_cef_textfield_t, is_command_enabled) - 316usize];
    ["Offset of field: _cef_textfield_t::execute_command"]
        [::std::mem::offset_of!(_cef_textfield_t, execute_command) - 320usize];
    ["Offset of field: _cef_textfield_t::clear_edit_history"]
        [::std::mem::offset_of!(_cef_textfield_t, clear_edit_history) - 324usize];
    ["Offset of field: _cef_textfield_t::set_placeholder_text"]
        [::std::mem::offset_of!(_cef_textfield_t, set_placeholder_text) - 328usize];
    ["Offset of field: _cef_textfield_t::get_placeholder_text"]
        [::std::mem::offset_of!(_cef_textfield_t, get_placeholder_text) - 332usize];
    ["Offset of field: _cef_textfield_t::set_placeholder_text_color"]
        [::std::mem::offset_of!(_cef_textfield_t, set_placeholder_text_color) - 336usize];
    ["Offset of field: _cef_textfield_t::set_accessible_name"]
        [::std::mem::offset_of!(_cef_textfield_t, set_accessible_name) - 340usize];
};
pub type cef_textfield_t = _cef_textfield_t;
unsafe extern "C" {
    pub fn cef_textfield_create(delegate: *mut _cef_textfield_delegate_t) -> *mut cef_textfield_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_view_delegate_t {
    pub base: cef_view_delegate_t,
    pub on_browser_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    pub on_browser_destroyed: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            browser: *mut _cef_browser_t,
        ),
    >,
    pub get_delegate_for_popup_browser_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            settings: *const _cef_browser_settings_t,
            client: *mut _cef_client_t,
            is_devtools: ::std::os::raw::c_int,
        ) -> *mut _cef_browser_view_delegate_t,
    >,
    pub on_popup_browser_view_created: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_delegate_t,
            browser_view: *mut _cef_browser_view_t,
            popup_browser_view: *mut _cef_browser_view_t,
            is_devtools: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_chrome_toolbar_type: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_view_delegate_t) -> cef_chrome_toolbar_type_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_browser_view_delegate_t"]
        [::std::mem::size_of::<_cef_browser_view_delegate_t>() - 80usize];
    ["Alignment of _cef_browser_view_delegate_t"]
        [::std::mem::align_of::<_cef_browser_view_delegate_t>() - 4usize];
    ["Offset of field: _cef_browser_view_delegate_t::base"]
        [::std::mem::offset_of!(_cef_browser_view_delegate_t, base) - 0usize];
    ["Offset of field: _cef_browser_view_delegate_t::on_browser_created"]
        [::std::mem::offset_of!(_cef_browser_view_delegate_t, on_browser_created) - 60usize];
    ["Offset of field: _cef_browser_view_delegate_t::on_browser_destroyed"]
        [::std::mem::offset_of!(_cef_browser_view_delegate_t, on_browser_destroyed) - 64usize];
    ["Offset of field: _cef_browser_view_delegate_t::get_delegate_for_popup_browser_view"][::std::mem::offset_of!(
        _cef_browser_view_delegate_t,
        get_delegate_for_popup_browser_view
    )
        - 68usize];
    ["Offset of field: _cef_browser_view_delegate_t::on_popup_browser_view_created"][::std::mem::offset_of!(
        _cef_browser_view_delegate_t,
        on_popup_browser_view_created
    ) - 72usize];
    ["Offset of field: _cef_browser_view_delegate_t::get_chrome_toolbar_type"]
        [::std::mem::offset_of!(_cef_browser_view_delegate_t, get_chrome_toolbar_type) - 76usize];
};
pub type cef_browser_view_delegate_t = _cef_browser_view_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_browser_view_t {
    pub base: cef_view_t,
    pub get_browser: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_view_t) -> *mut _cef_browser_t,
    >,
    pub get_chrome_toolbar: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_browser_view_t) -> *mut _cef_view_t,
    >,
    pub set_prefer_accelerators: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_browser_view_t,
            prefer_accelerators: ::std::os::raw::c_int,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_browser_view_t"][::std::mem::size_of::<_cef_browser_view_t>() - 232usize];
    ["Alignment of _cef_browser_view_t"][::std::mem::align_of::<_cef_browser_view_t>() - 4usize];
    ["Offset of field: _cef_browser_view_t::base"]
        [::std::mem::offset_of!(_cef_browser_view_t, base) - 0usize];
    ["Offset of field: _cef_browser_view_t::get_browser"]
        [::std::mem::offset_of!(_cef_browser_view_t, get_browser) - 220usize];
    ["Offset of field: _cef_browser_view_t::get_chrome_toolbar"]
        [::std::mem::offset_of!(_cef_browser_view_t, get_chrome_toolbar) - 224usize];
    ["Offset of field: _cef_browser_view_t::set_prefer_accelerators"]
        [::std::mem::offset_of!(_cef_browser_view_t, set_prefer_accelerators) - 228usize];
};
pub type cef_browser_view_t = _cef_browser_view_t;
unsafe extern "C" {
    pub fn cef_browser_view_create(
        client: *mut _cef_client_t,
        url: *const cef_string_t,
        settings: *const _cef_browser_settings_t,
        extra_info: *mut _cef_dictionary_value_t,
        request_context: *mut _cef_request_context_t,
        delegate: *mut _cef_browser_view_delegate_t,
    ) -> *mut cef_browser_view_t;
}
unsafe extern "C" {
    pub fn cef_browser_view_get_for_browser(
        browser: *mut _cef_browser_t,
    ) -> *mut cef_browser_view_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_scroll_view_t {
    pub base: cef_view_t,
    pub set_content_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t, view: *mut _cef_view_t),
    >,
    pub get_content_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> *mut _cef_view_t,
    >,
    pub get_visible_content_rect:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> cef_rect_t>,
    pub has_horizontal_scrollbar: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> ::std::os::raw::c_int,
    >,
    pub get_horizontal_scrollbar_height: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> ::std::os::raw::c_int,
    >,
    pub has_vertical_scrollbar: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> ::std::os::raw::c_int,
    >,
    pub get_vertical_scrollbar_width: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_scroll_view_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_scroll_view_t"][::std::mem::size_of::<_cef_scroll_view_t>() - 248usize];
    ["Alignment of _cef_scroll_view_t"][::std::mem::align_of::<_cef_scroll_view_t>() - 4usize];
    ["Offset of field: _cef_scroll_view_t::base"]
        [::std::mem::offset_of!(_cef_scroll_view_t, base) - 0usize];
    ["Offset of field: _cef_scroll_view_t::set_content_view"]
        [::std::mem::offset_of!(_cef_scroll_view_t, set_content_view) - 220usize];
    ["Offset of field: _cef_scroll_view_t::get_content_view"]
        [::std::mem::offset_of!(_cef_scroll_view_t, get_content_view) - 224usize];
    ["Offset of field: _cef_scroll_view_t::get_visible_content_rect"]
        [::std::mem::offset_of!(_cef_scroll_view_t, get_visible_content_rect) - 228usize];
    ["Offset of field: _cef_scroll_view_t::has_horizontal_scrollbar"]
        [::std::mem::offset_of!(_cef_scroll_view_t, has_horizontal_scrollbar) - 232usize];
    ["Offset of field: _cef_scroll_view_t::get_horizontal_scrollbar_height"]
        [::std::mem::offset_of!(_cef_scroll_view_t, get_horizontal_scrollbar_height) - 236usize];
    ["Offset of field: _cef_scroll_view_t::has_vertical_scrollbar"]
        [::std::mem::offset_of!(_cef_scroll_view_t, has_vertical_scrollbar) - 240usize];
    ["Offset of field: _cef_scroll_view_t::get_vertical_scrollbar_width"]
        [::std::mem::offset_of!(_cef_scroll_view_t, get_vertical_scrollbar_width) - 244usize];
};
pub type cef_scroll_view_t = _cef_scroll_view_t;
unsafe extern "C" {
    pub fn cef_scroll_view_create(delegate: *mut _cef_view_delegate_t) -> *mut cef_scroll_view_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_display_t {
    pub base: cef_base_ref_counted_t,
    pub get_id: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_display_t) -> int64>,
    pub get_device_scale_factor:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_display_t) -> f32>,
    pub convert_point_to_pixels: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_display_t, point: *mut cef_point_t),
    >,
    pub convert_point_from_pixels: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_display_t, point: *mut cef_point_t),
    >,
    pub get_bounds:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_display_t) -> cef_rect_t>,
    pub get_work_area:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_display_t) -> cef_rect_t>,
    pub get_rotation: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_display_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_display_t"][::std::mem::size_of::<_cef_display_t>() - 48usize];
    ["Alignment of _cef_display_t"][::std::mem::align_of::<_cef_display_t>() - 4usize];
    ["Offset of field: _cef_display_t::base"]
        [::std::mem::offset_of!(_cef_display_t, base) - 0usize];
    ["Offset of field: _cef_display_t::get_id"]
        [::std::mem::offset_of!(_cef_display_t, get_id) - 20usize];
    ["Offset of field: _cef_display_t::get_device_scale_factor"]
        [::std::mem::offset_of!(_cef_display_t, get_device_scale_factor) - 24usize];
    ["Offset of field: _cef_display_t::convert_point_to_pixels"]
        [::std::mem::offset_of!(_cef_display_t, convert_point_to_pixels) - 28usize];
    ["Offset of field: _cef_display_t::convert_point_from_pixels"]
        [::std::mem::offset_of!(_cef_display_t, convert_point_from_pixels) - 32usize];
    ["Offset of field: _cef_display_t::get_bounds"]
        [::std::mem::offset_of!(_cef_display_t, get_bounds) - 36usize];
    ["Offset of field: _cef_display_t::get_work_area"]
        [::std::mem::offset_of!(_cef_display_t, get_work_area) - 40usize];
    ["Offset of field: _cef_display_t::get_rotation"]
        [::std::mem::offset_of!(_cef_display_t, get_rotation) - 44usize];
};
pub type cef_display_t = _cef_display_t;
unsafe extern "C" {
    pub fn cef_display_get_primary() -> *mut cef_display_t;
}
unsafe extern "C" {
    pub fn cef_display_get_nearest_point(
        point: *const cef_point_t,
        input_pixel_coords: ::std::os::raw::c_int,
    ) -> *mut cef_display_t;
}
unsafe extern "C" {
    pub fn cef_display_get_matching_bounds(
        bounds: *const cef_rect_t,
        input_pixel_coords: ::std::os::raw::c_int,
    ) -> *mut cef_display_t;
}
unsafe extern "C" {
    pub fn cef_display_get_count() -> usize;
}
unsafe extern "C" {
    pub fn cef_display_get_alls(displaysCount: *mut usize, displays: *mut *mut cef_display_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_overlay_controller_t {
    pub base: cef_base_ref_counted_t,
    pub is_valid: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> ::std::os::raw::c_int,
    >,
    pub is_same: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_overlay_controller_t,
            that: *mut _cef_overlay_controller_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub get_contents_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> *mut _cef_view_t,
    >,
    pub get_window: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> *mut _cef_window_t,
    >,
    pub get_docking_mode: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_docking_mode_t,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t)>,
    pub set_bounds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, bounds: *const cef_rect_t),
    >,
    pub get_bounds: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_rect_t,
    >,
    pub get_bounds_in_screen: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_rect_t,
    >,
    pub set_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, size: *const cef_size_t),
    >,
    pub get_size: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_size_t,
    >,
    pub set_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, position: *const cef_point_t),
    >,
    pub get_position: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_point_t,
    >,
    pub set_insets: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, insets: *const cef_insets_t),
    >,
    pub get_insets: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> cef_insets_t,
    >,
    pub size_to_preferred_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t)>,
    pub set_visible: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t, visible: ::std::os::raw::c_int),
    >,
    pub is_visible: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> ::std::os::raw::c_int,
    >,
    pub is_drawn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_overlay_controller_t) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_overlay_controller_t"]
        [::std::mem::size_of::<_cef_overlay_controller_t>() - 96usize];
    ["Alignment of _cef_overlay_controller_t"]
        [::std::mem::align_of::<_cef_overlay_controller_t>() - 4usize];
    ["Offset of field: _cef_overlay_controller_t::base"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, base) - 0usize];
    ["Offset of field: _cef_overlay_controller_t::is_valid"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, is_valid) - 20usize];
    ["Offset of field: _cef_overlay_controller_t::is_same"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, is_same) - 24usize];
    ["Offset of field: _cef_overlay_controller_t::get_contents_view"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, get_contents_view) - 28usize];
    ["Offset of field: _cef_overlay_controller_t::get_window"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, get_window) - 32usize];
    ["Offset of field: _cef_overlay_controller_t::get_docking_mode"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, get_docking_mode) - 36usize];
    ["Offset of field: _cef_overlay_controller_t::destroy"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, destroy) - 40usize];
    ["Offset of field: _cef_overlay_controller_t::set_bounds"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, set_bounds) - 44usize];
    ["Offset of field: _cef_overlay_controller_t::get_bounds"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, get_bounds) - 48usize];
    ["Offset of field: _cef_overlay_controller_t::get_bounds_in_screen"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, get_bounds_in_screen) - 52usize];
    ["Offset of field: _cef_overlay_controller_t::set_size"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, set_size) - 56usize];
    ["Offset of field: _cef_overlay_controller_t::get_size"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, get_size) - 60usize];
    ["Offset of field: _cef_overlay_controller_t::set_position"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, set_position) - 64usize];
    ["Offset of field: _cef_overlay_controller_t::get_position"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, get_position) - 68usize];
    ["Offset of field: _cef_overlay_controller_t::set_insets"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, set_insets) - 72usize];
    ["Offset of field: _cef_overlay_controller_t::get_insets"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, get_insets) - 76usize];
    ["Offset of field: _cef_overlay_controller_t::size_to_preferred_size"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, size_to_preferred_size) - 80usize];
    ["Offset of field: _cef_overlay_controller_t::set_visible"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, set_visible) - 84usize];
    ["Offset of field: _cef_overlay_controller_t::is_visible"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, is_visible) - 88usize];
    ["Offset of field: _cef_overlay_controller_t::is_drawn"]
        [::std::mem::offset_of!(_cef_overlay_controller_t, is_drawn) - 92usize];
};
pub type cef_overlay_controller_t = _cef_overlay_controller_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_panel_delegate_t {
    pub base: cef_view_delegate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_panel_delegate_t"][::std::mem::size_of::<_cef_panel_delegate_t>() - 60usize];
    ["Alignment of _cef_panel_delegate_t"]
        [::std::mem::align_of::<_cef_panel_delegate_t>() - 4usize];
    ["Offset of field: _cef_panel_delegate_t::base"]
        [::std::mem::offset_of!(_cef_panel_delegate_t, base) - 0usize];
};
pub type cef_panel_delegate_t = _cef_panel_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_panel_t {
    pub base: cef_view_t,
    pub as_window:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t) -> *mut _cef_window_t>,
    pub set_to_fill_layout: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_panel_t) -> *mut _cef_fill_layout_t,
    >,
    pub set_to_box_layout: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_panel_t,
            settings: *const _cef_box_layout_settings_t,
        ) -> *mut _cef_box_layout_t,
    >,
    pub get_layout:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t) -> *mut _cef_layout_t>,
    pub layout: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t)>,
    pub add_child_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_panel_t, view: *mut _cef_view_t),
    >,
    pub add_child_view_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_panel_t,
            view: *mut _cef_view_t,
            index: ::std::os::raw::c_int,
        ),
    >,
    pub reorder_child_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_panel_t,
            view: *mut _cef_view_t,
            index: ::std::os::raw::c_int,
        ),
    >,
    pub remove_child_view: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_panel_t, view: *mut _cef_view_t),
    >,
    pub remove_all_child_views:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t)>,
    pub get_child_view_count:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_panel_t) -> usize>,
    pub get_child_view_at: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_panel_t,
            index: ::std::os::raw::c_int,
        ) -> *mut _cef_view_t,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_panel_t"][::std::mem::size_of::<_cef_panel_t>() - 268usize];
    ["Alignment of _cef_panel_t"][::std::mem::align_of::<_cef_panel_t>() - 4usize];
    ["Offset of field: _cef_panel_t::base"][::std::mem::offset_of!(_cef_panel_t, base) - 0usize];
    ["Offset of field: _cef_panel_t::as_window"]
        [::std::mem::offset_of!(_cef_panel_t, as_window) - 220usize];
    ["Offset of field: _cef_panel_t::set_to_fill_layout"]
        [::std::mem::offset_of!(_cef_panel_t, set_to_fill_layout) - 224usize];
    ["Offset of field: _cef_panel_t::set_to_box_layout"]
        [::std::mem::offset_of!(_cef_panel_t, set_to_box_layout) - 228usize];
    ["Offset of field: _cef_panel_t::get_layout"]
        [::std::mem::offset_of!(_cef_panel_t, get_layout) - 232usize];
    ["Offset of field: _cef_panel_t::layout"]
        [::std::mem::offset_of!(_cef_panel_t, layout) - 236usize];
    ["Offset of field: _cef_panel_t::add_child_view"]
        [::std::mem::offset_of!(_cef_panel_t, add_child_view) - 240usize];
    ["Offset of field: _cef_panel_t::add_child_view_at"]
        [::std::mem::offset_of!(_cef_panel_t, add_child_view_at) - 244usize];
    ["Offset of field: _cef_panel_t::reorder_child_view"]
        [::std::mem::offset_of!(_cef_panel_t, reorder_child_view) - 248usize];
    ["Offset of field: _cef_panel_t::remove_child_view"]
        [::std::mem::offset_of!(_cef_panel_t, remove_child_view) - 252usize];
    ["Offset of field: _cef_panel_t::remove_all_child_views"]
        [::std::mem::offset_of!(_cef_panel_t, remove_all_child_views) - 256usize];
    ["Offset of field: _cef_panel_t::get_child_view_count"]
        [::std::mem::offset_of!(_cef_panel_t, get_child_view_count) - 260usize];
    ["Offset of field: _cef_panel_t::get_child_view_at"]
        [::std::mem::offset_of!(_cef_panel_t, get_child_view_at) - 264usize];
};
pub type cef_panel_t = _cef_panel_t;
unsafe extern "C" {
    pub fn cef_panel_create(delegate: *mut _cef_panel_delegate_t) -> *mut cef_panel_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_window_delegate_t {
    pub base: cef_panel_delegate_t,
    pub on_window_created: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_delegate_t, window: *mut _cef_window_t),
    >,
    pub on_window_destroyed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_delegate_t, window: *mut _cef_window_t),
    >,
    pub get_parent_window: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            is_menu: *mut ::std::os::raw::c_int,
            can_activate_menu: *mut ::std::os::raw::c_int,
        ) -> *mut _cef_window_t,
    >,
    pub get_initial_bounds: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
        ) -> cef_rect_t,
    >,
    pub get_initial_show_state: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
        ) -> cef_show_state_t,
    >,
    pub is_frameless: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub can_resize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub can_maximize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub can_minimize: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub can_close: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            command_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub on_key_event: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_delegate_t,
            window: *mut _cef_window_t,
            event: *const _cef_key_event_t,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_window_delegate_t"][::std::mem::size_of::<_cef_window_delegate_t>() - 108usize];
    ["Alignment of _cef_window_delegate_t"]
        [::std::mem::align_of::<_cef_window_delegate_t>() - 4usize];
    ["Offset of field: _cef_window_delegate_t::base"]
        [::std::mem::offset_of!(_cef_window_delegate_t, base) - 0usize];
    ["Offset of field: _cef_window_delegate_t::on_window_created"]
        [::std::mem::offset_of!(_cef_window_delegate_t, on_window_created) - 60usize];
    ["Offset of field: _cef_window_delegate_t::on_window_destroyed"]
        [::std::mem::offset_of!(_cef_window_delegate_t, on_window_destroyed) - 64usize];
    ["Offset of field: _cef_window_delegate_t::get_parent_window"]
        [::std::mem::offset_of!(_cef_window_delegate_t, get_parent_window) - 68usize];
    ["Offset of field: _cef_window_delegate_t::get_initial_bounds"]
        [::std::mem::offset_of!(_cef_window_delegate_t, get_initial_bounds) - 72usize];
    ["Offset of field: _cef_window_delegate_t::get_initial_show_state"]
        [::std::mem::offset_of!(_cef_window_delegate_t, get_initial_show_state) - 76usize];
    ["Offset of field: _cef_window_delegate_t::is_frameless"]
        [::std::mem::offset_of!(_cef_window_delegate_t, is_frameless) - 80usize];
    ["Offset of field: _cef_window_delegate_t::can_resize"]
        [::std::mem::offset_of!(_cef_window_delegate_t, can_resize) - 84usize];
    ["Offset of field: _cef_window_delegate_t::can_maximize"]
        [::std::mem::offset_of!(_cef_window_delegate_t, can_maximize) - 88usize];
    ["Offset of field: _cef_window_delegate_t::can_minimize"]
        [::std::mem::offset_of!(_cef_window_delegate_t, can_minimize) - 92usize];
    ["Offset of field: _cef_window_delegate_t::can_close"]
        [::std::mem::offset_of!(_cef_window_delegate_t, can_close) - 96usize];
    ["Offset of field: _cef_window_delegate_t::on_accelerator"]
        [::std::mem::offset_of!(_cef_window_delegate_t, on_accelerator) - 100usize];
    ["Offset of field: _cef_window_delegate_t::on_key_event"]
        [::std::mem::offset_of!(_cef_window_delegate_t, on_key_event) - 104usize];
};
pub type cef_window_delegate_t = _cef_window_delegate_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cef_window_t {
    pub base: cef_panel_t,
    pub show: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub hide: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub center_window: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, size: *const cef_size_t),
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub is_closed: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int,
    >,
    pub activate: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub deactivate: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub is_active: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int,
    >,
    pub bring_to_top: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub set_always_on_top: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, on_top: ::std::os::raw::c_int),
    >,
    pub is_always_on_top: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int,
    >,
    pub maximize: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub minimize: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub restore: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub set_fullscreen: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, fullscreen: ::std::os::raw::c_int),
    >,
    pub is_maximized: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int,
    >,
    pub is_minimized: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int,
    >,
    pub is_fullscreen: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_int,
    >,
    pub set_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, title: *const cef_string_t),
    >,
    pub get_title: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> cef_string_userfree_t,
    >,
    pub set_window_icon: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, image: *mut _cef_image_t),
    >,
    pub get_window_icon:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t) -> *mut _cef_image_t>,
    pub set_window_app_icon: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, image: *mut _cef_image_t),
    >,
    pub get_window_app_icon:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t) -> *mut _cef_image_t>,
    pub add_overlay_view: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            view: *mut _cef_view_t,
            docking_mode: cef_docking_mode_t,
        ) -> *mut _cef_overlay_controller_t,
    >,
    pub show_menu: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            menu_model: *mut _cef_menu_model_t,
            screen_point: *const cef_point_t,
            anchor_position: cef_menu_anchor_position_t,
        ),
    >,
    pub cancel_menu: ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
    pub get_display: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> *mut _cef_display_t,
    >,
    pub get_client_area_bounds_in_screen:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t) -> cef_rect_t>,
    pub set_draggable_regions: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            regionsCount: usize,
            regions: *const cef_draggable_region_t,
        ),
    >,
    pub get_window_handle: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t) -> ::std::os::raw::c_ulong,
    >,
    pub send_key_press: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            key_code: ::std::os::raw::c_int,
            event_flags: uint32,
        ),
    >,
    pub send_mouse_move: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            screen_x: ::std::os::raw::c_int,
            screen_y: ::std::os::raw::c_int,
        ),
    >,
    pub send_mouse_events: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            button: cef_mouse_button_type_t,
            mouse_down: ::std::os::raw::c_int,
            mouse_up: ::std::os::raw::c_int,
        ),
    >,
    pub set_accelerator: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut _cef_window_t,
            command_id: ::std::os::raw::c_int,
            key_code: ::std::os::raw::c_int,
            shift_pressed: ::std::os::raw::c_int,
            ctrl_pressed: ::std::os::raw::c_int,
            alt_pressed: ::std::os::raw::c_int,
        ),
    >,
    pub remove_accelerator: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut _cef_window_t, command_id: ::std::os::raw::c_int),
    >,
    pub remove_all_accelerators:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut _cef_window_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cef_window_t"][::std::mem::size_of::<_cef_window_t>() - 416usize];
    ["Alignment of _cef_window_t"][::std::mem::align_of::<_cef_window_t>() - 4usize];
    ["Offset of field: _cef_window_t::base"][::std::mem::offset_of!(_cef_window_t, base) - 0usize];
    ["Offset of field: _cef_window_t::show"]
        [::std::mem::offset_of!(_cef_window_t, show) - 268usize];
    ["Offset of field: _cef_window_t::hide"]
        [::std::mem::offset_of!(_cef_window_t, hide) - 272usize];
    ["Offset of field: _cef_window_t::center_window"]
        [::std::mem::offset_of!(_cef_window_t, center_window) - 276usize];
    ["Offset of field: _cef_window_t::close"]
        [::std::mem::offset_of!(_cef_window_t, close) - 280usize];
    ["Offset of field: _cef_window_t::is_closed"]
        [::std::mem::offset_of!(_cef_window_t, is_closed) - 284usize];
    ["Offset of field: _cef_window_t::activate"]
        [::std::mem::offset_of!(_cef_window_t, activate) - 288usize];
    ["Offset of field: _cef_window_t::deactivate"]
        [::std::mem::offset_of!(_cef_window_t, deactivate) - 292usize];
    ["Offset of field: _cef_window_t::is_active"]
        [::std::mem::offset_of!(_cef_window_t, is_active) - 296usize];
    ["Offset of field: _cef_window_t::bring_to_top"]
        [::std::mem::offset_of!(_cef_window_t, bring_to_top) - 300usize];
    ["Offset of field: _cef_window_t::set_always_on_top"]
        [::std::mem::offset_of!(_cef_window_t, set_always_on_top) - 304usize];
    ["Offset of field: _cef_window_t::is_always_on_top"]
        [::std::mem::offset_of!(_cef_window_t, is_always_on_top) - 308usize];
    ["Offset of field: _cef_window_t::maximize"]
        [::std::mem::offset_of!(_cef_window_t, maximize) - 312usize];
    ["Offset of field: _cef_window_t::minimize"]
        [::std::mem::offset_of!(_cef_window_t, minimize) - 316usize];
    ["Offset of field: _cef_window_t::restore"]
        [::std::mem::offset_of!(_cef_window_t, restore) - 320usize];
    ["Offset of field: _cef_window_t::set_fullscreen"]
        [::std::mem::offset_of!(_cef_window_t, set_fullscreen) - 324usize];
    ["Offset of field: _cef_window_t::is_maximized"]
        [::std::mem::offset_of!(_cef_window_t, is_maximized) - 328usize];
    ["Offset of field: _cef_window_t::is_minimized"]
        [::std::mem::offset_of!(_cef_window_t, is_minimized) - 332usize];
    ["Offset of field: _cef_window_t::is_fullscreen"]
        [::std::mem::offset_of!(_cef_window_t, is_fullscreen) - 336usize];
    ["Offset of field: _cef_window_t::set_title"]
        [::std::mem::offset_of!(_cef_window_t, set_title) - 340usize];
    ["Offset of field: _cef_window_t::get_title"]
        [::std::mem::offset_of!(_cef_window_t, get_title) - 344usize];
    ["Offset of field: _cef_window_t::set_window_icon"]
        [::std::mem::offset_of!(_cef_window_t, set_window_icon) - 348usize];
    ["Offset of field: _cef_window_t::get_window_icon"]
        [::std::mem::offset_of!(_cef_window_t, get_window_icon) - 352usize];
    ["Offset of field: _cef_window_t::set_window_app_icon"]
        [::std::mem::offset_of!(_cef_window_t, set_window_app_icon) - 356usize];
    ["Offset of field: _cef_window_t::get_window_app_icon"]
        [::std::mem::offset_of!(_cef_window_t, get_window_app_icon) - 360usize];
    ["Offset of field: _cef_window_t::add_overlay_view"]
        [::std::mem::offset_of!(_cef_window_t, add_overlay_view) - 364usize];
    ["Offset of field: _cef_window_t::show_menu"]
        [::std::mem::offset_of!(_cef_window_t, show_menu) - 368usize];
    ["Offset of field: _cef_window_t::cancel_menu"]
        [::std::mem::offset_of!(_cef_window_t, cancel_menu) - 372usize];
    ["Offset of field: _cef_window_t::get_display"]
        [::std::mem::offset_of!(_cef_window_t, get_display) - 376usize];
    ["Offset of field: _cef_window_t::get_client_area_bounds_in_screen"]
        [::std::mem::offset_of!(_cef_window_t, get_client_area_bounds_in_screen) - 380usize];
    ["Offset of field: _cef_window_t::set_draggable_regions"]
        [::std::mem::offset_of!(_cef_window_t, set_draggable_regions) - 384usize];
    ["Offset of field: _cef_window_t::get_window_handle"]
        [::std::mem::offset_of!(_cef_window_t, get_window_handle) - 388usize];
    ["Offset of field: _cef_window_t::send_key_press"]
        [::std::mem::offset_of!(_cef_window_t, send_key_press) - 392usize];
    ["Offset of field: _cef_window_t::send_mouse_move"]
        [::std::mem::offset_of!(_cef_window_t, send_mouse_move) - 396usize];
    ["Offset of field: _cef_window_t::send_mouse_events"]
        [::std::mem::offset_of!(_cef_window_t, send_mouse_events) - 400usize];
    ["Offset of field: _cef_window_t::set_accelerator"]
        [::std::mem::offset_of!(_cef_window_t, set_accelerator) - 404usize];
    ["Offset of field: _cef_window_t::remove_accelerator"]
        [::std::mem::offset_of!(_cef_window_t, remove_accelerator) - 408usize];
    ["Offset of field: _cef_window_t::remove_all_accelerators"]
        [::std::mem::offset_of!(_cef_window_t, remove_all_accelerators) - 412usize];
};
pub type cef_window_t = _cef_window_t;
unsafe extern "C" {
    pub fn cef_window_create_top_level(delegate: *mut _cef_window_delegate_t) -> *mut cef_window_t;
}
