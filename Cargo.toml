[package]
name = "cef"
version = "130.1.16"
edition = "2021"
license = "Apache-2.0 OR MIT"
authors = ["Wu Yu Wei <yuweiwu@pm.me>", "csmoe <csmoe@msn.com>"]
description = "Use cef in Rust"
repository = "https://github.com/csmoe/cef-rs"
readme = "README.md"

[package.metadata.bundle.example.demo]
name = "demo"
identifier = "com.cef.demo"
category = "Utility"
short_description = "An example of a bundled CEF application"
long_description = """ CEF application in Rust """
osx_frameworks = [ "sys/cef/archive/Chromium Embedded Framework.framework", ]

[package.metadata.bundle.example.demo_helper]
name = "demo Helper"
identifir = "com.cef.demo"
category = "Utility"
short_description = "An example of a bundled CEF application"
long_description = """ CEF application in Rust """
osx_frameworks = [ "sys/cef/archive/Chromium Embedded Framework.framework" ]

[package.metadata.bundle.example.demo_helper_gpu]
name = "demo Helper(GPU)"
identifir = "com.cef.demo"
category = "Utility"
short_description = "An example of a bundled CEF application"
long_description = """ CEF application in Rust """
osx_frameworks = [ "sys/cef/archive/Chromium Embedded Framework.framework" ]

[package.metadata.bundle.example.demo_helper_render]
name = "demo Helper(Render)"
identifir = "com.cef.demo"
category = "Utility"
short_description = "An example of a bundled CEF application"
long_description = """ CEF application in Rust """
osx_frameworks = [ "sys/cef/archive/Chromium Embedded Framework.framework" ]

[features]
dox = ["cef-sys/dox"]

[package.metadata.docs.rs]
features = [ "dox" ]

[workspace]
members = [
 "sys",
 "cef-wrapper-macro",
]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
cef-sys = { package = "libcef-sys", version = "130.1.16", path = "sys" }
cef-wrapper-macro = { path = "cef-wrapper-macro" }
image = { version = "0.25" , default-features = false, features = [ "bmp", "jpeg", "png" ] }
widestring = "1.0"
anyhow = "1"
thiserror = "1"
camino = "1"

[target.'cfg(target_os = "windows")'.dependencies]
windows = { version = "0.58", features = [ "Win32_Foundation", "Win32_System_LibraryLoader", "Win32_UI_WindowsAndMessaging" ] }

[target.'cfg(target_os = "macos")'.dependencies]
objc2-app-kit = { version = "0.2", features = [ "NSView", "NSResponder" ]}

[dev-dependencies]
winit = "0.28"

